
SPI_DIRVER_PRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00004430  000044c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800096  00800096  000044fa  2**0
                  ALLOC
  3 .stab         00004d04  00000000  00000000  000044fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002313  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b513  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b653  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d40c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e2f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f0a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f491  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fc5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__vector_1>
       8:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__vector_2>
       c:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_3>
      10:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_4>
      14:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_5>
      18:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_6>
      1c:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_7>
      20:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_8>
      24:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_9>
      28:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_10>
      2c:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__vector_11>
      30:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_12>
      34:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__vector_13>
      38:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_14>
      3c:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_15>
      40:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <main>
      8a:	0c 94 16 22 	jmp	0x442c	; 0x442c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_VidInit>:
#include"MUART_Private.h"
#include"MUART_Config.h"

void (*CALLBACK) (void);
 void MUART_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	 uint8 Loc_uint8TempRegister=0;
     b50:	19 82       	std	Y+1, r1	; 0x01
	 SET_BIT(Loc_uint8TempRegister,7);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	89 83       	std	Y+1, r24	; 0x01
	   /*Mode UART Select */
#if UART_SELECTMODE == UART_ASYNCHRONOUS
	 CLR_BIT(Loc_uint8TempRegister,6);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	89 83       	std	Y+1, r24	; 0x01
#error"UART Mode Select Option Is Not Valid.."
#endif

	 /*UART Parity Mode Option CHECK*/
#if UART_PARITYCHECK_MODE   == PARTIYCHECK_DISABLED
	 CLR_BIT(Loc_uint8TempRegister,4);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 7e       	andi	r24, 0xEF	; 239
     b62:	89 83       	std	Y+1, r24	; 0x01
	 CLR_BIT(Loc_uint8TempRegister,4);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	8f 7e       	andi	r24, 0xEF	; 239
     b68:	89 83       	std	Y+1, r24	; 0x01
#error"PARTIY Check Option Is Not Valid.."
#endif

	 /*STOP Bit Option*/
#if UART_STOPBIT == ONE_BIT
	 CLR_BIT(Loc_uint8TempRegister,3);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	87 7f       	andi	r24, 0xF7	; 247
     b6e:	89 83       	std	Y+1, r24	; 0x01
#elif UART_NUMBEROFDATA_BIT==CHAR_7Bit
	 CLR_BIT(Loc_uint8TempRegister,1);
	 SET_BIT(Loc_uint8TempRegister,2);
	 CLR_BIT(UCSRB,2);
#elif UART_NUMBEROFDATA_BIT==CHAR_8Bit
	 SET_BIT(Loc_uint8TempRegister,1);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	89 83       	std	Y+1, r24	; 0x01
	 SET_BIT(Loc_uint8TempRegister,2);
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	84 60       	ori	r24, 0x04	; 4
     b7a:	89 83       	std	Y+1, r24	; 0x01
	 CLR_BIT(UCSRB,2);
     b7c:	aa e2       	ldi	r26, 0x2A	; 42
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	ea e2       	ldi	r30, 0x2A	; 42
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	8b 7f       	andi	r24, 0xFB	; 251
     b88:	8c 93       	st	X, r24
	 SET_BIT(Loc_uint8TempRegister,2);
	 SET_BIT(UCSRB,2);
#else
	 #error"Data Bit Option Is Not Valid.."
#endif
	 UCSRC=Loc_uint8TempRegister;
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	80 83       	st	Z, r24
	 /*Set BaudRate -->9600*/
	 UBRRL=UART_BAUDRATE;
     b92:	e9 e2       	ldi	r30, 0x29	; 41
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	87 e6       	ldi	r24, 0x67	; 103
     b98:	80 83       	st	Z, r24
	          /*Enable Receiver*/
	 SET_BIT(UCSRB,4);
     b9a:	aa e2       	ldi	r26, 0x2A	; 42
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ea e2       	ldi	r30, 0x2A	; 42
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 61       	ori	r24, 0x10	; 16
     ba6:	8c 93       	st	X, r24
	          /*Enable transmit*/
	 SET_BIT(UCSRB,3);
     ba8:	aa e2       	ldi	r26, 0x2A	; 42
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e2       	ldi	r30, 0x2A	; 42
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 60       	ori	r24, 0x08	; 8
     bb4:	8c 93       	st	X, r24
	          /*Enable Transmit TX Interrupt*/
	 SET_BIT(UCSRB,6);
     bb6:	aa e2       	ldi	r26, 0x2A	; 42
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e2       	ldi	r30, 0x2A	; 42
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 64       	ori	r24, 0x40	; 64
     bc2:	8c 93       	st	X, r24
	          /*Enable Receiver RX Interrupt*/
	 SET_BIT(UCSRB,7);
     bc4:	aa e2       	ldi	r26, 0x2A	; 42
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	ea e2       	ldi	r30, 0x2A	; 42
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 68       	ori	r24, 0x80	; 128
     bd0:	8c 93       	st	X, r24
	          /*Data Register Interrupt Enable*/
	 SET_BIT(UCSRB,5);
     bd2:	aa e2       	ldi	r26, 0x2A	; 42
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ea e2       	ldi	r30, 0x2A	; 42
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 62       	ori	r24, 0x20	; 32
     bde:	8c 93       	st	X, r24

 }
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <MUART_VidSendChar>:
 void MUART_VidSendChar(uint8 copy_uint8Char)
 {
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	0f 92       	push	r0
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	89 83       	std	Y+1, r24	; 0x01
	 while(GET_BIT(UCSRA,5==0));
     bf4:	eb e2       	ldi	r30, 0x2B	; 43
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	82 95       	swap	r24
     bfc:	86 95       	lsr	r24
     bfe:	87 70       	andi	r24, 0x07	; 7
     c00:	88 23       	and	r24, r24
     c02:	c1 f3       	breq	.-16     	; 0xbf4 <MUART_VidSendChar+0xc>
	 UDR=copy_uint8Char;
     c04:	ec e2       	ldi	r30, 0x2C	; 44
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	80 83       	st	Z, r24
 }
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <MUART_vidSendString>:
 void MUART_vidSendString(uint8 *copy_uint8String)
 {
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	00 d0       	rcall	.+0      	; 0xc1a <MUART_vidSendString+0x6>
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	9b 83       	std	Y+3, r25	; 0x03
     c22:	8a 83       	std	Y+2, r24	; 0x02
	 uint8 Loc_uint8count=0;
     c24:	19 82       	std	Y+1, r1	; 0x01
     c26:	0e c0       	rjmp	.+28     	; 0xc44 <MUART_vidSendString+0x30>
	 while(copy_uint8String[Loc_uint8count]!='\0')
	 {
		MUART_VidSendChar(copy_uint8String[Loc_uint8count]);
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	fc 01       	movw	r30, r24
     c34:	e2 0f       	add	r30, r18
     c36:	f3 1f       	adc	r31, r19
     c38:	80 81       	ld	r24, Z
     c3a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MUART_VidSendChar>
		Loc_uint8count++;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	89 83       	std	Y+1, r24	; 0x01
	 UDR=copy_uint8Char;
 }
 void MUART_vidSendString(uint8 *copy_uint8String)
 {
	 uint8 Loc_uint8count=0;
	 while(copy_uint8String[Loc_uint8count]!='\0')
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	fc 01       	movw	r30, r24
     c50:	e2 0f       	add	r30, r18
     c52:	f3 1f       	adc	r31, r19
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	39 f7       	brne	.-50     	; 0xc28 <MUART_vidSendString+0x14>
	 {
		MUART_VidSendChar(copy_uint8String[Loc_uint8count]);
		Loc_uint8count++;
	 }
 }
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <MUART_uint8ReciverChar>:
 uint8 MUART_uint8ReciverChar(void)
 {
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	 while(GET_BIT(UCSRA,7)==0);
     c6e:	eb e2       	ldi	r30, 0x2B	; 43
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	dc f7       	brge	.-10     	; 0xc6e <MUART_uint8ReciverChar+0x8>
	 return UDR;
     c78:	ec e2       	ldi	r30, 0x2C	; 44
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
 }
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <MUART_VidSetTXCallBack>:
 void MUART_VidSetTXCallBack(void(*PtrToFun)(void))
 {
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <MUART_VidSetTXCallBack+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	90 93 98 00 	sts	0x0098, r25
     c9a:	80 93 97 00 	sts	0x0097, r24
 }
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <MUART_VidSetRXCallBack>:
 void MUART_VidSetRXCallBack(void(*PtrToFun)(void))
 {
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	00 d0       	rcall	.+0      	; 0xcae <MUART_VidSetRXCallBack+0x6>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	90 93 98 00 	sts	0x0098, r25
     cbe:	80 93 97 00 	sts	0x0097, r24
 }
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <MUART_VidUSART_REG_SetCallBack>:
 void MUART_VidUSART_REG_SetCallBack(void(*PtrToFun)(void))
 {
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <MUART_VidUSART_REG_SetCallBack+0x6>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	90 93 98 00 	sts	0x0098, r25
     ce2:	80 93 97 00 	sts	0x0097, r24
 }
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <__vector_15>:
  /*TX*/

 void __vector_15(void)   __attribute__((signal));
 void __vector_15(void)
 {
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     d1a:	e0 91 97 00 	lds	r30, 0x0097
     d1e:	f0 91 98 00 	lds	r31, 0x0098
     d22:	09 95       	icall
 }
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	7f 91       	pop	r23
     d36:	6f 91       	pop	r22
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <__vector_13>:
 /*RX*/
 void __vector_13(void)   __attribute__((signal));
 void __vector_13(void)
 {
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     d74:	e0 91 97 00 	lds	r30, 0x0097
     d78:	f0 91 98 00 	lds	r31, 0x0098
     d7c:	09 95       	icall
 }
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <__vector_14>:
 /*UART DATA Register Empty*/
 void __vector_14(void)   __attribute__((signal));
 void __vector_14(void)
 {
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	2f 93       	push	r18
     db0:	3f 93       	push	r19
     db2:	4f 93       	push	r20
     db4:	5f 93       	push	r21
     db6:	6f 93       	push	r22
     db8:	7f 93       	push	r23
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	af 93       	push	r26
     dc0:	bf 93       	push	r27
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     dce:	e0 91 97 00 	lds	r30, 0x0097
     dd2:	f0 91 98 00 	lds	r31, 0x0098
     dd6:	09 95       	icall
 }
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <MTIMER2_VidInit>:
#include"MTIMER2_Config.h"


void (*MTIMER2_CALLBACK)(void);
void MTIMER2_VidInit(void)
{
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,6);
	/*OverFlow Interrupt Enable */
	SET_BIT(TIMSK,6);

#elif TIMER2SETMODE == TIMER2_FASTPWMMODE
	SET_BIT(TCCR2,6);
     e06:	a5 e4       	ldi	r26, 0x45	; 69
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e5 e4       	ldi	r30, 0x45	; 69
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 64       	ori	r24, 0x40	; 64
     e12:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
     e14:	a5 e4       	ldi	r26, 0x45	; 69
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e4       	ldi	r30, 0x45	; 69
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 60       	ori	r24, 0x08	; 8
     e20:	8c 93       	st	X, r24
  #if TIMER2_PWMMODE_OC2PINMODE==TIMER2_PWMMODE_NON_INVERTING
	CLR_BIT(TCCR2,4);
     e22:	a5 e4       	ldi	r26, 0x45	; 69
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e4       	ldi	r30, 0x45	; 69
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7e       	andi	r24, 0xEF	; 239
     e2e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,5);
     e30:	a5 e4       	ldi	r26, 0x45	; 69
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e4       	ldi	r30, 0x45	; 69
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 62       	ori	r24, 0x20	; 32
     e3c:	8c 93       	st	X, r24
#else
	#error"Timer2 Mode Options Is Not Valid.."
#endif

	              /*SET PRESCALER*/
	TCCR2&=0xF8;
     e3e:	a5 e4       	ldi	r26, 0x45	; 69
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e4       	ldi	r30, 0x45	; 69
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 7f       	andi	r24, 0xF8	; 248
     e4a:	8c 93       	st	X, r24
	TCCR2|=MTIMER2_SET_PRESCALER;
     e4c:	a5 e4       	ldi	r26, 0x45	; 69
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e5 e4       	ldi	r30, 0x45	; 69
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	85 60       	ori	r24, 0x05	; 5
     e58:	8c 93       	st	X, r24
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <MTIMER2_VidSetPreLoad>:
void MTIMER2_VidSetPreLoad(uint8 copy_uint8PreLoadValue)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=copy_uint8PreLoadValue;
     e6c:	e4 e4       	ldi	r30, 0x44	; 68
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	80 83       	st	Z, r24
}
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <MTIMER2_VidSetCTCRegister>:
void MTIMER2_VidSetCTCRegister(uint8 copy_uint8CTCRegisteValue)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	89 83       	std	Y+1, r24	; 0x01
	OCR2=copy_uint8CTCRegisteValue;
     e88:	e3 e4       	ldi	r30, 0x43	; 67
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 83       	st	Z, r24
}
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack>:
void MTIMER2_VidTIMER2_OVERFLOW_SetCallBack(void (*PtrToFun)(void))
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	90 93 9a 00 	sts	0x009A, r25
     eae:	80 93 99 00 	sts	0x0099, r24
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <MTIMER2_VidTIMER2_CTC_SetCallBack>:
void MTIMER2_VidTIMER2_CTC_SetCallBack(void (*PtrToFun)(void))
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <MTIMER2_VidTIMER2_CTC_SetCallBack+0x6>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	90 93 9a 00 	sts	0x009A, r25
     ed2:	80 93 99 00 	sts	0x0099, r24
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <__vector_4>:
           /*CTC*/
void __vector_4(void)   __attribute__((signal));
void __vector_4(void)
{
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
     f0a:	e0 91 99 00 	lds	r30, 0x0099
     f0e:	f0 91 9a 00 	lds	r31, 0x009A
     f12:	09 95       	icall
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_5>:
         /*overflow */
void __vector_5(void)   __attribute__((signal));
void __vector_5(void)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
     f64:	e0 91 99 00 	lds	r30, 0x0099
     f68:	f0 91 9a 00 	lds	r31, 0x009A
     f6c:	09 95       	icall
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	ff 91       	pop	r31
     f74:	ef 91       	pop	r30
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <MTIMER1_VidInit>:


void (*MTIMER1_CALLBACK)(void);

void MTIMER1_VidInit(void)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
	/*Compare Match Enable Interrupt*/
	SET_BIT(TIMSK,4);
	SET_BIT(TIMSK,3);

#elif TIMER1SETMODE == TIMER1_NORMALMODE
	CLR_BIT(TCCR1A,0);
     f9c:	af e4       	ldi	r26, 0x4F	; 79
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ef e4       	ldi	r30, 0x4F	; 79
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     faa:	af e4       	ldi	r26, 0x4F	; 79
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ef e4       	ldi	r30, 0x4F	; 79
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     fb8:	ae e4       	ldi	r26, 0x4E	; 78
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ee e4       	ldi	r30, 0x4E	; 78
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	87 7f       	andi	r24, 0xF7	; 247
     fc4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
     fc6:	ae e4       	ldi	r26, 0x4E	; 78
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ee e4       	ldi	r30, 0x4E	; 78
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7e       	andi	r24, 0xEF	; 239
     fd2:	8c 93       	st	X, r24
	/*OVERFLOW  Enable Interrupt */
	SET_BIT(TIMSK,2);
     fd4:	a9 e5       	ldi	r26, 0x59	; 89
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 e5       	ldi	r30, 0x59	; 89
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	8c 93       	st	X, r24
#else
#error "Timer 1 Options Is Not Valid."
#endif

/*********SET PRESCALER *********/
	TCCR1B&=0xF8;
     fe2:	ae e4       	ldi	r26, 0x4E	; 78
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ee e4       	ldi	r30, 0x4E	; 78
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 7f       	andi	r24, 0xF8	; 248
     fee:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SETPRESCALER;
     ff0:	ae e4       	ldi	r26, 0x4E	; 78
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee e4       	ldi	r30, 0x4E	; 78
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	83 60       	ori	r24, 0x03	; 3
     ffc:	8c 93       	st	X, r24
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <MTIMER1_VidInit_ICU>:
void MTIMER1_VidInit_ICU(void)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    100c:	a9 e5       	ldi	r26, 0x59	; 89
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e9 e5       	ldi	r30, 0x59	; 89
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 62       	ori	r24, 0x20	; 32
    1018:	8c 93       	st	X, r24
	    /*Enable ICU Noise Canceler */
	SET_BIT(TCCR1B,7);
    101a:	ae e4       	ldi	r26, 0x4E	; 78
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ee e4       	ldi	r30, 0x4E	; 78
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 68       	ori	r24, 0x80	; 128
    1026:	8c 93       	st	X, r24
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <MTIMER1_VidICU_SelectEdge>:
void MTIMER1_VidICU_SelectEdge(uint8 copy_uint8SelectEgde)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <MTIMER1_VidICU_SelectEdge+0x6>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_uint8SelectEgde)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3b 83       	std	Y+3, r19	; 0x03
    1044:	2a 83       	std	Y+2, r18	; 0x02
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	69 f0       	breq	.+26     	; 0x1068 <MTIMER1_VidICU_SelectEdge+0x3a>
    104e:	2a 81       	ldd	r18, Y+2	; 0x02
    1050:	3b 81       	ldd	r19, Y+3	; 0x03
    1052:	21 30       	cpi	r18, 0x01	; 1
    1054:	31 05       	cpc	r19, r1
    1056:	79 f4       	brne	.+30     	; 0x1076 <MTIMER1_VidICU_SelectEdge+0x48>
	{
	case ICU_RISING_EDGE:
	{
	     SET_BIT(TCCR1B,6);
    1058:	ae e4       	ldi	r26, 0x4E	; 78
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ee e4       	ldi	r30, 0x4E	; 78
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 64       	ori	r24, 0x40	; 64
    1064:	8c 93       	st	X, r24
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <MTIMER1_VidICU_SelectEdge+0x48>
	     break;
	}
	case ICU_FALLING_EDGE:
	{
		CLR_BIT(TCCR1B,6);
    1068:	ae e4       	ldi	r26, 0x4E	; 78
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ee e4       	ldi	r30, 0x4E	; 78
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8f 7b       	andi	r24, 0xBF	; 191
    1074:	8c 93       	st	X, r24
		break;
	}

	}
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <MTIMER1_VidSetPreLoad>:
void MTIMER1_VidSetPreLoad(uint16 copy_uint16PreLoadvalue)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <MTIMER1_VidSetPreLoad+0x6>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
	/*Normal mode data Register*/
	//uint16 TCNT1;
	TCNT1=copy_uint16PreLoadvalue;
    1090:	ec e4       	ldi	r30, 0x4C	; 76
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	80 83       	st	Z, r24
	/*TCNT1=TCNT1H;
	TCNT1|=TCNT1L<<8;
	TCNT1=copy_uint8PreLoadvalue;*/
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <MTIMER1_VidSetCTCRegister_CHB>:
void MTIMER1_VidSetCTCRegister_CHB(uint16 copy_uint16CTCValue)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <MTIMER1_VidSetCTCRegister_CHB+0x6>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=copy_uint16CTCValue;
    10b4:	e8 e4       	ldi	r30, 0x48	; 72
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
	/*OutPut Compare match B option*/
	/*OCR1B=OCR1BH;
	OCR1B|=OCR1BL<<8;
	OCR1B=copy_uint16CTCValue;*/
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <MTIMER1_VidSetCTCRegister_CHA>:
void MTIMER1_VidSetCTCRegister_CHA(uint16 copy_uint16CTCValue)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <MTIMER1_VidSetCTCRegister_CHA+0x6>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=copy_uint16CTCValue;
    10d8:	ea e4       	ldi	r30, 0x4A	; 74
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	80 83       	st	Z, r24
	/*OutPut Compare match A option*/
	//OCR1A=copy_uint16CTCValue;
	/*OCR1A=OCR1AH;
		OCR1A|=OCR1AL<<8;
		OCR1A=copy_uint16CTCValue;*/
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <MTIMER1_VidSetCTCRegister_ICR1>:
void MTIMER1_VidSetCTCRegister_ICR1(uint16 copy_uint16CTCValue)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <MTIMER1_VidSetCTCRegister_ICR1+0x6>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	89 83       	std	Y+1, r24	; 0x01
	ICR1=copy_uint16CTCValue;
    10fc:	e6 e4       	ldi	r30, 0x46	; 70
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	80 83       	st	Z, r24
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <MTIMER1_VidTimer1_OverFlow_SetCallBack>:
void MTIMER1_VidTimer1_OverFlow_SetCallBack(void (*PtrToFun)(void))
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <MTIMER1_VidTimer1_OverFlow_SetCallBack+0x6>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	90 93 9c 00 	sts	0x009C, r25
    1128:	80 93 9b 00 	sts	0x009B, r24
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <MTIMER1_VidTimer1_CTC_SetCallBack>:
void MTIMER1_VidTimer1_CTC_SetCallBack(void (*PtrToFun)(void))
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <MTIMER1_VidTimer1_CTC_SetCallBack+0x6>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	90 93 9c 00 	sts	0x009C, r25
    114c:	80 93 9b 00 	sts	0x009B, r24
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <MTIMER1_uint32Read_ICR1>:

uint32 MTIMER1_uint32Read_ICR1(void)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1162:	e6 e4       	ldi	r30, 0x46	; 70
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	cc 01       	movw	r24, r24
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
}
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <MTIMER1_VidTimer1_ICU_SetCallBack>:
void MTIMER1_VidTimer1_ICU_SetCallBack(void(*PtrToFun)(void))
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <MTIMER1_VidTimer1_ICU_SetCallBack+0x6>
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	90 93 9c 00 	sts	0x009C, r25
    1190:	80 93 9b 00 	sts	0x009B, r24
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <__vector_7>:
     /*Compare A*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	5f 93       	push	r21
    11b0:	6f 93       	push	r22
    11b2:	7f 93       	push	r23
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    11c8:	e0 91 9b 00 	lds	r30, 0x009B
    11cc:	f0 91 9c 00 	lds	r31, 0x009C
    11d0:	09 95       	icall
}
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_8>:
   /*Compare B*/
void __vector_8(void)  __attribute__((signal));
void __vector_8(void)
{
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    1222:	e0 91 9b 00 	lds	r30, 0x009B
    1226:	f0 91 9c 00 	lds	r31, 0x009C
    122a:	09 95       	icall
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <__vector_9>:
   /*OverFlow */
void __vector_9(void)  __attribute__((signal));
void __vector_9(void)
{
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    127c:	e0 91 9b 00 	lds	r30, 0x009B
    1280:	f0 91 9c 00 	lds	r31, 0x009C
    1284:	09 95       	icall
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	bf 91       	pop	r27
    1290:	af 91       	pop	r26
    1292:	9f 91       	pop	r25
    1294:	8f 91       	pop	r24
    1296:	7f 91       	pop	r23
    1298:	6f 91       	pop	r22
    129a:	5f 91       	pop	r21
    129c:	4f 91       	pop	r20
    129e:	3f 91       	pop	r19
    12a0:	2f 91       	pop	r18
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_6>:
  /*ICU*/
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    12d6:	e0 91 9b 00 	lds	r30, 0x009B
    12da:	f0 91 9c 00 	lds	r31, 0x009C
    12de:	09 95       	icall
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <MTIMER0_VidInit>:
#include"MTIMER0_Private.h"
#include"MTIMER0_Config.h"

void (*MTIMER0_CALLBACK)(void);
void MTIMER0_VidInit(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	#else #error "OC0 PIN Is Not Valid.."
	#endif
	/*CTC Enable interrupt */
	SET_BIT(TIMSK,1);
#elif TIMER0_SETMODE == TIMER0_NORMALMODE
	CLR_BIT(TCCR0,3);
    130e:	a3 e5       	ldi	r26, 0x53	; 83
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e3 e5       	ldi	r30, 0x53	; 83
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	87 7f       	andi	r24, 0xF7	; 247
    131a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
    131c:	a3 e5       	ldi	r26, 0x53	; 83
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e3 e5       	ldi	r30, 0x53	; 83
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8f 7b       	andi	r24, 0xBF	; 191
    1328:	8c 93       	st	X, r24
	/*OVERFLOW  Enable interrupt */
	SET_BIT(TIMSK,0);
    132a:	a9 e5       	ldi	r26, 0x59	; 89
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e9 e5       	ldi	r30, 0x59	; 89
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	8c 93       	st	X, r24

#else
	#error"TIMER0 MODE Is Not Valid.."
#endif
	/*Set PreScaler*/
	TCCR0&=0xF8;
    1338:	a3 e5       	ldi	r26, 0x53	; 83
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e3 e5       	ldi	r30, 0x53	; 83
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	88 7f       	andi	r24, 0xF8	; 248
    1344:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SETPRESCALER;
    1346:	a3 e5       	ldi	r26, 0x53	; 83
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e3 e5       	ldi	r30, 0x53	; 83
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	84 60       	ori	r24, 0x04	; 4
    1352:	8c 93       	st	X, r24
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <MTIMER0_uint32Read>:
uint8 MTIMER0_uint32Read(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1362:	e2 e5       	ldi	r30, 0x52	; 82
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <MTIMER0_VidSetPreLoad>:
void MTIMER0_VidSetPreLoad(uint8 copy_uint8PreLoad)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	0f 92       	push	r0
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=copy_uint8PreLoad;
    137a:	e2 e5       	ldi	r30, 0x52	; 82
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	80 83       	st	Z, r24
}
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <MTIMER0_VidSetCTCRegister>:
void MTIMER0_VidSetCTCRegister(uint8 copy_uint8CTCValue)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	0f 92       	push	r0
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_uint8CTCValue;
    1396:	ec e5       	ldi	r30, 0x5C	; 92
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	80 83       	st	Z, r24
}
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <MTIMER0_VidTimerOverFlow_SetCallBack>:
void MTIMER0_VidTimerOverFlow_SetCallBack(void (*PtrToFun)(void))
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <MTIMER0_VidTimerOverFlow_SetCallBack+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	90 93 9e 00 	sts	0x009E, r25
    13bc:	80 93 9d 00 	sts	0x009D, r24
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <MTIMER0_VidTimerCTC_SetCallBack>:
void MTIMER0_VidTimerCTC_SetCallBack(void (*PtrToFun)(void))
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <MTIMER0_VidTimerCTC_SetCallBack+0x6>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	90 93 9e 00 	sts	0x009E, r25
    13e0:	80 93 9d 00 	sts	0x009D, r24
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <__vector_10>:

/*CTC*/
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    1418:	e0 91 9d 00 	lds	r30, 0x009D
    141c:	f0 91 9e 00 	lds	r31, 0x009E
    1420:	09 95       	icall
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0
    1444:	1f 90       	pop	r1
    1446:	18 95       	reti

00001448 <__vector_11>:
/*OVERFLOW*/
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1448:	1f 92       	push	r1
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1
    1452:	2f 93       	push	r18
    1454:	3f 93       	push	r19
    1456:	4f 93       	push	r20
    1458:	5f 93       	push	r21
    145a:	6f 93       	push	r22
    145c:	7f 93       	push	r23
    145e:	8f 93       	push	r24
    1460:	9f 93       	push	r25
    1462:	af 93       	push	r26
    1464:	bf 93       	push	r27
    1466:	ef 93       	push	r30
    1468:	ff 93       	push	r31
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    1472:	e0 91 9d 00 	lds	r30, 0x009D
    1476:	f0 91 9e 00 	lds	r31, 0x009E
    147a:	09 95       	icall
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <MSPI_VidMasterInit>:
#include"MSPI_Config.h"

void (*MSPI_CALLBACK)(void);

void MSPI_VidMasterInit(void)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Order */
#if MSPI_DATAORDER == MSPI_LSB_DATAORDER
	SET_BIT(SPCR,5);
    14aa:	ad e2       	ldi	r26, 0x2D	; 45
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ed e2       	ldi	r30, 0x2D	; 45
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	80 62       	ori	r24, 0x20	; 32
    14b6:	8c 93       	st	X, r24
#else
#error"Data Order Option Is Not Valid.."
#endif
	/*Set Clock Polarity And Phase*/
#if MSPI_SETCLOCKPOLARIT == MSPI_RISING_POLARITY
	CLR_BIT(SPCR,3);
    14b8:	ad e2       	ldi	r26, 0x2D	; 45
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ed e2       	ldi	r30, 0x2D	; 45
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	8c 93       	st	X, r24
#else
#error"Clock Polarity Option Is Not Valid.."
#endif

#if MSPI_SETCLOCKPHASE == MSPI_SETUP_PHASE
	SET_BIT(SPCR,2);
    14c6:	ad e2       	ldi	r26, 0x2D	; 45
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ed e2       	ldi	r30, 0x2D	; 45
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	84 60       	ori	r24, 0x04	; 4
    14d2:	8c 93       	st	X, r24
#endif
	/*Set Double Speed*/
#if MSPI_SETDOUBLESPEED == MSPI_DOUBLESPEED
	SET_BIT(SPSR,0);
#elif MSPI_SETDOUBLESPEED == MSPI_NO_DOUBLESPEED
	CLR_BIT(SPSR,0);
    14d4:	ae e2       	ldi	r26, 0x2E	; 46
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ee e2       	ldi	r30, 0x2E	; 46
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8e 7f       	andi	r24, 0xFE	; 254
    14e0:	8c 93       	st	X, r24
#else
#error"Double Speed Option Is Not Valid.."
#endif
	       /*Set PreScaler */
	SPCR&=0x3F;
    14e2:	ad e2       	ldi	r26, 0x2D	; 45
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	ed e2       	ldi	r30, 0x2D	; 45
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8f 73       	andi	r24, 0x3F	; 63
    14ee:	8c 93       	st	X, r24
	SPCR|=MSPI_PRESCALER;
    14f0:	ad e2       	ldi	r26, 0x2D	; 45
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ed e2       	ldi	r30, 0x2D	; 45
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	8c 93       	st	X, r24
	      /*SET as Master*/
	SET_BIT(SPCR,4);
    14fe:	ad e2       	ldi	r26, 0x2D	; 45
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ed e2       	ldi	r30, 0x2D	; 45
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 61       	ori	r24, 0x10	; 16
    150a:	8c 93       	st	X, r24
	      /*Enable SPI*/
	SET_BIT(SPCR,6);
    150c:	ad e2       	ldi	r26, 0x2D	; 45
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ed e2       	ldi	r30, 0x2D	; 45
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 64       	ori	r24, 0x40	; 64
    1518:	8c 93       	st	X, r24
	/*Enable SPI interrupt*/
	SET_BIT(SPCR,7);
    151a:	ad e2       	ldi	r26, 0x2D	; 45
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ed e2       	ldi	r30, 0x2D	; 45
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	8c 93       	st	X, r24
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <MSPI_VidSalveInit>:
void MSPI_VidSalveInit(void)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Order */
#if MSPI_DATAORDER == MSPI_LSB_DATAORDER
	SET_BIT(SPCR,5);
    1536:	ad e2       	ldi	r26, 0x2D	; 45
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ed e2       	ldi	r30, 0x2D	; 45
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 62       	ori	r24, 0x20	; 32
    1542:	8c 93       	st	X, r24
#else
#error"Data Order Option Is Not Valid.."
#endif
	/*Set Clock Polarity And Phase*/
#if MSPI_SETCLOCKPOLARIT == MSPI_RISING_POLARITY
	CLR_BIT(SPCR,3);
    1544:	ad e2       	ldi	r26, 0x2D	; 45
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ed e2       	ldi	r30, 0x2D	; 45
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	87 7f       	andi	r24, 0xF7	; 247
    1550:	8c 93       	st	X, r24
#else
#error"Clock Polarity Option Is Not Valid.."
#endif

#if MSPI_SETCLOCKPHASE == MSPI_SETUP_PHASE
	SET_BIT(SPCR,2);
    1552:	ad e2       	ldi	r26, 0x2D	; 45
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ed e2       	ldi	r30, 0x2D	; 45
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	84 60       	ori	r24, 0x04	; 4
    155e:	8c 93       	st	X, r24
#else
#error"Clock Phase Option Is Not Valid.."
#endif

	       /*SET as Salve*/
	CLR_BIT(SPCR,4);
    1560:	ad e2       	ldi	r26, 0x2D	; 45
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ed e2       	ldi	r30, 0x2D	; 45
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8f 7e       	andi	r24, 0xEF	; 239
    156c:	8c 93       	st	X, r24
	       /*Enable SPI*/
	SET_BIT(SPCR,6);
    156e:	ad e2       	ldi	r26, 0x2D	; 45
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ed e2       	ldi	r30, 0x2D	; 45
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 64       	ori	r24, 0x40	; 64
    157a:	8c 93       	st	X, r24
	      /*Enable SPI interrupt*/
	SET_BIT(SPCR,7);
    157c:	ad e2       	ldi	r26, 0x2D	; 45
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	ed e2       	ldi	r30, 0x2D	; 45
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 68       	ori	r24, 0x80	; 128
    1588:	8c 93       	st	X, r24

}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <MSPI_uint8SendReceiveChar>:
uint8 MSPI_uint8SendReceiveChar(uint8 copy_uint8Char)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
	SPDR=copy_uint8Char;
    159c:	ef e2       	ldi	r30, 0x2F	; 47
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	80 83       	st	Z, r24
	/*check on flag*/
	while(GET_BIT(SPSR,7)==0);
    15a4:	ee e2       	ldi	r30, 0x2E	; 46
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	dc f7       	brge	.-10     	; 0x15a4 <MSPI_uint8SendReceiveChar+0x14>
	/*clear interrupt flag*/
	SET_BIT(SPSR, 7);
    15ae:	ae e2       	ldi	r26, 0x2E	; 46
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ee e2       	ldi	r30, 0x2E	; 46
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	8c 93       	st	X, r24
	return SPDR;
    15bc:	ef e2       	ldi	r30, 0x2F	; 47
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
}
    15c2:	0f 90       	pop	r0
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <MSPI_VidSendData>:
void MSPI_VidSendData(uint8 copy_uint8Data)
{
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	0f 92       	push	r0
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	89 83       	std	Y+1, r24	; 0x01

	SPDR=copy_uint8Data;
    15d6:	ef e2       	ldi	r30, 0x2F	; 47
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	80 83       	st	Z, r24
	/*check on flag*/
	while(GET_BIT(SPSR,7)==0);
    15de:	ee e2       	ldi	r30, 0x2E	; 46
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	88 23       	and	r24, r24
    15e6:	dc f7       	brge	.-10     	; 0x15de <MSPI_VidSendData+0x14>
//	/*Check on Write COllision*/
//	while(GET_BIT(SPSR,6)==0);
//	/*clear interrupt flag*/
	SET_BIT(SPSR, 7);
    15e8:	ae e2       	ldi	r26, 0x2E	; 46
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ee e2       	ldi	r30, 0x2E	; 46
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	80 68       	ori	r24, 0x80	; 128
    15f4:	8c 93       	st	X, r24

}
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <MSPI_uint8ReceiveData>:
uint8 MSPI_uint8ReceiveData(void)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	uint8 Loc_uint8Dummy=0;
    1608:	19 82       	std	Y+1, r1	; 0x01
	SPDR=Loc_uint8Dummy;
    160a:	ef e2       	ldi	r30, 0x2F	; 47
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	80 83       	st	Z, r24
//	/*check on flag until receive complete*/
	while(GET_BIT(SPSR,7)==0);
    1612:	ee e2       	ldi	r30, 0x2E	; 46
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	88 23       	and	r24, r24
    161a:	dc f7       	brge	.-10     	; 0x1612 <MSPI_uint8ReceiveData+0x14>
//	/*clear interrupt flag*/
	SET_BIT(SPSR, 7);
    161c:	ae e2       	ldi	r26, 0x2E	; 46
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ee e2       	ldi	r30, 0x2E	; 46
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 68       	ori	r24, 0x80	; 128
    1628:	8c 93       	st	X, r24
	return SPDR;
    162a:	ef e2       	ldi	r30, 0x2F	; 47
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
}
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <MSPI_VidChip_SS_Select>:
void MSPI_VidChip_SS_Select(uint8 copy_uint8mode)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <MSPI_VidChip_SS_Select+0x6>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_uint8mode)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3b 83       	std	Y+3, r19	; 0x03
    164e:	2a 83       	std	Y+2, r18	; 0x02
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	9b 81       	ldd	r25, Y+3	; 0x03
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	31 f0       	breq	.+12     	; 0x1664 <MSPI_VidChip_SS_Select+0x2c>
    1658:	2a 81       	ldd	r18, Y+2	; 0x02
    165a:	3b 81       	ldd	r19, Y+3	; 0x03
    165c:	21 30       	cpi	r18, 0x01	; 1
    165e:	31 05       	cpc	r19, r1
    1660:	39 f0       	breq	.+14     	; 0x1670 <MSPI_VidChip_SS_Select+0x38>
    1662:	0b c0       	rjmp	.+22     	; 0x167a <MSPI_VidChip_SS_Select+0x42>
	{
	case 0:
		{
			MDIO_Errorstate_SetPinValue(MDIO_PORTB,PIN4,PIN_LOW);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	64 e0       	ldi	r22, 0x04	; 4
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    166e:	05 c0       	rjmp	.+10     	; 0x167a <MSPI_VidChip_SS_Select+0x42>
			break;
		}
	case 1:
	{
		MDIO_Errorstate_SetPinValue(MDIO_PORTB,PIN4,PIN_HIGH);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	64 e0       	ldi	r22, 0x04	; 4
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	}
	default:
		break;
	}

}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <MSPI_uint8ExchangeDataBlock>:
uint8 MSPI_uint8ExchangeDataBlock(uint8 copy_uint8Data)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	0f 92       	push	r0
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	89 83       	std	Y+1, r24	; 0x01
	SPDR=copy_uint8Data;
    1692:	ef e2       	ldi	r30, 0x2F	; 47
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	80 83       	st	Z, r24
	/*Check on transmit complete*/
	while(GET_BIT(SPSR,7)==0);
    169a:	ee e2       	ldi	r30, 0x2E	; 46
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	88 23       	and	r24, r24
    16a2:	dc f7       	brge	.-10     	; 0x169a <MSPI_uint8ExchangeDataBlock+0x14>
	return SPDR;
    16a4:	ef e2       	ldi	r30, 0x2F	; 47
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
}
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <MSPI_VidSPI_SetCallBack>:
void MSPI_VidSPI_SetCallBack(void(*PtrToFun)(void))
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <MSPI_VidSPI_SetCallBack+0x6>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
	MSPI_CALLBACK=PtrToFun;
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	90 93 a0 00 	sts	0x00A0, r25
    16c8:	80 93 9f 00 	sts	0x009F, r24
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <__vector_12>:
void __vector_12(void)    __attribute__((signal));
void __vector_12(void)
{
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	2f 93       	push	r18
    16e2:	3f 93       	push	r19
    16e4:	4f 93       	push	r20
    16e6:	5f 93       	push	r21
    16e8:	6f 93       	push	r22
    16ea:	7f 93       	push	r23
    16ec:	8f 93       	push	r24
    16ee:	9f 93       	push	r25
    16f0:	af 93       	push	r26
    16f2:	bf 93       	push	r27
    16f4:	ef 93       	push	r30
    16f6:	ff 93       	push	r31
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	MSPI_CALLBACK();
    1700:	e0 91 9f 00 	lds	r30, 0x009F
    1704:	f0 91 a0 00 	lds	r31, 0x00A0
    1708:	09 95       	icall
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	ff 91       	pop	r31
    1710:	ef 91       	pop	r30
    1712:	bf 91       	pop	r27
    1714:	af 91       	pop	r26
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	7f 91       	pop	r23
    171c:	6f 91       	pop	r22
    171e:	5f 91       	pop	r21
    1720:	4f 91       	pop	r20
    1722:	3f 91       	pop	r19
    1724:	2f 91       	pop	r18
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	0f 90       	pop	r0
    172c:	1f 90       	pop	r1
    172e:	18 95       	reti

00001730 <MGIE_Enable>:

#include"../../LIB/LSTD_TYPES.h"
#include"../../LIB/LBIT_MATH.h"
#include"MGIE_Private.h"
void MGIE_Enable(void)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1738:	af e5       	ldi	r26, 0x5F	; 95
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	ef e5       	ldi	r30, 0x5F	; 95
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	8c 93       	st	X, r24
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <MGIE_Disable>:
void MGIE_Disable(void)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1754:	af e5       	ldi	r26, 0x5F	; 95
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ef e5       	ldi	r30, 0x5F	; 95
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8f 77       	andi	r24, 0x7F	; 127
    1760:	8c 93       	st	X, r24
}
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <MEXTI_VidInitEXTI0>:
#include "MEXTI_Config.h"

void (*CALLBACK)(void);

void MEXTI_VidInitEXTI0(void)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
	/*Select sense control*/
#if SET_SENCECONTROL_EXTI0==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,1);
	SET_BIT(MCUCR,0);
#elif SET_SENCECONTROL_EXTI0==MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,1);
    1770:	a5 e5       	ldi	r26, 0x55	; 85
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e5       	ldi	r30, 0x55	; 85
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	82 60       	ori	r24, 0x02	; 2
    177c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
    177e:	a5 e5       	ldi	r26, 0x55	; 85
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e5       	ldi	r30, 0x55	; 85
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	8e 7f       	andi	r24, 0xFE	; 254
    178a:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI0 is not valid"

#endif
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
    178c:	ab e5       	ldi	r26, 0x5B	; 91
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	eb e5       	ldi	r30, 0x5B	; 91
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 64       	ori	r24, 0x40	; 64
    1798:	8c 93       	st	X, r24

}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <MEXTI_VidInitEXTI1>:
void MEXTI_VidInitEXTI1(void)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
#if SET_SENCECONTROL_EXTI1==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,3);
    17a8:	a5 e5       	ldi	r26, 0x55	; 85
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e5       	ldi	r30, 0x55	; 85
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	88 60       	ori	r24, 0x08	; 8
    17b4:	8c 93       	st	X, r24
	SET_BIT(MCUCR,2);
    17b6:	a5 e5       	ldi	r26, 0x55	; 85
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e5 e5       	ldi	r30, 0x55	; 85
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	84 60       	ori	r24, 0x04	; 4
    17c2:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI1 is not valid"

#endif
	/* Enable EXTI 1*/
	SET_BIT(GICR,7);
    17c4:	ab e5       	ldi	r26, 0x5B	; 91
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	eb e5       	ldi	r30, 0x5B	; 91
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 68       	ori	r24, 0x80	; 128
    17d0:	8c 93       	st	X, r24
}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <MEXTI_VidInitEXTI2>:
void MEXTI_VidInitEXTI2(void)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
	#if SET_SENCECONTROL_EXTI2==MEXTI_RISING_EDGE
		SET_BIT(MCUCSR,6);
	#elif SET_SENCECONTROL_EXTI2==MEXTI_FALLING_EDGE
		CLR_BIT(MCUCSR,6);
    17e0:	a4 e5       	ldi	r26, 0x54	; 84
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e4 e5       	ldi	r30, 0x54	; 84
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 7b       	andi	r24, 0xBF	; 191
    17ec:	8c 93       	st	X, r24
	#else
	#error "Sense Control option of EXTI2 is not valid"

	#endif
		/* Enable EXTI 2*/
		SET_BIT(GICR,5);
    17ee:	ab e5       	ldi	r26, 0x5B	; 91
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	eb e5       	ldi	r30, 0x5B	; 91
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 62       	ori	r24, 0x20	; 32
    17fa:	8c 93       	st	X, r24

}
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <MEXTI_VidSenseControlSelect>:
void MEXTI_VidSenseControlSelect(uint8 copy_uint8EXTI_ID,uint8 copy_uint8EXTI_SenseControl)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <MEXTI_VidSenseControlSelect+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <MEXTI_VidSenseControlSelect+0x8>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_uint8EXTI_ID)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3c 83       	std	Y+4, r19	; 0x04
    181a:	2b 83       	std	Y+3, r18	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <MEXTI_VidSenseControlSelect+0x26>
    1826:	54 c0       	rjmp	.+168    	; 0x18d0 <MEXTI_VidSenseControlSelect+0xce>
    1828:	2b 81       	ldd	r18, Y+3	; 0x03
    182a:	3c 81       	ldd	r19, Y+4	; 0x04
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	09 f4       	brne	.+2      	; 0x1834 <MEXTI_VidSenseControlSelect+0x32>
    1832:	96 c0       	rjmp	.+300    	; 0x1960 <MEXTI_VidSenseControlSelect+0x15e>
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	09 f0       	breq	.+2      	; 0x183e <MEXTI_VidSenseControlSelect+0x3c>
    183c:	a6 c0       	rjmp	.+332    	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
	{
	case EXTI0:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	88 23       	and	r24, r24
    1842:	79 f4       	brne	.+30     	; 0x1862 <MEXTI_VidSenseControlSelect+0x60>
		{
			SET_BIT(MCUCR,1);
    1844:	a5 e5       	ldi	r26, 0x55	; 85
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e5 e5       	ldi	r30, 0x55	; 85
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	82 60       	ori	r24, 0x02	; 2
    1850:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1852:	a5 e5       	ldi	r26, 0x55	; 85
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e5 e5       	ldi	r30, 0x55	; 85
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	81 60       	ori	r24, 0x01	; 1
    185e:	8c 93       	st	X, r24
    1860:	94 c0       	rjmp	.+296    	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	79 f4       	brne	.+30     	; 0x1886 <MEXTI_VidSenseControlSelect+0x84>
		{
			SET_BIT(MCUCR,1);
    1868:	a5 e5       	ldi	r26, 0x55	; 85
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e5       	ldi	r30, 0x55	; 85
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	82 60       	ori	r24, 0x02	; 2
    1874:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1876:	a5 e5       	ldi	r26, 0x55	; 85
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e5 e5       	ldi	r30, 0x55	; 85
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8e 7f       	andi	r24, 0xFE	; 254
    1882:	8c 93       	st	X, r24
    1884:	82 c0       	rjmp	.+260    	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	79 f4       	brne	.+30     	; 0x18aa <MEXTI_VidSenseControlSelect+0xa8>
		{
			CLR_BIT(MCUCR,1);
    188c:	a5 e5       	ldi	r26, 0x55	; 85
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e5 e5       	ldi	r30, 0x55	; 85
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8d 7f       	andi	r24, 0xFD	; 253
    1898:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    189a:	a5 e5       	ldi	r26, 0x55	; 85
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e5       	ldi	r30, 0x55	; 85
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	81 60       	ori	r24, 0x01	; 1
    18a6:	8c 93       	st	X, r24
    18a8:	70 c0       	rjmp	.+224    	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <MEXTI_VidSenseControlSelect+0xb0>
    18b0:	6c c0       	rjmp	.+216    	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,1);
    18b2:	a5 e5       	ldi	r26, 0x55	; 85
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e5       	ldi	r30, 0x55	; 85
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8d 7f       	andi	r24, 0xFD	; 253
    18be:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    18c0:	a5 e5       	ldi	r26, 0x55	; 85
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e5 e5       	ldi	r30, 0x55	; 85
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8e 7f       	andi	r24, 0xFE	; 254
    18cc:	8c 93       	st	X, r24
    18ce:	5d c0       	rjmp	.+186    	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI1:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	88 23       	and	r24, r24
    18d4:	79 f4       	brne	.+30     	; 0x18f4 <MEXTI_VidSenseControlSelect+0xf2>
		{
			SET_BIT(MCUCR,3);
    18d6:	a5 e5       	ldi	r26, 0x55	; 85
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e5 e5       	ldi	r30, 0x55	; 85
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	88 60       	ori	r24, 0x08	; 8
    18e2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    18e4:	a5 e5       	ldi	r26, 0x55	; 85
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e5 e5       	ldi	r30, 0x55	; 85
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	84 60       	ori	r24, 0x04	; 4
    18f0:	8c 93       	st	X, r24
    18f2:	4b c0       	rjmp	.+150    	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	79 f4       	brne	.+30     	; 0x1918 <MEXTI_VidSenseControlSelect+0x116>
		{
			SET_BIT(MCUCR,3);
    18fa:	a5 e5       	ldi	r26, 0x55	; 85
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e5       	ldi	r30, 0x55	; 85
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	88 60       	ori	r24, 0x08	; 8
    1906:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    1908:	a5 e5       	ldi	r26, 0x55	; 85
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e5       	ldi	r30, 0x55	; 85
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8b 7f       	andi	r24, 0xFB	; 251
    1914:	8c 93       	st	X, r24
    1916:	39 c0       	rjmp	.+114    	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	79 f4       	brne	.+30     	; 0x193c <MEXTI_VidSenseControlSelect+0x13a>
		{
			CLR_BIT(MCUCR,3);
    191e:	a5 e5       	ldi	r26, 0x55	; 85
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e5 e5       	ldi	r30, 0x55	; 85
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	87 7f       	andi	r24, 0xF7	; 247
    192a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    192c:	a5 e5       	ldi	r26, 0x55	; 85
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e5 e5       	ldi	r30, 0x55	; 85
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	84 60       	ori	r24, 0x04	; 4
    1938:	8c 93       	st	X, r24
    193a:	27 c0       	rjmp	.+78     	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	83 30       	cpi	r24, 0x03	; 3
    1940:	21 f5       	brne	.+72     	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,3);
    1942:	a5 e5       	ldi	r26, 0x55	; 85
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e5       	ldi	r30, 0x55	; 85
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	87 7f       	andi	r24, 0xF7	; 247
    194e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    1950:	a5 e5       	ldi	r26, 0x55	; 85
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e5 e5       	ldi	r30, 0x55	; 85
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8b 7f       	andi	r24, 0xFB	; 251
    195c:	8c 93       	st	X, r24
    195e:	15 c0       	rjmp	.+42     	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI2:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	88 23       	and	r24, r24
    1964:	41 f4       	brne	.+16     	; 0x1976 <MEXTI_VidSenseControlSelect+0x174>
		{
			SET_BIT(MCUCSR,6);
    1966:	a4 e5       	ldi	r26, 0x54	; 84
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e4 e5       	ldi	r30, 0x54	; 84
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	80 64       	ori	r24, 0x40	; 64
    1972:	8c 93       	st	X, r24
    1974:	0a c0       	rjmp	.+20     	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	39 f4       	brne	.+14     	; 0x198a <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCSR,6);		}
    197c:	a4 e5       	ldi	r26, 0x54	; 84
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e4 e5       	ldi	r30, 0x54	; 84
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8f 7b       	andi	r24, 0xBF	; 191
    1988:	8c 93       	st	X, r24
			/*do nothing*/
		}
		break;
	}

}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <MEXTI0_VidSetCallBack>:
void MEXTI0_VidSetCallBack(void (*PtrToFun)(void))
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <MEXTI0_VidSetCallBack+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	90 93 98 00 	sts	0x0098, r25
    19ae:	80 93 97 00 	sts	0x0097, r24
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <MEXTI1_VidSetCallBack>:
void MEXTI1_VidSetCallBack(void (*PtrToFun)(void))
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <MEXTI1_VidSetCallBack+0x6>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	9a 81       	ldd	r25, Y+2	; 0x02
    19ce:	90 93 98 00 	sts	0x0098, r25
    19d2:	80 93 97 00 	sts	0x0097, r24
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <MEXTI2_VidSetCallBack>:
void MEXTI2_VidSetCallBack(void (*PtrToFun)(void))
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <MEXTI2_VidSetCallBack+0x6>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	90 93 98 00 	sts	0x0098, r25
    19f6:	80 93 97 00 	sts	0x0097, r24
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <__vector_1>:
/*EXTI0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    1a04:	1f 92       	push	r1
    1a06:	0f 92       	push	r0
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	0f 92       	push	r0
    1a0c:	11 24       	eor	r1, r1
    1a0e:	2f 93       	push	r18
    1a10:	3f 93       	push	r19
    1a12:	4f 93       	push	r20
    1a14:	5f 93       	push	r21
    1a16:	6f 93       	push	r22
    1a18:	7f 93       	push	r23
    1a1a:	8f 93       	push	r24
    1a1c:	9f 93       	push	r25
    1a1e:	af 93       	push	r26
    1a20:	bf 93       	push	r27
    1a22:	ef 93       	push	r30
    1a24:	ff 93       	push	r31
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1a2e:	e0 91 97 00 	lds	r30, 0x0097
    1a32:	f0 91 98 00 	lds	r31, 0x0098
    1a36:	09 95       	icall
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	bf 91       	pop	r27
    1a42:	af 91       	pop	r26
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	7f 91       	pop	r23
    1a4a:	6f 91       	pop	r22
    1a4c:	5f 91       	pop	r21
    1a4e:	4f 91       	pop	r20
    1a50:	3f 91       	pop	r19
    1a52:	2f 91       	pop	r18
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <__vector_2>:
/*EXTI 1 */
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	5f 93       	push	r21
    1a70:	6f 93       	push	r22
    1a72:	7f 93       	push	r23
    1a74:	8f 93       	push	r24
    1a76:	9f 93       	push	r25
    1a78:	af 93       	push	r26
    1a7a:	bf 93       	push	r27
    1a7c:	ef 93       	push	r30
    1a7e:	ff 93       	push	r31
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1a88:	e0 91 97 00 	lds	r30, 0x0097
    1a8c:	f0 91 98 00 	lds	r31, 0x0098
    1a90:	09 95       	icall
}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	ff 91       	pop	r31
    1a98:	ef 91       	pop	r30
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <__vector_3>:
/*EXTI2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1ae2:	e0 91 97 00 	lds	r30, 0x0097
    1ae6:	f0 91 98 00 	lds	r31, 0x0098
    1aea:	09 95       	icall
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	bf 91       	pop	r27
    1af6:	af 91       	pop	r26
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	7f 91       	pop	r23
    1afe:	6f 91       	pop	r22
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	0f 90       	pop	r0
    1b0e:	1f 90       	pop	r1
    1b10:	18 95       	reti

00001b12 <MDIO_Errorstate_SetPinDirection>:

/********* Set pin direction************/

ErrorState MDIO_Errorstate_SetPinDirection (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinDirection)

{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	28 97       	sbiw	r28, 0x08	; 8
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	8a 83       	std	Y+2, r24	; 0x02
    1b28:	6b 83       	std	Y+3, r22	; 0x03
    1b2a:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01

	if (copy_uint8PinNumber<8)
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 30       	cpi	r24, 0x08	; 8
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <MDIO_Errorstate_SetPinDirection+0x26>
    1b36:	f1 c0       	rjmp	.+482    	; 0x1d1a <MDIO_Errorstate_SetPinDirection+0x208>
	{
		if(copy_uint8PinDirection==PIN_OUTPUT)
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <MDIO_Errorstate_SetPinDirection+0x2e>
    1b3e:	71 c0       	rjmp	.+226    	; 0x1c22 <MDIO_Errorstate_SetPinDirection+0x110>
		{
			switch(copy_uint8PortID)
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	38 87       	std	Y+8, r19	; 0x08
    1b48:	2f 83       	std	Y+7, r18	; 0x07
    1b4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4c:	98 85       	ldd	r25, Y+8	; 0x08
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	91 05       	cpc	r25, r1
    1b52:	49 f1       	breq	.+82     	; 0x1ba6 <MDIO_Errorstate_SetPinDirection+0x94>
    1b54:	2f 81       	ldd	r18, Y+7	; 0x07
    1b56:	38 85       	ldd	r19, Y+8	; 0x08
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <MDIO_Errorstate_SetPinDirection+0x56>
    1b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b60:	98 85       	ldd	r25, Y+8	; 0x08
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	61 f0       	breq	.+24     	; 0x1b7e <MDIO_Errorstate_SetPinDirection+0x6c>
    1b66:	5b c0       	rjmp	.+182    	; 0x1c1e <MDIO_Errorstate_SetPinDirection+0x10c>
    1b68:	2f 81       	ldd	r18, Y+7	; 0x07
    1b6a:	38 85       	ldd	r19, Y+8	; 0x08
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	71 f1       	breq	.+92     	; 0x1bce <MDIO_Errorstate_SetPinDirection+0xbc>
    1b72:	8f 81       	ldd	r24, Y+7	; 0x07
    1b74:	98 85       	ldd	r25, Y+8	; 0x08
    1b76:	83 30       	cpi	r24, 0x03	; 3
    1b78:	91 05       	cpc	r25, r1
    1b7a:	e9 f1       	breq	.+122    	; 0x1bf6 <MDIO_Errorstate_SetPinDirection+0xe4>
    1b7c:	50 c0       	rjmp	.+160    	; 0x1c1e <MDIO_Errorstate_SetPinDirection+0x10c>
			{
			case MDIO_PORTA:
				SET_BIT(DDRA,copy_uint8PinNumber);
    1b7e:	aa e3       	ldi	r26, 0x3A	; 58
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ea e3       	ldi	r30, 0x3A	; 58
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <MDIO_Errorstate_SetPinDirection+0x8a>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <MDIO_Errorstate_SetPinDirection+0x86>
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	bb c0       	rjmp	.+374    	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				SET_BIT(DDRB,copy_uint8PinNumber);
    1ba6:	a7 e3       	ldi	r26, 0x37	; 55
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e7 e3       	ldi	r30, 0x37	; 55
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <MDIO_Errorstate_SetPinDirection+0xb2>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <MDIO_Errorstate_SetPinDirection+0xae>
    1bc8:	84 2b       	or	r24, r20
    1bca:	8c 93       	st	X, r24
    1bcc:	a7 c0       	rjmp	.+334    	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				SET_BIT(DDRC,copy_uint8PinNumber);
    1bce:	a4 e3       	ldi	r26, 0x34	; 52
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e4 e3       	ldi	r30, 0x34	; 52
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	48 2f       	mov	r20, r24
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	02 2e       	mov	r0, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <MDIO_Errorstate_SetPinDirection+0xda>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	0a 94       	dec	r0
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <MDIO_Errorstate_SetPinDirection+0xd6>
    1bf0:	84 2b       	or	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	93 c0       	rjmp	.+294    	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				SET_BIT(DDRD,copy_uint8PinNumber);
    1bf6:	a1 e3       	ldi	r26, 0x31	; 49
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e1 e3       	ldi	r30, 0x31	; 49
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <MDIO_Errorstate_SetPinDirection+0x102>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <MDIO_Errorstate_SetPinDirection+0xfe>
    1c18:	84 2b       	or	r24, r20
    1c1a:	8c 93       	st	X, r24
    1c1c:	7f c0       	rjmp	.+254    	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	7d c0       	rjmp	.+250    	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			}
		}

		else if(copy_uint8PinDirection==PIN_INPUT)
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	88 23       	and	r24, r24
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <MDIO_Errorstate_SetPinDirection+0x118>
    1c28:	76 c0       	rjmp	.+236    	; 0x1d16 <MDIO_Errorstate_SetPinDirection+0x204>
		{
			switch(copy_uint8PortID)
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	3e 83       	std	Y+6, r19	; 0x06
    1c32:	2d 83       	std	Y+5, r18	; 0x05
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	59 f1       	breq	.+86     	; 0x1c94 <MDIO_Errorstate_SetPinDirection+0x182>
    1c3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c40:	3e 81       	ldd	r19, Y+6	; 0x06
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	2c f4       	brge	.+10     	; 0x1c52 <MDIO_Errorstate_SetPinDirection+0x140>
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f0       	breq	.+26     	; 0x1c6a <MDIO_Errorstate_SetPinDirection+0x158>
    1c50:	60 c0       	rjmp	.+192    	; 0x1d12 <MDIO_Errorstate_SetPinDirection+0x200>
    1c52:	2d 81       	ldd	r18, Y+5	; 0x05
    1c54:	3e 81       	ldd	r19, Y+6	; 0x06
    1c56:	22 30       	cpi	r18, 0x02	; 2
    1c58:	31 05       	cpc	r19, r1
    1c5a:	89 f1       	breq	.+98     	; 0x1cbe <MDIO_Errorstate_SetPinDirection+0x1ac>
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	83 30       	cpi	r24, 0x03	; 3
    1c62:	91 05       	cpc	r25, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <MDIO_Errorstate_SetPinDirection+0x156>
    1c66:	40 c0       	rjmp	.+128    	; 0x1ce8 <MDIO_Errorstate_SetPinDirection+0x1d6>
    1c68:	54 c0       	rjmp	.+168    	; 0x1d12 <MDIO_Errorstate_SetPinDirection+0x200>
			{
			case MDIO_PORTA:
				CLR_BIT(DDRA,copy_uint8PinNumber);
    1c6a:	aa e3       	ldi	r26, 0x3A	; 58
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	ea e3       	ldi	r30, 0x3A	; 58
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <MDIO_Errorstate_SetPinDirection+0x176>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <MDIO_Errorstate_SetPinDirection+0x172>
    1c8c:	80 95       	com	r24
    1c8e:	84 23       	and	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	44 c0       	rjmp	.+136    	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				CLR_BIT(DDRB,copy_uint8PinNumber);
    1c94:	a7 e3       	ldi	r26, 0x37	; 55
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e7 e3       	ldi	r30, 0x37	; 55
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <MDIO_Errorstate_SetPinDirection+0x1a0>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <MDIO_Errorstate_SetPinDirection+0x19c>
    1cb6:	80 95       	com	r24
    1cb8:	84 23       	and	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	2f c0       	rjmp	.+94     	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				CLR_BIT(DDRC,copy_uint8PinNumber);
    1cbe:	a4 e3       	ldi	r26, 0x34	; 52
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e4 e3       	ldi	r30, 0x34	; 52
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <MDIO_Errorstate_SetPinDirection+0x1ca>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <MDIO_Errorstate_SetPinDirection+0x1c6>
    1ce0:	80 95       	com	r24
    1ce2:	84 23       	and	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	1a c0       	rjmp	.+52     	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				CLR_BIT(DDRD,copy_uint8PinNumber);
    1ce8:	a1 e3       	ldi	r26, 0x31	; 49
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e1 e3       	ldi	r30, 0x31	; 49
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	48 2f       	mov	r20, r24
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <MDIO_Errorstate_SetPinDirection+0x1f4>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <MDIO_Errorstate_SetPinDirection+0x1f0>
    1d0a:	80 95       	com	r24
    1d0c:	84 23       	and	r24, r20
    1d0e:	8c 93       	st	X, r24
    1d10:	05 c0       	rjmp	.+10     	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    1d12:	19 82       	std	Y+1, r1	; 0x01
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    1d16:	19 82       	std	Y+1, r1	; 0x01
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <MDIO_Errorstate_SetPinDirection+0x20a>
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    1d1a:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state ;
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1e:	28 96       	adiw	r28, 0x08	; 8
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <MDIO_Errorstate_SetPinValue>:

/********* Set pin value************/
ErrorState MDIO_Errorstate_SetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinValue)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	28 97       	sbiw	r28, 0x08	; 8
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	6b 83       	std	Y+3, r22	; 0x03
    1d48:	4c 83       	std	Y+4, r20	; 0x04
	{
		ErrorState loc_Errorstate_Error_state = OK;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01

		if (copy_uint8PinNumber<8)
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	88 30       	cpi	r24, 0x08	; 8
    1d52:	08 f0       	brcs	.+2      	; 0x1d56 <MDIO_Errorstate_SetPinValue+0x26>
    1d54:	f1 c0       	rjmp	.+482    	; 0x1f38 <MDIO_Errorstate_SetPinValue+0x208>
		{
			if(copy_uint8PinValue==PIN_HIGH)
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <MDIO_Errorstate_SetPinValue+0x2e>
    1d5c:	71 c0       	rjmp	.+226    	; 0x1e40 <MDIO_Errorstate_SetPinValue+0x110>
			{
				switch(copy_uint8PortID)
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	38 87       	std	Y+8, r19	; 0x08
    1d66:	2f 83       	std	Y+7, r18	; 0x07
    1d68:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6a:	98 85       	ldd	r25, Y+8	; 0x08
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	91 05       	cpc	r25, r1
    1d70:	49 f1       	breq	.+82     	; 0x1dc4 <MDIO_Errorstate_SetPinValue+0x94>
    1d72:	2f 81       	ldd	r18, Y+7	; 0x07
    1d74:	38 85       	ldd	r19, Y+8	; 0x08
    1d76:	22 30       	cpi	r18, 0x02	; 2
    1d78:	31 05       	cpc	r19, r1
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <MDIO_Errorstate_SetPinValue+0x56>
    1d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d7e:	98 85       	ldd	r25, Y+8	; 0x08
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <MDIO_Errorstate_SetPinValue+0x6c>
    1d84:	5b c0       	rjmp	.+182    	; 0x1e3c <MDIO_Errorstate_SetPinValue+0x10c>
    1d86:	2f 81       	ldd	r18, Y+7	; 0x07
    1d88:	38 85       	ldd	r19, Y+8	; 0x08
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	71 f1       	breq	.+92     	; 0x1dec <MDIO_Errorstate_SetPinValue+0xbc>
    1d90:	8f 81       	ldd	r24, Y+7	; 0x07
    1d92:	98 85       	ldd	r25, Y+8	; 0x08
    1d94:	83 30       	cpi	r24, 0x03	; 3
    1d96:	91 05       	cpc	r25, r1
    1d98:	e9 f1       	breq	.+122    	; 0x1e14 <MDIO_Errorstate_SetPinValue+0xe4>
    1d9a:	50 c0       	rjmp	.+160    	; 0x1e3c <MDIO_Errorstate_SetPinValue+0x10c>
				{
				case MDIO_PORTA:
					SET_BIT(PORTA,copy_uint8PinNumber);
    1d9c:	ab e3       	ldi	r26, 0x3B	; 59
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e3       	ldi	r30, 0x3B	; 59
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <MDIO_Errorstate_SetPinValue+0x8a>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <MDIO_Errorstate_SetPinValue+0x86>
    1dbe:	84 2b       	or	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	bb c0       	rjmp	.+374    	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					SET_BIT(PORTB,copy_uint8PinNumber);
    1dc4:	a8 e3       	ldi	r26, 0x38	; 56
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e8 e3       	ldi	r30, 0x38	; 56
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <MDIO_Errorstate_SetPinValue+0xb2>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <MDIO_Errorstate_SetPinValue+0xae>
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	a7 c0       	rjmp	.+334    	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					SET_BIT(PORTC,copy_uint8PinNumber);
    1dec:	a5 e3       	ldi	r26, 0x35	; 53
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <MDIO_Errorstate_SetPinValue+0xda>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <MDIO_Errorstate_SetPinValue+0xd6>
    1e0e:	84 2b       	or	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	93 c0       	rjmp	.+294    	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					SET_BIT(PORTD,copy_uint8PinNumber);
    1e14:	a2 e3       	ldi	r26, 0x32	; 50
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e2 e3       	ldi	r30, 0x32	; 50
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 2e       	mov	r0, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <MDIO_Errorstate_SetPinValue+0x102>
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	0a 94       	dec	r0
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <MDIO_Errorstate_SetPinValue+0xfe>
    1e36:	84 2b       	or	r24, r20
    1e38:	8c 93       	st	X, r24
    1e3a:	7f c0       	rjmp	.+254    	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    1e3c:	19 82       	std	Y+1, r1	; 0x01
    1e3e:	7d c0       	rjmp	.+250    	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>

					break;
				}
			}

			else if(copy_uint8PinValue==PIN_LOW)
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	88 23       	and	r24, r24
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <MDIO_Errorstate_SetPinValue+0x118>
    1e46:	76 c0       	rjmp	.+236    	; 0x1f34 <MDIO_Errorstate_SetPinValue+0x204>
			{
				switch(copy_uint8PortID)
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	3e 83       	std	Y+6, r19	; 0x06
    1e50:	2d 83       	std	Y+5, r18	; 0x05
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	91 05       	cpc	r25, r1
    1e5a:	59 f1       	breq	.+86     	; 0x1eb2 <MDIO_Errorstate_SetPinValue+0x182>
    1e5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e60:	22 30       	cpi	r18, 0x02	; 2
    1e62:	31 05       	cpc	r19, r1
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <MDIO_Errorstate_SetPinValue+0x140>
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f0       	breq	.+26     	; 0x1e88 <MDIO_Errorstate_SetPinValue+0x158>
    1e6e:	60 c0       	rjmp	.+192    	; 0x1f30 <MDIO_Errorstate_SetPinValue+0x200>
    1e70:	2d 81       	ldd	r18, Y+5	; 0x05
    1e72:	3e 81       	ldd	r19, Y+6	; 0x06
    1e74:	22 30       	cpi	r18, 0x02	; 2
    1e76:	31 05       	cpc	r19, r1
    1e78:	89 f1       	breq	.+98     	; 0x1edc <MDIO_Errorstate_SetPinValue+0x1ac>
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	83 30       	cpi	r24, 0x03	; 3
    1e80:	91 05       	cpc	r25, r1
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <MDIO_Errorstate_SetPinValue+0x156>
    1e84:	40 c0       	rjmp	.+128    	; 0x1f06 <MDIO_Errorstate_SetPinValue+0x1d6>
    1e86:	54 c0       	rjmp	.+168    	; 0x1f30 <MDIO_Errorstate_SetPinValue+0x200>
				{
				case MDIO_PORTA:
					CLR_BIT(PORTA,copy_uint8PinNumber);
    1e88:	ab e3       	ldi	r26, 0x3B	; 59
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	eb e3       	ldi	r30, 0x3B	; 59
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	48 2f       	mov	r20, r24
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <MDIO_Errorstate_SetPinValue+0x176>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <MDIO_Errorstate_SetPinValue+0x172>
    1eaa:	80 95       	com	r24
    1eac:	84 23       	and	r24, r20
    1eae:	8c 93       	st	X, r24
    1eb0:	44 c0       	rjmp	.+136    	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					CLR_BIT(PORTB,copy_uint8PinNumber);
    1eb2:	a8 e3       	ldi	r26, 0x38	; 56
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e8 e3       	ldi	r30, 0x38	; 56
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <MDIO_Errorstate_SetPinValue+0x1a0>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <MDIO_Errorstate_SetPinValue+0x19c>
    1ed4:	80 95       	com	r24
    1ed6:	84 23       	and	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	2f c0       	rjmp	.+94     	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					CLR_BIT(PORTC,copy_uint8PinNumber);
    1edc:	a5 e3       	ldi	r26, 0x35	; 53
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e5 e3       	ldi	r30, 0x35	; 53
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <MDIO_Errorstate_SetPinValue+0x1ca>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <MDIO_Errorstate_SetPinValue+0x1c6>
    1efe:	80 95       	com	r24
    1f00:	84 23       	and	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	1a c0       	rjmp	.+52     	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					CLR_BIT(PORTD,copy_uint8PinNumber);
    1f06:	a2 e3       	ldi	r26, 0x32	; 50
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e2 e3       	ldi	r30, 0x32	; 50
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <MDIO_Errorstate_SetPinValue+0x1f4>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <MDIO_Errorstate_SetPinValue+0x1f0>
    1f28:	80 95       	com	r24
    1f2a:	84 23       	and	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	05 c0       	rjmp	.+10     	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    1f30:	19 82       	std	Y+1, r1	; 0x01
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
				}
			}
			else
			{
				loc_Errorstate_Error_state=NOK;
    1f34:	19 82       	std	Y+1, r1	; 0x01
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <MDIO_Errorstate_SetPinValue+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    1f38:	19 82       	std	Y+1, r1	; 0x01
		}
		return loc_Errorstate_Error_state ;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1f3c:	28 96       	adiw	r28, 0x08	; 8
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <MDIO_Errorstate_GetPinValue>:


/********* get pin value************/
ErrorState MDIO_Errorstate_GetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 *puint8PinValue)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	27 97       	sbiw	r28, 0x07	; 7
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	6b 83       	std	Y+3, r22	; 0x03
    1f66:	5d 83       	std	Y+5, r21	; 0x05
    1f68:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_uint8PinNumber<8)
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	88 30       	cpi	r24, 0x08	; 8
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <MDIO_Errorstate_GetPinValue+0x28>
    1f74:	73 c0       	rjmp	.+230    	; 0x205c <MDIO_Errorstate_GetPinValue+0x10e>
	{
		switch(copy_uint8PortID)
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	3f 83       	std	Y+7, r19	; 0x07
    1f7e:	2e 83       	std	Y+6, r18	; 0x06
    1f80:	4e 81       	ldd	r20, Y+6	; 0x06
    1f82:	5f 81       	ldd	r21, Y+7	; 0x07
    1f84:	41 30       	cpi	r20, 0x01	; 1
    1f86:	51 05       	cpc	r21, r1
    1f88:	59 f1       	breq	.+86     	; 0x1fe0 <MDIO_Errorstate_GetPinValue+0x92>
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	91 05       	cpc	r25, r1
    1f92:	34 f4       	brge	.+12     	; 0x1fa0 <MDIO_Errorstate_GetPinValue+0x52>
    1f94:	2e 81       	ldd	r18, Y+6	; 0x06
    1f96:	3f 81       	ldd	r19, Y+7	; 0x07
    1f98:	21 15       	cp	r18, r1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	69 f0       	breq	.+26     	; 0x1fb8 <MDIO_Errorstate_GetPinValue+0x6a>
    1f9e:	5c c0       	rjmp	.+184    	; 0x2058 <MDIO_Errorstate_GetPinValue+0x10a>
    1fa0:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa2:	5f 81       	ldd	r21, Y+7	; 0x07
    1fa4:	42 30       	cpi	r20, 0x02	; 2
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	79 f1       	breq	.+94     	; 0x2008 <MDIO_Errorstate_GetPinValue+0xba>
    1faa:	8e 81       	ldd	r24, Y+6	; 0x06
    1fac:	9f 81       	ldd	r25, Y+7	; 0x07
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <MDIO_Errorstate_GetPinValue+0x68>
    1fb4:	3d c0       	rjmp	.+122    	; 0x2030 <MDIO_Errorstate_GetPinValue+0xe2>
    1fb6:	50 c0       	rjmp	.+160    	; 0x2058 <MDIO_Errorstate_GetPinValue+0x10a>
		{
		case MDIO_PORTA:
			*puint8PinValue= GET_BIT(PINA,copy_uint8PinNumber);
    1fb8:	e9 e3       	ldi	r30, 0x39	; 57
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a9 01       	movw	r20, r18
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <MDIO_Errorstate_GetPinValue+0x82>
    1fcc:	55 95       	asr	r21
    1fce:	47 95       	ror	r20
    1fd0:	8a 95       	dec	r24
    1fd2:	e2 f7       	brpl	.-8      	; 0x1fcc <MDIO_Errorstate_GetPinValue+0x7e>
    1fd4:	ca 01       	movw	r24, r20
    1fd6:	81 70       	andi	r24, 0x01	; 1
    1fd8:	ec 81       	ldd	r30, Y+4	; 0x04
    1fda:	fd 81       	ldd	r31, Y+5	; 0x05
    1fdc:	80 83       	st	Z, r24
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTB:
			*puint8PinValue=GET_BIT(PINB,copy_uint8PinNumber);
    1fe0:	e6 e3       	ldi	r30, 0x36	; 54
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <MDIO_Errorstate_GetPinValue+0xaa>
    1ff4:	55 95       	asr	r21
    1ff6:	47 95       	ror	r20
    1ff8:	8a 95       	dec	r24
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <MDIO_Errorstate_GetPinValue+0xa6>
    1ffc:	ca 01       	movw	r24, r20
    1ffe:	81 70       	andi	r24, 0x01	; 1
    2000:	ec 81       	ldd	r30, Y+4	; 0x04
    2002:	fd 81       	ldd	r31, Y+5	; 0x05
    2004:	80 83       	st	Z, r24
    2006:	2b c0       	rjmp	.+86     	; 0x205e <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTC:
			*puint8PinValue=GET_BIT(PINC,copy_uint8PinNumber);
    2008:	e3 e3       	ldi	r30, 0x33	; 51
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a9 01       	movw	r20, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <MDIO_Errorstate_GetPinValue+0xd2>
    201c:	55 95       	asr	r21
    201e:	47 95       	ror	r20
    2020:	8a 95       	dec	r24
    2022:	e2 f7       	brpl	.-8      	; 0x201c <MDIO_Errorstate_GetPinValue+0xce>
    2024:	ca 01       	movw	r24, r20
    2026:	81 70       	andi	r24, 0x01	; 1
    2028:	ec 81       	ldd	r30, Y+4	; 0x04
    202a:	fd 81       	ldd	r31, Y+5	; 0x05
    202c:	80 83       	st	Z, r24
    202e:	17 c0       	rjmp	.+46     	; 0x205e <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTD:
			*puint8PinValue=GET_BIT(PIND,copy_uint8PinNumber);
    2030:	e0 e3       	ldi	r30, 0x30	; 48
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a9 01       	movw	r20, r18
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <MDIO_Errorstate_GetPinValue+0xfa>
    2044:	55 95       	asr	r21
    2046:	47 95       	ror	r20
    2048:	8a 95       	dec	r24
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <MDIO_Errorstate_GetPinValue+0xf6>
    204c:	ca 01       	movw	r24, r20
    204e:	81 70       	andi	r24, 0x01	; 1
    2050:	ec 81       	ldd	r30, Y+4	; 0x04
    2052:	fd 81       	ldd	r31, Y+5	; 0x05
    2054:	80 83       	st	Z, r24
    2056:	03 c0       	rjmp	.+6      	; 0x205e <MDIO_Errorstate_GetPinValue+0x110>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    2058:	19 82       	std	Y+1, r1	; 0x01
    205a:	01 c0       	rjmp	.+2      	; 0x205e <MDIO_Errorstate_GetPinValue+0x110>

		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    205c:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    205e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2060:	27 96       	adiw	r28, 0x07	; 7
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <MDIO_Errorstate_SetPortDirection>:

/********* set port direction & value************/
ErrorState MDIO_Errorstate_SetPortDirection (uint8 copy_uint8PortID , uint8 copy_uint8PortDirection)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <MDIO_Errorstate_SetPortDirection+0x6>
    2078:	00 d0       	rcall	.+0      	; 0x207a <MDIO_Errorstate_SetPortDirection+0x8>
    207a:	0f 92       	push	r0
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	8a 83       	std	Y+2, r24	; 0x02
    2082:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	89 83       	std	Y+1, r24	; 0x01

	if((copy_uint8PortDirection== PORT_OUTPUT) ||(copy_uint8PortDirection==PORT_INPUT))
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	8f 3f       	cpi	r24, 0xFF	; 255
    208c:	19 f0       	breq	.+6      	; 0x2094 <MDIO_Errorstate_SetPortDirection+0x22>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	88 23       	and	r24, r24
    2092:	a9 f5       	brne	.+106    	; 0x20fe <MDIO_Errorstate_SetPortDirection+0x8c>
	{
		switch(copy_uint8PortID)
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	3d 83       	std	Y+5, r19	; 0x05
    209c:	2c 83       	std	Y+4, r18	; 0x04
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	91 05       	cpc	r25, r1
    20a6:	d1 f0       	breq	.+52     	; 0x20dc <MDIO_Errorstate_SetPortDirection+0x6a>
    20a8:	2c 81       	ldd	r18, Y+4	; 0x04
    20aa:	3d 81       	ldd	r19, Y+5	; 0x05
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	2c f4       	brge	.+10     	; 0x20bc <MDIO_Errorstate_SetPortDirection+0x4a>
    20b2:	8c 81       	ldd	r24, Y+4	; 0x04
    20b4:	9d 81       	ldd	r25, Y+5	; 0x05
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	61 f0       	breq	.+24     	; 0x20d2 <MDIO_Errorstate_SetPortDirection+0x60>
    20ba:	1f c0       	rjmp	.+62     	; 0x20fa <MDIO_Errorstate_SetPortDirection+0x88>
    20bc:	2c 81       	ldd	r18, Y+4	; 0x04
    20be:	3d 81       	ldd	r19, Y+5	; 0x05
    20c0:	22 30       	cpi	r18, 0x02	; 2
    20c2:	31 05       	cpc	r19, r1
    20c4:	81 f0       	breq	.+32     	; 0x20e6 <MDIO_Errorstate_SetPortDirection+0x74>
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	91 05       	cpc	r25, r1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <MDIO_Errorstate_SetPortDirection+0x7e>
    20d0:	14 c0       	rjmp	.+40     	; 0x20fa <MDIO_Errorstate_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortDirection;
    20d2:	ea e3       	ldi	r30, 0x3A	; 58
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	80 83       	st	Z, r24
    20da:	12 c0       	rjmp	.+36     	; 0x2100 <MDIO_Errorstate_SetPortDirection+0x8e>

			break;
		case MDIO_PORTB:
			DDRB=copy_uint8PortDirection;
    20dc:	e7 e3       	ldi	r30, 0x37	; 55
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	80 83       	st	Z, r24
    20e4:	0d c0       	rjmp	.+26     	; 0x2100 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=copy_uint8PortDirection;
    20e6:	e4 e3       	ldi	r30, 0x34	; 52
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	80 83       	st	Z, r24
    20ee:	08 c0       	rjmp	.+16     	; 0x2100 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=copy_uint8PortDirection;
    20f0:	e1 e3       	ldi	r30, 0x31	; 49
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	80 83       	st	Z, r24
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    20fa:	19 82       	std	Y+1, r1	; 0x01
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    20fe:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    2100:	89 81       	ldd	r24, Y+1	; 0x01
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <MDIO_Errorstate_SetPortValue>:

/*************** set port value ***********/
ErrorState MDIO_Errorstate_SetPortValue (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <MDIO_Errorstate_SetPortValue+0x6>
    2118:	00 d0       	rcall	.+0      	; 0x211a <MDIO_Errorstate_SetPortValue+0x8>
    211a:	0f 92       	push	r0
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	89 83       	std	Y+1, r24	; 0x01

	if(copy_uint8PortValue<=PORT_HIGH)
	{
		switch(copy_uint8PortID)
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	3d 83       	std	Y+5, r19	; 0x05
    2130:	2c 83       	std	Y+4, r18	; 0x04
    2132:	8c 81       	ldd	r24, Y+4	; 0x04
    2134:	9d 81       	ldd	r25, Y+5	; 0x05
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	91 05       	cpc	r25, r1
    213a:	d1 f0       	breq	.+52     	; 0x2170 <MDIO_Errorstate_SetPortValue+0x5e>
    213c:	2c 81       	ldd	r18, Y+4	; 0x04
    213e:	3d 81       	ldd	r19, Y+5	; 0x05
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	31 05       	cpc	r19, r1
    2144:	2c f4       	brge	.+10     	; 0x2150 <MDIO_Errorstate_SetPortValue+0x3e>
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	9d 81       	ldd	r25, Y+5	; 0x05
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	61 f0       	breq	.+24     	; 0x2166 <MDIO_Errorstate_SetPortValue+0x54>
    214e:	1f c0       	rjmp	.+62     	; 0x218e <MDIO_Errorstate_SetPortValue+0x7c>
    2150:	2c 81       	ldd	r18, Y+4	; 0x04
    2152:	3d 81       	ldd	r19, Y+5	; 0x05
    2154:	22 30       	cpi	r18, 0x02	; 2
    2156:	31 05       	cpc	r19, r1
    2158:	81 f0       	breq	.+32     	; 0x217a <MDIO_Errorstate_SetPortValue+0x68>
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	9d 81       	ldd	r25, Y+5	; 0x05
    215e:	83 30       	cpi	r24, 0x03	; 3
    2160:	91 05       	cpc	r25, r1
    2162:	81 f0       	breq	.+32     	; 0x2184 <MDIO_Errorstate_SetPortValue+0x72>
    2164:	14 c0       	rjmp	.+40     	; 0x218e <MDIO_Errorstate_SetPortValue+0x7c>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortValue;
    2166:	ea e3       	ldi	r30, 0x3A	; 58
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	80 83       	st	Z, r24
    216e:	10 c0       	rjmp	.+32     	; 0x2190 <MDIO_Errorstate_SetPortValue+0x7e>

			break;
		case MDIO_PORTB:
			PORTB=copy_uint8PortValue;
    2170:	e8 e3       	ldi	r30, 0x38	; 56
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	80 83       	st	Z, r24
    2178:	0b c0       	rjmp	.+22     	; 0x2190 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTC:
			PORTC=copy_uint8PortValue;
    217a:	e5 e3       	ldi	r30, 0x35	; 53
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	80 83       	st	Z, r24
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTD:
			PORTD=copy_uint8PortValue;
    2184:	e2 e3       	ldi	r30, 0x32	; 50
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	80 83       	st	Z, r24
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    218e:	19 82       	std	Y+1, r1	; 0x01
	}
		else
		{
			loc_Errorstate_Error_state=NOK;
		}
		return loc_Errorstate_Error_state;
    2190:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <MDIO_Errorstate_Set4MostBits>:

ErrorState MDIO_Errorstate_Set4MostBits (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <MDIO_Errorstate_Set4MostBits+0x6>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <MDIO_Errorstate_Set4MostBits+0x8>
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	8a 83       	std	Y+2, r24	; 0x02
    21b2:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Loc_Errorstate_Error_state = OK;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_uint8PortID)
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	3d 83       	std	Y+5, r19	; 0x05
    21c0:	2c 83       	std	Y+4, r18	; 0x04
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	91 05       	cpc	r25, r1
    21ca:	29 f1       	breq	.+74     	; 0x2216 <MDIO_Errorstate_Set4MostBits+0x74>
    21cc:	2c 81       	ldd	r18, Y+4	; 0x04
    21ce:	3d 81       	ldd	r19, Y+5	; 0x05
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <MDIO_Errorstate_Set4MostBits+0x3e>
    21d6:	8c 81       	ldd	r24, Y+4	; 0x04
    21d8:	9d 81       	ldd	r25, Y+5	; 0x05
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	61 f0       	breq	.+24     	; 0x21f6 <MDIO_Errorstate_Set4MostBits+0x54>
    21de:	4b c0       	rjmp	.+150    	; 0x2276 <MDIO_Errorstate_Set4MostBits+0xd4>
    21e0:	2c 81       	ldd	r18, Y+4	; 0x04
    21e2:	3d 81       	ldd	r19, Y+5	; 0x05
    21e4:	22 30       	cpi	r18, 0x02	; 2
    21e6:	31 05       	cpc	r19, r1
    21e8:	31 f1       	breq	.+76     	; 0x2236 <MDIO_Errorstate_Set4MostBits+0x94>
    21ea:	8c 81       	ldd	r24, Y+4	; 0x04
    21ec:	9d 81       	ldd	r25, Y+5	; 0x05
    21ee:	83 30       	cpi	r24, 0x03	; 3
    21f0:	91 05       	cpc	r25, r1
    21f2:	89 f1       	breq	.+98     	; 0x2256 <MDIO_Errorstate_Set4MostBits+0xb4>
    21f4:	40 c0       	rjmp	.+128    	; 0x2276 <MDIO_Errorstate_Set4MostBits+0xd4>
			{
			case MDIO_PORTA:
				PORTA&=0x0F;
    21f6:	ab e3       	ldi	r26, 0x3B	; 59
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	eb e3       	ldi	r30, 0x3B	; 59
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	8f 70       	andi	r24, 0x0F	; 15
    2202:	8c 93       	st	X, r24
				PORTA|=copy_uint8PortValue;
    2204:	ab e3       	ldi	r26, 0x3B	; 59
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	eb e3       	ldi	r30, 0x3B	; 59
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	90 81       	ld	r25, Z
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	89 2b       	or	r24, r25
    2212:	8c 93       	st	X, r24
    2214:	31 c0       	rjmp	.+98     	; 0x2278 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTB:
				PORTB&=0x0F;
    2216:	a8 e3       	ldi	r26, 0x38	; 56
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e8 e3       	ldi	r30, 0x38	; 56
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8f 70       	andi	r24, 0x0F	; 15
    2222:	8c 93       	st	X, r24
				PORTB|=copy_uint8PortValue;
    2224:	a8 e3       	ldi	r26, 0x38	; 56
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e8 e3       	ldi	r30, 0x38	; 56
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	90 81       	ld	r25, Z
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	89 2b       	or	r24, r25
    2232:	8c 93       	st	X, r24
    2234:	21 c0       	rjmp	.+66     	; 0x2278 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTC:
				PORTC&=0x0F;
    2236:	a5 e3       	ldi	r26, 0x35	; 53
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e5 e3       	ldi	r30, 0x35	; 53
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	8f 70       	andi	r24, 0x0F	; 15
    2242:	8c 93       	st	X, r24
				PORTC|=copy_uint8PortValue;
    2244:	a5 e3       	ldi	r26, 0x35	; 53
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e5 e3       	ldi	r30, 0x35	; 53
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	90 81       	ld	r25, Z
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	89 2b       	or	r24, r25
    2252:	8c 93       	st	X, r24
    2254:	11 c0       	rjmp	.+34     	; 0x2278 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTD:
				PORTD&=0x0F;
    2256:	a2 e3       	ldi	r26, 0x32	; 50
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e2 e3       	ldi	r30, 0x32	; 50
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	8f 70       	andi	r24, 0x0F	; 15
    2262:	8c 93       	st	X, r24
				PORTD|=copy_uint8PortValue;
    2264:	a2 e3       	ldi	r26, 0x32	; 50
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e2 e3       	ldi	r30, 0x32	; 50
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	90 81       	ld	r25, Z
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	89 2b       	or	r24, r25
    2272:	8c 93       	st	X, r24
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			default :
				Loc_Errorstate_Error_state=NOK;
    2276:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
	return Loc_Errorstate_Error_state;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
}
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <MADC_VidSingleConversion_Init>:
#include"MADC_Config.h"

void (*MADC_CALLBACK)(void);

void MADC_VidSingleConversion_Init(void)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	/* 1-Select Reference Volt*/
#if MADC_SET_REFERENCVOLT == MADC_Vref_AVCC
	SET_BIT(ADMUX,6);
    2292:	a7 e2       	ldi	r26, 0x27	; 39
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e7 e2       	ldi	r30, 0x27	; 39
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	80 64       	ori	r24, 0x40	; 64
    229e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    22a0:	a7 e2       	ldi	r26, 0x27	; 39
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e7 e2       	ldi	r30, 0x27	; 39
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 77       	andi	r24, 0x7F	; 127
    22ac:	8c 93       	st	X, r24
#else
#error"Reference Volt Option Is Not Valid.."
#endif
	/*  2-Select Left Or Right Adjustment Result*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST
	SET_BIT(ADMUX,5);
    22ae:	a7 e2       	ldi	r26, 0x27	; 39
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e7 e2       	ldi	r30, 0x27	; 39
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	80 62       	ori	r24, 0x20	; 32
    22ba:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,5);
#else
	#error"Adjustment Result Is Not Valid.. "
#endif
	/*  3-Select ADC PreScaler*/
	ADCSRA&=0xF8;
    22bc:	a6 e2       	ldi	r26, 0x26	; 38
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e6 e2       	ldi	r30, 0x26	; 38
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	88 7f       	andi	r24, 0xF8	; 248
    22c8:	8c 93       	st	X, r24
	ADCSRA|=ADC_SET_PRESCALER;
    22ca:	a6 e2       	ldi	r26, 0x26	; 38
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e6 e2       	ldi	r30, 0x26	; 38
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	87 60       	ori	r24, 0x07	; 7
    22d6:	8c 93       	st	X, r24
	 /* 4-Enable ADC peripheral*/
	SET_BIT(ADCSRA,7);
    22d8:	a6 e2       	ldi	r26, 0x26	; 38
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e6 e2       	ldi	r30, 0x26	; 38
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	80 68       	ori	r24, 0x80	; 128
    22e4:	8c 93       	st	X, r24
}
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <MADC_VidAutoTrigger_Init>:

void MADC_VidAutoTrigger_Init(void)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
	/*1-Auto trigger Enable*/
	SET_BIT(ADCSRA,5);
    22f4:	a6 e2       	ldi	r26, 0x26	; 38
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e6 e2       	ldi	r30, 0x26	; 38
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	80 62       	ori	r24, 0x20	; 32
    2300:	8c 93       	st	X, r24
	 /*2-ADC_Auto_Trigger_Source*/
#if MADC_SET_AUTO_TRIGGER_SOURCE ==MADC_FREERUNNING

	 SFIOR&=0x1F;
    2302:	a0 e5       	ldi	r26, 0x50	; 80
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e0 e5       	ldi	r30, 0x50	; 80
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8f 71       	andi	r24, 0x1F	; 31
    230e:	8c 93       	st	X, r24
	SFIOR|=MADC_FREERUNNING;
    2310:	a0 e5       	ldi	r26, 0x50	; 80
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e0 e5       	ldi	r30, 0x50	; 80
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	8c 93       	st	X, r24
#else
#error "Auto Trigger Source Is Not Valid.."
#endif
}
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <MADC_VidInterrupt_Enable>:

void MADC_VidInterrupt_Enable(void)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
 /* 1-Set ADC Interrupt Enable */
	SET_BIT(ADCSRA,3);
    232a:	a6 e2       	ldi	r26, 0x26	; 38
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e6 e2       	ldi	r30, 0x26	; 38
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	88 60       	ori	r24, 0x08	; 8
    2336:	8c 93       	st	X, r24
}
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <MADC_VidADCStartSingleConversion>:

void MADC_VidADCStartSingleConversion(uint8 copy_uint8Channel)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	0f 92       	push	r0
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	89 83       	std	Y+1, r24	; 0x01
	/*1-Select Analog Channels
	 * single Ended or Differential */
#if MADC_SET_ANALOGCHANNEL ==  MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    234a:	a7 e2       	ldi	r26, 0x27	; 39
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e7 e2       	ldi	r30, 0x27	; 39
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	80 7e       	andi	r24, 0xE0	; 224
    2356:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    2358:	a7 e2       	ldi	r26, 0x27	; 39
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e7 e2       	ldi	r30, 0x27	; 39
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	90 81       	ld	r25, Z
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	89 2b       	or	r24, r25
    2366:	8c 93       	st	X, r24
#else
#error "Analog Channel Is Not Valid.."
#endif
	/* 2-Start Conversion*/
	SET_BIT(ADCSRA,6);
    2368:	a6 e2       	ldi	r26, 0x26	; 38
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e6 e2       	ldi	r30, 0x26	; 38
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	80 64       	ori	r24, 0x40	; 64
    2374:	8c 93       	st	X, r24
	/*wait until flag is set to 1*/
	while(GET_BIT(ADCSRA,4)==0);
    2376:	e6 e2       	ldi	r30, 0x26	; 38
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	82 95       	swap	r24
    237e:	8f 70       	andi	r24, 0x0F	; 15
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	81 70       	andi	r24, 0x01	; 1
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	a9 f3       	breq	.-22     	; 0x2376 <MADC_VidADCStartSingleConversion+0x38>

}
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <MADC_VidADCStartSingleConversion_With_Interrupt>:
void MADC_VidADCStartSingleConversion_With_Interrupt(uint8 copy_uint8Channel)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	0f 92       	push	r0
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	89 83       	std	Y+1, r24	; 0x01
#if MADC_SET_ANALOGCHANNEL == MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    23a0:	a7 e2       	ldi	r26, 0x27	; 39
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e7 e2       	ldi	r30, 0x27	; 39
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	80 7e       	andi	r24, 0xE0	; 224
    23ac:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    23ae:	a7 e2       	ldi	r26, 0x27	; 39
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e7 e2       	ldi	r30, 0x27	; 39
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	90 81       	ld	r25, Z
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	89 2b       	or	r24, r25
    23bc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);
    23be:	a6 e2       	ldi	r26, 0x26	; 38
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e6 e2       	ldi	r30, 0x26	; 38
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	80 64       	ori	r24, 0x40	; 64
    23ca:	8c 93       	st	X, r24
#else
	#error "Analog Channel Is Not Valid .."
#endif
}
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <MADC_uint16Read>:

uint16 MADC_uint16Read(void)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <MADC_uint16Read+0x6>
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
	uint16 ADC;
	/*1- right adjust*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST

	ADC=ADCH;
    23de:	e5 e2       	ldi	r30, 0x25	; 37
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
	ADC|=ADCL<<8;
    23ea:	e4 e2       	ldi	r30, 0x24	; 36
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	38 2f       	mov	r19, r24
    23f4:	22 27       	eor	r18, r18
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	82 2b       	or	r24, r18
    23fc:	93 2b       	or	r25, r19
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
	return ADC;
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02

 #else
	#error"Analog Channel Is Not Valid .."
#endif
	//return ADC;
}
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <MADC_SetCallBack>:
void MADC_SetCallBack(void(*PtrToFun)(void))
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	00 d0       	rcall	.+0      	; 0x2416 <MADC_SetCallBack+0x6>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
	MADC_CALLBACK=PtrToFun;
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	90 93 a2 00 	sts	0x00A2, r25
    2426:	80 93 a1 00 	sts	0x00A1, r24
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <__vector_16>:
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)  	{
    2434:	1f 92       	push	r1
    2436:	0f 92       	push	r0
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	0f 92       	push	r0
    243c:	11 24       	eor	r1, r1
    243e:	2f 93       	push	r18
    2440:	3f 93       	push	r19
    2442:	4f 93       	push	r20
    2444:	5f 93       	push	r21
    2446:	6f 93       	push	r22
    2448:	7f 93       	push	r23
    244a:	8f 93       	push	r24
    244c:	9f 93       	push	r25
    244e:	af 93       	push	r26
    2450:	bf 93       	push	r27
    2452:	ef 93       	push	r30
    2454:	ff 93       	push	r31
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
	MADC_CALLBACK();
    245e:	e0 91 a1 00 	lds	r30, 0x00A1
    2462:	f0 91 a2 00 	lds	r31, 0x00A2
    2466:	09 95       	icall
}
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	ff 91       	pop	r31
    246e:	ef 91       	pop	r30
    2470:	bf 91       	pop	r27
    2472:	af 91       	pop	r26
    2474:	9f 91       	pop	r25
    2476:	8f 91       	pop	r24
    2478:	7f 91       	pop	r23
    247a:	6f 91       	pop	r22
    247c:	5f 91       	pop	r21
    247e:	4f 91       	pop	r20
    2480:	3f 91       	pop	r19
    2482:	2f 91       	pop	r18
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	0f 90       	pop	r0
    248a:	1f 90       	pop	r1
    248c:	18 95       	reti

0000248e <HStepper_Init>:
#include "../HSTEPPER/HStepper_Config.h"
#include "../HSTEPPER/HStepper_Interface.h"
#define F_CPU 16000000UL
#include<util/delay.h>
void HStepper_Init(void)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL1,PIN_OUTPUT);
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	63 e0       	ldi	r22, 0x03	; 3
    249a:	41 e0       	ldi	r20, 0x01	; 1
    249c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL2,PIN_OUTPUT);
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	64 e0       	ldi	r22, 0x04	; 4
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL3,PIN_OUTPUT);
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	65 e0       	ldi	r22, 0x05	; 5
    24ae:	41 e0       	ldi	r20, 0x01	; 1
    24b0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL4,PIN_OUTPUT);
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	66 e0       	ldi	r22, 0x06	; 6
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
}
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <HStepper_SetStepsDirection>:
void HStepper_SetStepsDirection(uint16 copy_uint16Steps,uint8 copy_uint8Direction)
{
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	c9 57       	subi	r28, 0x79	; 121
    24d2:	d0 40       	sbci	r29, 0x00	; 0
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	fe 01       	movw	r30, r28
    24e0:	eb 58       	subi	r30, 0x8B	; 139
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
    24e8:	fe 01       	movw	r30, r28
    24ea:	e9 58       	subi	r30, 0x89	; 137
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	60 83       	st	Z, r22
	switch(copy_uint8Direction)
    24f0:	fe 01       	movw	r30, r28
    24f2:	e9 58       	subi	r30, 0x89	; 137
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	80 81       	ld	r24, Z
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	ea 96       	adiw	r28, 0x3a	; 58
    24fe:	3f af       	std	Y+63, r19	; 0x3f
    2500:	2e af       	std	Y+62, r18	; 0x3e
    2502:	ea 97       	sbiw	r28, 0x3a	; 58
    2504:	ea 96       	adiw	r28, 0x3a	; 58
    2506:	8e ad       	ldd	r24, Y+62	; 0x3e
    2508:	9f ad       	ldd	r25, Y+63	; 0x3f
    250a:	ea 97       	sbiw	r28, 0x3a	; 58
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	49 f0       	breq	.+18     	; 0x2522 <HStepper_SetStepsDirection+0x5e>
    2510:	ea 96       	adiw	r28, 0x3a	; 58
    2512:	ee ad       	ldd	r30, Y+62	; 0x3e
    2514:	ff ad       	ldd	r31, Y+63	; 0x3f
    2516:	ea 97       	sbiw	r28, 0x3a	; 58
    2518:	e1 30       	cpi	r30, 0x01	; 1
    251a:	f1 05       	cpc	r31, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <HStepper_SetStepsDirection+0x5c>
    251e:	10 c3       	rjmp	.+1568   	; 0x2b40 <HStepper_SetStepsDirection+0x67c>
    2520:	47 c5       	rjmp	.+2702   	; 0x2fb0 <HStepper_SetStepsDirection+0xaec>
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2522:	fe 01       	movw	r30, r28
    2524:	ed 58       	subi	r30, 0x8D	; 141
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	11 82       	std	Z+1, r1	; 0x01
    252a:	10 82       	st	Z, r1
    252c:	f9 c2       	rjmp	.+1522   	; 0x2b20 <HStepper_SetStepsDirection+0x65c>
					{
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	63 e0       	ldi	r22, 0x03	; 3
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	64 e0       	ldi	r22, 0x04	; 4
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	65 e0       	ldi	r22, 0x05	; 5
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	66 e0       	ldi	r22, 0x06	; 6
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    2556:	fe 01       	movw	r30, r28
    2558:	e3 59       	subi	r30, 0x93	; 147
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a0 ee       	ldi	r26, 0xE0	; 224
    2562:	b0 e4       	ldi	r27, 0x40	; 64
    2564:	80 83       	st	Z, r24
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	a2 83       	std	Z+2, r26	; 0x02
    256a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256c:	8e 01       	movw	r16, r28
    256e:	07 59       	subi	r16, 0x97	; 151
    2570:	1f 4f       	sbci	r17, 0xFF	; 255
    2572:	fe 01       	movw	r30, r28
    2574:	e3 59       	subi	r30, 0x93	; 147
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	60 81       	ld	r22, Z
    257a:	71 81       	ldd	r23, Z+1	; 0x01
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	93 81       	ldd	r25, Z+3	; 0x03
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	4a e7       	ldi	r20, 0x7A	; 122
    2586:	55 e4       	ldi	r21, 0x45	; 69
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	f8 01       	movw	r30, r16
    2592:	80 83       	st	Z, r24
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	a2 83       	std	Z+2, r26	; 0x02
    2598:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    259a:	fe 01       	movw	r30, r28
    259c:	e7 59       	subi	r30, 0x97	; 151
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	60 81       	ld	r22, Z
    25a2:	71 81       	ldd	r23, Z+1	; 0x01
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e8       	ldi	r20, 0x80	; 128
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b4:	88 23       	and	r24, r24
    25b6:	44 f4       	brge	.+16     	; 0x25c8 <HStepper_SetStepsDirection+0x104>
		__ticks = 1;
    25b8:	fe 01       	movw	r30, r28
    25ba:	e9 59       	subi	r30, 0x99	; 153
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	64 c0       	rjmp	.+200    	; 0x2690 <HStepper_SetStepsDirection+0x1cc>
	else if (__tmp > 65535)
    25c8:	fe 01       	movw	r30, r28
    25ca:	e7 59       	subi	r30, 0x97	; 151
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	3f ef       	ldi	r19, 0xFF	; 255
    25da:	4f e7       	ldi	r20, 0x7F	; 127
    25dc:	57 e4       	ldi	r21, 0x47	; 71
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e2:	18 16       	cp	r1, r24
    25e4:	0c f0       	brlt	.+2      	; 0x25e8 <HStepper_SetStepsDirection+0x124>
    25e6:	43 c0       	rjmp	.+134    	; 0x266e <HStepper_SetStepsDirection+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	fe 01       	movw	r30, r28
    25ea:	e3 59       	subi	r30, 0x93	; 147
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	8e 01       	movw	r16, r28
    2608:	09 59       	subi	r16, 0x99	; 153
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	f8 01       	movw	r30, r16
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
    261e:	1f c0       	rjmp	.+62     	; 0x265e <HStepper_SetStepsDirection+0x19a>
    2620:	fe 01       	movw	r30, r28
    2622:	eb 59       	subi	r30, 0x9B	; 155
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 e9       	ldi	r24, 0x90	; 144
    2628:	91 e0       	ldi	r25, 0x01	; 1
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    262e:	fe 01       	movw	r30, r28
    2630:	eb 59       	subi	r30, 0x9B	; 155
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <HStepper_SetStepsDirection+0x174>
    263c:	fe 01       	movw	r30, r28
    263e:	eb 59       	subi	r30, 0x9B	; 155
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	de 01       	movw	r26, r28
    2648:	a9 59       	subi	r26, 0x99	; 153
    264a:	bf 4f       	sbci	r27, 0xFF	; 255
    264c:	fe 01       	movw	r30, r28
    264e:	e9 59       	subi	r30, 0x99	; 153
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	11 96       	adiw	r26, 0x01	; 1
    265a:	9c 93       	st	X, r25
    265c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265e:	fe 01       	movw	r30, r28
    2660:	e9 59       	subi	r30, 0x99	; 153
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	d1 f6       	brne	.-76     	; 0x2620 <HStepper_SetStepsDirection+0x15c>
    266c:	27 c0       	rjmp	.+78     	; 0x26bc <HStepper_SetStepsDirection+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266e:	8e 01       	movw	r16, r28
    2670:	09 59       	subi	r16, 0x99	; 153
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	fe 01       	movw	r30, r28
    2676:	e7 59       	subi	r30, 0x97	; 151
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	60 81       	ld	r22, Z
    267c:	71 81       	ldd	r23, Z+1	; 0x01
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	f8 01       	movw	r30, r16
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	80 83       	st	Z, r24
    2690:	de 01       	movw	r26, r28
    2692:	ad 59       	subi	r26, 0x9D	; 157
    2694:	bf 4f       	sbci	r27, 0xFF	; 255
    2696:	fe 01       	movw	r30, r28
    2698:	e9 59       	subi	r30, 0x99	; 153
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	8d 93       	st	X+, r24
    26a2:	9c 93       	st	X, r25
    26a4:	fe 01       	movw	r30, r28
    26a6:	ed 59       	subi	r30, 0x9D	; 157
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	91 81       	ldd	r25, Z+1	; 0x01
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <HStepper_SetStepsDirection+0x1ea>
    26b2:	fe 01       	movw	r30, r28
    26b4:	ed 59       	subi	r30, 0x9D	; 157
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	63 e0       	ldi	r22, 0x03	; 3
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	64 e0       	ldi	r22, 0x04	; 4
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	65 e0       	ldi	r22, 0x05	; 5
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	66 e0       	ldi	r22, 0x06	; 6
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    26e4:	fe 01       	movw	r30, r28
    26e6:	e1 5a       	subi	r30, 0xA1	; 161
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 ee       	ldi	r26, 0xE0	; 224
    26f0:	b0 e4       	ldi	r27, 0x40	; 64
    26f2:	80 83       	st	Z, r24
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	a2 83       	std	Z+2, r26	; 0x02
    26f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	8e 01       	movw	r16, r28
    26fc:	05 5a       	subi	r16, 0xA5	; 165
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	fe 01       	movw	r30, r28
    2702:	e1 5a       	subi	r30, 0xA1	; 161
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	55 e4       	ldi	r21, 0x45	; 69
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	f8 01       	movw	r30, r16
    2720:	80 83       	st	Z, r24
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	a2 83       	std	Z+2, r26	; 0x02
    2726:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2728:	fe 01       	movw	r30, r28
    272a:	e5 5a       	subi	r30, 0xA5	; 165
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	44 f4       	brge	.+16     	; 0x2756 <HStepper_SetStepsDirection+0x292>
		__ticks = 1;
    2746:	fe 01       	movw	r30, r28
    2748:	e7 5a       	subi	r30, 0xA7	; 167
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    2754:	64 c0       	rjmp	.+200    	; 0x281e <HStepper_SetStepsDirection+0x35a>
	else if (__tmp > 65535)
    2756:	fe 01       	movw	r30, r28
    2758:	e5 5a       	subi	r30, 0xA5	; 165
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	3f ef       	ldi	r19, 0xFF	; 255
    2768:	4f e7       	ldi	r20, 0x7F	; 127
    276a:	57 e4       	ldi	r21, 0x47	; 71
    276c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2770:	18 16       	cp	r1, r24
    2772:	0c f0       	brlt	.+2      	; 0x2776 <HStepper_SetStepsDirection+0x2b2>
    2774:	43 c0       	rjmp	.+134    	; 0x27fc <HStepper_SetStepsDirection+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2776:	fe 01       	movw	r30, r28
    2778:	e1 5a       	subi	r30, 0xA1	; 161
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8e 01       	movw	r16, r28
    2796:	07 5a       	subi	r16, 0xA7	; 167
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	f8 01       	movw	r30, r16
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
    27ac:	1f c0       	rjmp	.+62     	; 0x27ec <HStepper_SetStepsDirection+0x328>
    27ae:	fe 01       	movw	r30, r28
    27b0:	e9 5a       	subi	r30, 0xA9	; 169
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 e9       	ldi	r24, 0x90	; 144
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	fe 01       	movw	r30, r28
    27be:	e9 5a       	subi	r30, 0xA9	; 169
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <HStepper_SetStepsDirection+0x302>
    27ca:	fe 01       	movw	r30, r28
    27cc:	e9 5a       	subi	r30, 0xA9	; 169
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d4:	de 01       	movw	r26, r28
    27d6:	a7 5a       	subi	r26, 0xA7	; 167
    27d8:	bf 4f       	sbci	r27, 0xFF	; 255
    27da:	fe 01       	movw	r30, r28
    27dc:	e7 5a       	subi	r30, 0xA7	; 167
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	11 96       	adiw	r26, 0x01	; 1
    27e8:	9c 93       	st	X, r25
    27ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e7 5a       	subi	r30, 0xA7	; 167
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	d1 f6       	brne	.-76     	; 0x27ae <HStepper_SetStepsDirection+0x2ea>
    27fa:	27 c0       	rjmp	.+78     	; 0x284a <HStepper_SetStepsDirection+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	8e 01       	movw	r16, r28
    27fe:	07 5a       	subi	r16, 0xA7	; 167
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	fe 01       	movw	r30, r28
    2804:	e5 5a       	subi	r30, 0xA5	; 165
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	f8 01       	movw	r30, r16
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	de 01       	movw	r26, r28
    2820:	ab 5a       	subi	r26, 0xAB	; 171
    2822:	bf 4f       	sbci	r27, 0xFF	; 255
    2824:	fe 01       	movw	r30, r28
    2826:	e7 5a       	subi	r30, 0xA7	; 167
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	8d 93       	st	X+, r24
    2830:	9c 93       	st	X, r25
    2832:	fe 01       	movw	r30, r28
    2834:	eb 5a       	subi	r30, 0xAB	; 171
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <HStepper_SetStepsDirection+0x378>
    2840:	fe 01       	movw	r30, r28
    2842:	eb 5a       	subi	r30, 0xAB	; 171
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	63 e0       	ldi	r22, 0x03	; 3
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	64 e0       	ldi	r22, 0x04	; 4
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	65 e0       	ldi	r22, 0x05	; 5
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2868:	82 e0       	ldi	r24, 0x02	; 2
    286a:	66 e0       	ldi	r22, 0x06	; 6
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    2872:	fe 01       	movw	r30, r28
    2874:	ef 5a       	subi	r30, 0xAF	; 175
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 ee       	ldi	r26, 0xE0	; 224
    287e:	b0 e4       	ldi	r27, 0x40	; 64
    2880:	80 83       	st	Z, r24
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	a2 83       	std	Z+2, r26	; 0x02
    2886:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	8e 01       	movw	r16, r28
    288a:	03 5b       	subi	r16, 0xB3	; 179
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	fe 01       	movw	r30, r28
    2890:	ef 5a       	subi	r30, 0xAF	; 175
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a e7       	ldi	r20, 0x7A	; 122
    28a2:	55 e4       	ldi	r21, 0x45	; 69
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	f8 01       	movw	r30, r16
    28ae:	80 83       	st	Z, r24
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	a2 83       	std	Z+2, r26	; 0x02
    28b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b6:	fe 01       	movw	r30, r28
    28b8:	e3 5b       	subi	r30, 0xB3	; 179
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	44 f4       	brge	.+16     	; 0x28e4 <HStepper_SetStepsDirection+0x420>
		__ticks = 1;
    28d4:	fe 01       	movw	r30, r28
    28d6:	e5 5b       	subi	r30, 0xB5	; 181
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	64 c0       	rjmp	.+200    	; 0x29ac <HStepper_SetStepsDirection+0x4e8>
	else if (__tmp > 65535)
    28e4:	fe 01       	movw	r30, r28
    28e6:	e3 5b       	subi	r30, 0xB3	; 179
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	0c f0       	brlt	.+2      	; 0x2904 <HStepper_SetStepsDirection+0x440>
    2902:	43 c0       	rjmp	.+134    	; 0x298a <HStepper_SetStepsDirection+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	fe 01       	movw	r30, r28
    2906:	ef 5a       	subi	r30, 0xAF	; 175
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e2       	ldi	r20, 0x20	; 32
    2918:	51 e4       	ldi	r21, 0x41	; 65
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	8e 01       	movw	r16, r28
    2924:	05 5b       	subi	r16, 0xB5	; 181
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	bc 01       	movw	r22, r24
    292a:	cd 01       	movw	r24, r26
    292c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	f8 01       	movw	r30, r16
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	1f c0       	rjmp	.+62     	; 0x297a <HStepper_SetStepsDirection+0x4b6>
    293c:	fe 01       	movw	r30, r28
    293e:	e7 5b       	subi	r30, 0xB7	; 183
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 e9       	ldi	r24, 0x90	; 144
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	fe 01       	movw	r30, r28
    294c:	e7 5b       	subi	r30, 0xB7	; 183
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <HStepper_SetStepsDirection+0x490>
    2958:	fe 01       	movw	r30, r28
    295a:	e7 5b       	subi	r30, 0xB7	; 183
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2962:	de 01       	movw	r26, r28
    2964:	a5 5b       	subi	r26, 0xB5	; 181
    2966:	bf 4f       	sbci	r27, 0xFF	; 255
    2968:	fe 01       	movw	r30, r28
    296a:	e5 5b       	subi	r30, 0xB5	; 181
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	11 96       	adiw	r26, 0x01	; 1
    2976:	9c 93       	st	X, r25
    2978:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	fe 01       	movw	r30, r28
    297c:	e5 5b       	subi	r30, 0xB5	; 181
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	91 81       	ldd	r25, Z+1	; 0x01
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	d1 f6       	brne	.-76     	; 0x293c <HStepper_SetStepsDirection+0x478>
    2988:	27 c0       	rjmp	.+78     	; 0x29d8 <HStepper_SetStepsDirection+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	8e 01       	movw	r16, r28
    298c:	05 5b       	subi	r16, 0xB5	; 181
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	fe 01       	movw	r30, r28
    2992:	e3 5b       	subi	r30, 0xB3	; 179
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	60 81       	ld	r22, Z
    2998:	71 81       	ldd	r23, Z+1	; 0x01
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	f8 01       	movw	r30, r16
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	de 01       	movw	r26, r28
    29ae:	a9 5b       	subi	r26, 0xB9	; 185
    29b0:	bf 4f       	sbci	r27, 0xFF	; 255
    29b2:	fe 01       	movw	r30, r28
    29b4:	e5 5b       	subi	r30, 0xB5	; 181
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	91 81       	ldd	r25, Z+1	; 0x01
    29bc:	8d 93       	st	X+, r24
    29be:	9c 93       	st	X, r25
    29c0:	fe 01       	movw	r30, r28
    29c2:	e9 5b       	subi	r30, 0xB9	; 185
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <HStepper_SetStepsDirection+0x506>
    29ce:	fe 01       	movw	r30, r28
    29d0:	e9 5b       	subi	r30, 0xB9	; 185
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	63 e0       	ldi	r22, 0x03	; 3
    29dc:	41 e0       	ldi	r20, 0x01	; 1
    29de:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	64 e0       	ldi	r22, 0x04	; 4
    29e6:	41 e0       	ldi	r20, 0x01	; 1
    29e8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	65 e0       	ldi	r22, 0x05	; 5
    29f0:	41 e0       	ldi	r20, 0x01	; 1
    29f2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	66 e0       	ldi	r22, 0x06	; 6
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    2a00:	fe 01       	movw	r30, r28
    2a02:	ed 5b       	subi	r30, 0xBD	; 189
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	a0 ee       	ldi	r26, 0xE0	; 224
    2a0c:	b0 e4       	ldi	r27, 0x40	; 64
    2a0e:	80 83       	st	Z, r24
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	a2 83       	std	Z+2, r26	; 0x02
    2a14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a16:	8e 01       	movw	r16, r28
    2a18:	01 5c       	subi	r16, 0xC1	; 193
    2a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ed 5b       	subi	r30, 0xBD	; 189
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	4a e7       	ldi	r20, 0x7A	; 122
    2a30:	55 e4       	ldi	r21, 0x45	; 69
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	f8 01       	movw	r30, r16
    2a3c:	80 83       	st	Z, r24
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	a2 83       	std	Z+2, r26	; 0x02
    2a42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a44:	fe 01       	movw	r30, r28
    2a46:	ff 96       	adiw	r30, 0x3f	; 63
    2a48:	60 81       	ld	r22, Z
    2a4a:	71 81       	ldd	r23, Z+1	; 0x01
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	2c f4       	brge	.+10     	; 0x2a6a <HStepper_SetStepsDirection+0x5a6>
		__ticks = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9e af       	std	Y+62, r25	; 0x3e
    2a66:	8d af       	std	Y+61, r24	; 0x3d
    2a68:	46 c0       	rjmp	.+140    	; 0x2af6 <HStepper_SetStepsDirection+0x632>
	else if (__tmp > 65535)
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ff 96       	adiw	r30, 0x3f	; 63
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	64 f5       	brge	.+88     	; 0x2ade <HStepper_SetStepsDirection+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	fe 01       	movw	r30, r28
    2a88:	ed 5b       	subi	r30, 0xBD	; 189
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e2       	ldi	r20, 0x20	; 32
    2a9a:	51 e4       	ldi	r21, 0x41	; 65
    2a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	9e af       	std	Y+62, r25	; 0x3e
    2ab2:	8d af       	std	Y+61, r24	; 0x3d
    2ab4:	0f c0       	rjmp	.+30     	; 0x2ad4 <HStepper_SetStepsDirection+0x610>
    2ab6:	80 e9       	ldi	r24, 0x90	; 144
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
    2aba:	9c af       	std	Y+60, r25	; 0x3c
    2abc:	8b af       	std	Y+59, r24	; 0x3b
    2abe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ac0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <HStepper_SetStepsDirection+0x5fe>
    2ac6:	9c af       	std	Y+60, r25	; 0x3c
    2ac8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aca:	8d ad       	ldd	r24, Y+61	; 0x3d
    2acc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	9e af       	std	Y+62, r25	; 0x3e
    2ad2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ad6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	69 f7       	brne	.-38     	; 0x2ab6 <HStepper_SetStepsDirection+0x5f2>
    2adc:	16 c0       	rjmp	.+44     	; 0x2b0a <HStepper_SetStepsDirection+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ade:	fe 01       	movw	r30, r28
    2ae0:	ff 96       	adiw	r30, 0x3f	; 63
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9e af       	std	Y+62, r25	; 0x3e
    2af4:	8d af       	std	Y+61, r24	; 0x3d
    2af6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2af8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2afa:	9a af       	std	Y+58, r25	; 0x3a
    2afc:	89 af       	std	Y+57, r24	; 0x39
    2afe:	89 ad       	ldd	r24, Y+57	; 0x39
    2b00:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <HStepper_SetStepsDirection+0x63e>
    2b06:	9a af       	std	Y+58, r25	; 0x3a
    2b08:	89 af       	std	Y+57, r24	; 0x39
{
	switch(copy_uint8Direction)
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2b0a:	de 01       	movw	r26, r28
    2b0c:	ad 58       	subi	r26, 0x8D	; 141
    2b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	ed 58       	subi	r30, 0x8D	; 141
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	01 96       	adiw	r24, 0x01	; 1
    2b1c:	8d 93       	st	X+, r24
    2b1e:	9c 93       	st	X, r25
    2b20:	fe 01       	movw	r30, r28
    2b22:	ed 58       	subi	r30, 0x8D	; 141
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	de 01       	movw	r26, r28
    2b28:	ab 58       	subi	r26, 0x8B	; 139
    2b2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2c:	20 81       	ld	r18, Z
    2b2e:	31 81       	ldd	r19, Z+1	; 0x01
    2b30:	8d 91       	ld	r24, X+
    2b32:	9c 91       	ld	r25, X
    2b34:	11 97       	sbiw	r26, 0x01	; 1
    2b36:	28 17       	cp	r18, r24
    2b38:	39 07       	cpc	r19, r25
    2b3a:	08 f4       	brcc	.+2      	; 0x2b3e <HStepper_SetStepsDirection+0x67a>
    2b3c:	f8 cc       	rjmp	.-1552   	; 0x252e <HStepper_SetStepsDirection+0x6a>
    2b3e:	38 c2       	rjmp	.+1136   	; 0x2fb0 <HStepper_SetStepsDirection+0xaec>
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2b40:	fe 01       	movw	r30, r28
    2b42:	ef 58       	subi	r30, 0x8F	; 143
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	11 82       	std	Z+1, r1	; 0x01
    2b48:	10 82       	st	Z, r1
    2b4a:	23 c2       	rjmp	.+1094   	; 0x2f92 <HStepper_SetStepsDirection+0xace>
			{
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2b4c:	82 e0       	ldi	r24, 0x02	; 2
    2b4e:	63 e0       	ldi	r22, 0x03	; 3
    2b50:	41 e0       	ldi	r20, 0x01	; 1
    2b52:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	64 e0       	ldi	r22, 0x04	; 4
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2b60:	82 e0       	ldi	r24, 0x02	; 2
    2b62:	65 e0       	ldi	r22, 0x05	; 5
    2b64:	41 e0       	ldi	r20, 0x01	; 1
    2b66:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	66 e0       	ldi	r22, 0x06	; 6
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 ee       	ldi	r26, 0xE0	; 224
    2b7a:	b0 e4       	ldi	r27, 0x40	; 64
    2b7c:	8d ab       	std	Y+53, r24	; 0x35
    2b7e:	9e ab       	std	Y+54, r25	; 0x36
    2b80:	af ab       	std	Y+55, r26	; 0x37
    2b82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6d a9       	ldd	r22, Y+53	; 0x35
    2b86:	7e a9       	ldd	r23, Y+54	; 0x36
    2b88:	8f a9       	ldd	r24, Y+55	; 0x37
    2b8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a e7       	ldi	r20, 0x7A	; 122
    2b92:	55 e4       	ldi	r21, 0x45	; 69
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	89 ab       	std	Y+49, r24	; 0x31
    2b9e:	9a ab       	std	Y+50, r25	; 0x32
    2ba0:	ab ab       	std	Y+51, r26	; 0x33
    2ba2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    2baa:	9c a9       	ldd	r25, Y+52	; 0x34
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <HStepper_SetStepsDirection+0x702>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	98 ab       	std	Y+48, r25	; 0x30
    2bc2:	8f a7       	std	Y+47, r24	; 0x2f
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <HStepper_SetStepsDirection+0x780>
	else if (__tmp > 65535)
    2bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bca:	8b a9       	ldd	r24, Y+51	; 0x33
    2bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <HStepper_SetStepsDirection+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6d a9       	ldd	r22, Y+53	; 0x35
    2be0:	7e a9       	ldd	r23, Y+54	; 0x36
    2be2:	8f a9       	ldd	r24, Y+55	; 0x37
    2be4:	98 ad       	ldd	r25, Y+56	; 0x38
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	98 ab       	std	Y+48, r25	; 0x30
    2c04:	8f a7       	std	Y+47, r24	; 0x2f
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <HStepper_SetStepsDirection+0x762>
    2c08:	80 e9       	ldi	r24, 0x90	; 144
    2c0a:	91 e0       	ldi	r25, 0x01	; 1
    2c0c:	9e a7       	std	Y+46, r25	; 0x2e
    2c0e:	8d a7       	std	Y+45, r24	; 0x2d
    2c10:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c12:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <HStepper_SetStepsDirection+0x750>
    2c18:	9e a7       	std	Y+46, r25	; 0x2e
    2c1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	98 ab       	std	Y+48, r25	; 0x30
    2c24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c28:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <HStepper_SetStepsDirection+0x744>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <HStepper_SetStepsDirection+0x794>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	69 a9       	ldd	r22, Y+49	; 0x31
    2c32:	7a a9       	ldd	r23, Y+50	; 0x32
    2c34:	8b a9       	ldd	r24, Y+51	; 0x33
    2c36:	9c a9       	ldd	r25, Y+52	; 0x34
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	98 ab       	std	Y+48, r25	; 0x30
    2c42:	8f a7       	std	Y+47, r24	; 0x2f
    2c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c46:	98 a9       	ldd	r25, Y+48	; 0x30
    2c48:	9c a7       	std	Y+44, r25	; 0x2c
    2c4a:	8b a7       	std	Y+43, r24	; 0x2b
    2c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <HStepper_SetStepsDirection+0x78c>
    2c54:	9c a7       	std	Y+44, r25	; 0x2c
    2c56:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	63 e0       	ldi	r22, 0x03	; 3
    2c5c:	41 e0       	ldi	r20, 0x01	; 1
    2c5e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	64 e0       	ldi	r22, 0x04	; 4
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    2c6c:	82 e0       	ldi	r24, 0x02	; 2
    2c6e:	65 e0       	ldi	r22, 0x05	; 5
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2c76:	82 e0       	ldi	r24, 0x02	; 2
    2c78:	66 e0       	ldi	r22, 0x06	; 6
    2c7a:	41 e0       	ldi	r20, 0x01	; 1
    2c7c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	a0 ee       	ldi	r26, 0xE0	; 224
    2c86:	b0 e4       	ldi	r27, 0x40	; 64
    2c88:	8f a3       	std	Y+39, r24	; 0x27
    2c8a:	98 a7       	std	Y+40, r25	; 0x28
    2c8c:	a9 a7       	std	Y+41, r26	; 0x29
    2c8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c90:	6f a1       	ldd	r22, Y+39	; 0x27
    2c92:	78 a5       	ldd	r23, Y+40	; 0x28
    2c94:	89 a5       	ldd	r24, Y+41	; 0x29
    2c96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	4a e7       	ldi	r20, 0x7A	; 122
    2c9e:	55 e4       	ldi	r21, 0x45	; 69
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	8b a3       	std	Y+35, r24	; 0x23
    2caa:	9c a3       	std	Y+36, r25	; 0x24
    2cac:	ad a3       	std	Y+37, r26	; 0x25
    2cae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e8       	ldi	r20, 0x80	; 128
    2cbe:	5f e3       	ldi	r21, 0x3F	; 63
    2cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc4:	88 23       	and	r24, r24
    2cc6:	2c f4       	brge	.+10     	; 0x2cd2 <HStepper_SetStepsDirection+0x80e>
		__ticks = 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9a a3       	std	Y+34, r25	; 0x22
    2cce:	89 a3       	std	Y+33, r24	; 0x21
    2cd0:	3f c0       	rjmp	.+126    	; 0x2d50 <HStepper_SetStepsDirection+0x88c>
	else if (__tmp > 65535)
    2cd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	57 e4       	ldi	r21, 0x47	; 71
    2ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	4c f5       	brge	.+82     	; 0x2d3c <HStepper_SetStepsDirection+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cea:	6f a1       	ldd	r22, Y+39	; 0x27
    2cec:	78 a5       	ldd	r23, Y+40	; 0x28
    2cee:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e2       	ldi	r20, 0x20	; 32
    2cf8:	51 e4       	ldi	r21, 0x41	; 65
    2cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9a a3       	std	Y+34, r25	; 0x22
    2d10:	89 a3       	std	Y+33, r24	; 0x21
    2d12:	0f c0       	rjmp	.+30     	; 0x2d32 <HStepper_SetStepsDirection+0x86e>
    2d14:	80 e9       	ldi	r24, 0x90	; 144
    2d16:	91 e0       	ldi	r25, 0x01	; 1
    2d18:	98 a3       	std	Y+32, r25	; 0x20
    2d1a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d1e:	98 a1       	ldd	r25, Y+32	; 0x20
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <HStepper_SetStepsDirection+0x85c>
    2d24:	98 a3       	std	Y+32, r25	; 0x20
    2d26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d28:	89 a1       	ldd	r24, Y+33	; 0x21
    2d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	9a a3       	std	Y+34, r25	; 0x22
    2d30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d32:	89 a1       	ldd	r24, Y+33	; 0x21
    2d34:	9a a1       	ldd	r25, Y+34	; 0x22
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	69 f7       	brne	.-38     	; 0x2d14 <HStepper_SetStepsDirection+0x850>
    2d3a:	14 c0       	rjmp	.+40     	; 0x2d64 <HStepper_SetStepsDirection+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d40:	8d a1       	ldd	r24, Y+37	; 0x25
    2d42:	9e a1       	ldd	r25, Y+38	; 0x26
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	9a a3       	std	Y+34, r25	; 0x22
    2d4e:	89 a3       	std	Y+33, r24	; 0x21
    2d50:	89 a1       	ldd	r24, Y+33	; 0x21
    2d52:	9a a1       	ldd	r25, Y+34	; 0x22
    2d54:	9e 8f       	std	Y+30, r25	; 0x1e
    2d56:	8d 8f       	std	Y+29, r24	; 0x1d
    2d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <HStepper_SetStepsDirection+0x898>
    2d60:	9e 8f       	std	Y+30, r25	; 0x1e
    2d62:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(MAX_SPEED_DELAY);
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	63 e0       	ldi	r22, 0x03	; 3
    2d68:	41 e0       	ldi	r20, 0x01	; 1
    2d6a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	64 e0       	ldi	r22, 0x04	; 4
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2d78:	82 e0       	ldi	r24, 0x02	; 2
    2d7a:	65 e0       	ldi	r22, 0x05	; 5
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	66 e0       	ldi	r22, 0x06	; 6
    2d86:	41 e0       	ldi	r20, 0x01	; 1
    2d88:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	a0 ee       	ldi	r26, 0xE0	; 224
    2d92:	b0 e4       	ldi	r27, 0x40	; 64
    2d94:	89 8f       	std	Y+25, r24	; 0x19
    2d96:	9a 8f       	std	Y+26, r25	; 0x1a
    2d98:	ab 8f       	std	Y+27, r26	; 0x1b
    2d9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	4a e7       	ldi	r20, 0x7A	; 122
    2daa:	55 e4       	ldi	r21, 0x45	; 69
    2dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	8d 8b       	std	Y+21, r24	; 0x15
    2db6:	9e 8b       	std	Y+22, r25	; 0x16
    2db8:	af 8b       	std	Y+23, r26	; 0x17
    2dba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e8       	ldi	r20, 0x80	; 128
    2dca:	5f e3       	ldi	r21, 0x3F	; 63
    2dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd0:	88 23       	and	r24, r24
    2dd2:	2c f4       	brge	.+10     	; 0x2dde <HStepper_SetStepsDirection+0x91a>
		__ticks = 1;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	9c 8b       	std	Y+20, r25	; 0x14
    2dda:	8b 8b       	std	Y+19, r24	; 0x13
    2ddc:	3f c0       	rjmp	.+126    	; 0x2e5c <HStepper_SetStepsDirection+0x998>
	else if (__tmp > 65535)
    2dde:	6d 89       	ldd	r22, Y+21	; 0x15
    2de0:	7e 89       	ldd	r23, Y+22	; 0x16
    2de2:	8f 89       	ldd	r24, Y+23	; 0x17
    2de4:	98 8d       	ldd	r25, Y+24	; 0x18
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	3f ef       	ldi	r19, 0xFF	; 255
    2dea:	4f e7       	ldi	r20, 0x7F	; 127
    2dec:	57 e4       	ldi	r21, 0x47	; 71
    2dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df2:	18 16       	cp	r1, r24
    2df4:	4c f5       	brge	.+82     	; 0x2e48 <HStepper_SetStepsDirection+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df6:	69 8d       	ldd	r22, Y+25	; 0x19
    2df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	40 e2       	ldi	r20, 0x20	; 32
    2e04:	51 e4       	ldi	r21, 0x41	; 65
    2e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	bc 01       	movw	r22, r24
    2e10:	cd 01       	movw	r24, r26
    2e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	9c 8b       	std	Y+20, r25	; 0x14
    2e1c:	8b 8b       	std	Y+19, r24	; 0x13
    2e1e:	0f c0       	rjmp	.+30     	; 0x2e3e <HStepper_SetStepsDirection+0x97a>
    2e20:	80 e9       	ldi	r24, 0x90	; 144
    2e22:	91 e0       	ldi	r25, 0x01	; 1
    2e24:	9a 8b       	std	Y+18, r25	; 0x12
    2e26:	89 8b       	std	Y+17, r24	; 0x11
    2e28:	89 89       	ldd	r24, Y+17	; 0x11
    2e2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	f1 f7       	brne	.-4      	; 0x2e2c <HStepper_SetStepsDirection+0x968>
    2e30:	9a 8b       	std	Y+18, r25	; 0x12
    2e32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e34:	8b 89       	ldd	r24, Y+19	; 0x13
    2e36:	9c 89       	ldd	r25, Y+20	; 0x14
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	9c 8b       	std	Y+20, r25	; 0x14
    2e3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e40:	9c 89       	ldd	r25, Y+20	; 0x14
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	69 f7       	brne	.-38     	; 0x2e20 <HStepper_SetStepsDirection+0x95c>
    2e46:	14 c0       	rjmp	.+40     	; 0x2e70 <HStepper_SetStepsDirection+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e48:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9c 8b       	std	Y+20, r25	; 0x14
    2e5a:	8b 8b       	std	Y+19, r24	; 0x13
    2e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e60:	98 8b       	std	Y+16, r25	; 0x10
    2e62:	8f 87       	std	Y+15, r24	; 0x0f
    2e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e66:	98 89       	ldd	r25, Y+16	; 0x10
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <HStepper_SetStepsDirection+0x9a4>
    2e6c:	98 8b       	std	Y+16, r25	; 0x10
    2e6e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	63 e0       	ldi	r22, 0x03	; 3
    2e74:	40 e0       	ldi	r20, 0x00	; 0
    2e76:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2e7a:	82 e0       	ldi	r24, 0x02	; 2
    2e7c:	64 e0       	ldi	r22, 0x04	; 4
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2e84:	82 e0       	ldi	r24, 0x02	; 2
    2e86:	65 e0       	ldi	r22, 0x05	; 5
    2e88:	41 e0       	ldi	r20, 0x01	; 1
    2e8a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	66 e0       	ldi	r22, 0x06	; 6
    2e92:	41 e0       	ldi	r20, 0x01	; 1
    2e94:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	a0 ee       	ldi	r26, 0xE0	; 224
    2e9e:	b0 e4       	ldi	r27, 0x40	; 64
    2ea0:	8b 87       	std	Y+11, r24	; 0x0b
    2ea2:	9c 87       	std	Y+12, r25	; 0x0c
    2ea4:	ad 87       	std	Y+13, r26	; 0x0d
    2ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	4a e7       	ldi	r20, 0x7A	; 122
    2eb6:	55 e4       	ldi	r21, 0x45	; 69
    2eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	8f 83       	std	Y+7, r24	; 0x07
    2ec2:	98 87       	std	Y+8, r25	; 0x08
    2ec4:	a9 87       	std	Y+9, r26	; 0x09
    2ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e8       	ldi	r20, 0x80	; 128
    2ed6:	5f e3       	ldi	r21, 0x3F	; 63
    2ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2edc:	88 23       	and	r24, r24
    2ede:	2c f4       	brge	.+10     	; 0x2eea <HStepper_SetStepsDirection+0xa26>
		__ticks = 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
    2ee8:	3f c0       	rjmp	.+126    	; 0x2f68 <HStepper_SetStepsDirection+0xaa4>
	else if (__tmp > 65535)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	3f ef       	ldi	r19, 0xFF	; 255
    2ef6:	4f e7       	ldi	r20, 0x7F	; 127
    2ef8:	57 e4       	ldi	r21, 0x47	; 71
    2efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2efe:	18 16       	cp	r1, r24
    2f00:	4c f5       	brge	.+82     	; 0x2f54 <HStepper_SetStepsDirection+0xa90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e2       	ldi	r20, 0x20	; 32
    2f10:	51 e4       	ldi	r21, 0x41	; 65
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	0f c0       	rjmp	.+30     	; 0x2f4a <HStepper_SetStepsDirection+0xa86>
    2f2c:	80 e9       	ldi	r24, 0x90	; 144
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	8b 83       	std	Y+3, r24	; 0x03
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <HStepper_SetStepsDirection+0xa74>
    2f3c:	9c 83       	std	Y+4, r25	; 0x04
    2f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	9e 81       	ldd	r25, Y+6	; 0x06
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	69 f7       	brne	.-38     	; 0x2f2c <HStepper_SetStepsDirection+0xa68>
    2f52:	14 c0       	rjmp	.+40     	; 0x2f7c <HStepper_SetStepsDirection+0xab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	9a 81       	ldd	r25, Y+2	; 0x02
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <HStepper_SetStepsDirection+0xab0>
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2f7c:	de 01       	movw	r26, r28
    2f7e:	af 58       	subi	r26, 0x8F	; 143
    2f80:	bf 4f       	sbci	r27, 0xFF	; 255
    2f82:	fe 01       	movw	r30, r28
    2f84:	ef 58       	subi	r30, 0x8F	; 143
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	01 96       	adiw	r24, 0x01	; 1
    2f8e:	8d 93       	st	X+, r24
    2f90:	9c 93       	st	X, r25
    2f92:	fe 01       	movw	r30, r28
    2f94:	ef 58       	subi	r30, 0x8F	; 143
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	de 01       	movw	r26, r28
    2f9a:	ab 58       	subi	r26, 0x8B	; 139
    2f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9e:	20 81       	ld	r18, Z
    2fa0:	31 81       	ldd	r19, Z+1	; 0x01
    2fa2:	8d 91       	ld	r24, X+
    2fa4:	9c 91       	ld	r25, X
    2fa6:	11 97       	sbiw	r26, 0x01	; 1
    2fa8:	28 17       	cp	r18, r24
    2faa:	39 07       	cpc	r19, r25
    2fac:	08 f4       	brcc	.+2      	; 0x2fb0 <HStepper_SetStepsDirection+0xaec>
    2fae:	ce cd       	rjmp	.-1124   	; 0x2b4c <HStepper_SetStepsDirection+0x688>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
				_delay_ms(MAX_SPEED_DELAY);
				}
			break;
		}
}
    2fb0:	c7 58       	subi	r28, 0x87	; 135
    2fb2:	df 4f       	sbci	r29, 0xFF	; 255
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	08 95       	ret

00002fc8 <HLED_Errorstate_Led_Init>:


/*******led initialize       ***********/

ErrorState HLED_Errorstate_Led_Init( LED_T* copy_LED_object)
{
    2fc8:	df 93       	push	r29
    2fca:	cf 93       	push	r28
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <HLED_Errorstate_Led_Init+0x6>
    2fce:	0f 92       	push	r0
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	9b 83       	std	Y+3, r25	; 0x03
    2fd6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	89 83       	std	Y+1, r24	; 0x01
	Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_OUTPUT);
    2fdc:	ea 81       	ldd	r30, Y+2	; 0x02
    2fde:	fb 81       	ldd	r31, Y+3	; 0x03
    2fe0:	80 81       	ld	r24, Z
    2fe2:	ea 81       	ldd	r30, Y+2	; 0x02
    2fe4:	fb 81       	ldd	r31, Y+3	; 0x03
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	69 2f       	mov	r22, r25
    2fea:	41 e0       	ldi	r20, 0x01	; 1
    2fec:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
    2ff0:	89 83       	std	Y+1, r24	; 0x01
		return Loc_ErrorState_Error_state;
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <HLED_Errorstate_Led_On>:

/********* led on              ***********/
ErrorState HLED_Errorstate_Led_On(LED_T* copy_LED_object)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	00 d0       	rcall	.+0      	; 0x3006 <HLED_Errorstate_Led_On+0x6>
    3006:	0f 92       	push	r0
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	9b 83       	std	Y+3, r25	; 0x03
    300e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	89 83       	std	Y+1, r24	; 0x01

	if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    3014:	ea 81       	ldd	r30, Y+2	; 0x02
    3016:	fb 81       	ldd	r31, Y+3	; 0x03
    3018:	82 81       	ldd	r24, Z+2	; 0x02
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	59 f4       	brne	.+22     	; 0x3034 <HLED_Errorstate_Led_On+0x34>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    301e:	ea 81       	ldd	r30, Y+2	; 0x02
    3020:	fb 81       	ldd	r31, Y+3	; 0x03
    3022:	80 81       	ld	r24, Z
    3024:	ea 81       	ldd	r30, Y+2	; 0x02
    3026:	fb 81       	ldd	r31, Y+3	; 0x03
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	69 2f       	mov	r22, r25
    302c:	41 e0       	ldi	r20, 0x01	; 1
    302e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    3032:	11 c0       	rjmp	.+34     	; 0x3056 <HLED_Errorstate_Led_On+0x56>
	}
	else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    3034:	ea 81       	ldd	r30, Y+2	; 0x02
    3036:	fb 81       	ldd	r31, Y+3	; 0x03
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	88 23       	and	r24, r24
    303c:	59 f4       	brne	.+22     	; 0x3054 <HLED_Errorstate_Led_On+0x54>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    303e:	ea 81       	ldd	r30, Y+2	; 0x02
    3040:	fb 81       	ldd	r31, Y+3	; 0x03
    3042:	80 81       	ld	r24, Z
    3044:	ea 81       	ldd	r30, Y+2	; 0x02
    3046:	fb 81       	ldd	r31, Y+3	; 0x03
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	69 2f       	mov	r22, r25
    304c:	40 e0       	ldi	r20, 0x00	; 0
    304e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    3052:	01 c0       	rjmp	.+2      	; 0x3056 <HLED_Errorstate_Led_On+0x56>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    3054:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_ErrorState_Error_state;
    3056:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <HLED_Errorstate_Led_Off>:

/***                        leed off                  ****/
	ErrorState HLED_Errorstate_Led_Off(LED_T* copy_LED_object)
	{
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	00 d0       	rcall	.+0      	; 0x306a <HLED_Errorstate_Led_Off+0x6>
    306a:	0f 92       	push	r0
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	9b 83       	std	Y+3, r25	; 0x03
    3072:	8a 83       	std	Y+2, r24	; 0x02
		ErrorState Loc_ErrorState_Error_state=OK;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	89 83       	std	Y+1, r24	; 0x01

		if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    3078:	ea 81       	ldd	r30, Y+2	; 0x02
    307a:	fb 81       	ldd	r31, Y+3	; 0x03
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	81 30       	cpi	r24, 0x01	; 1
    3080:	59 f4       	brne	.+22     	; 0x3098 <HLED_Errorstate_Led_Off+0x34>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    3082:	ea 81       	ldd	r30, Y+2	; 0x02
    3084:	fb 81       	ldd	r31, Y+3	; 0x03
    3086:	80 81       	ld	r24, Z
    3088:	ea 81       	ldd	r30, Y+2	; 0x02
    308a:	fb 81       	ldd	r31, Y+3	; 0x03
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	69 2f       	mov	r22, r25
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    3096:	11 c0       	rjmp	.+34     	; 0x30ba <HLED_Errorstate_Led_Off+0x56>
		}
		else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    3098:	ea 81       	ldd	r30, Y+2	; 0x02
    309a:	fb 81       	ldd	r31, Y+3	; 0x03
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	88 23       	and	r24, r24
    30a0:	59 f4       	brne	.+22     	; 0x30b8 <HLED_Errorstate_Led_Off+0x54>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    30a2:	ea 81       	ldd	r30, Y+2	; 0x02
    30a4:	fb 81       	ldd	r31, Y+3	; 0x03
    30a6:	80 81       	ld	r24, Z
    30a8:	ea 81       	ldd	r30, Y+2	; 0x02
    30aa:	fb 81       	ldd	r31, Y+3	; 0x03
    30ac:	91 81       	ldd	r25, Z+1	; 0x01
    30ae:	69 2f       	mov	r22, r25
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    30b6:	01 c0       	rjmp	.+2      	; 0x30ba <HLED_Errorstate_Led_Off+0x56>
		}
		else
		{
			Loc_ErrorState_Error_state=NOK;
    30b8:	19 82       	std	Y+1, r1	; 0x01
		}

		return Loc_ErrorState_Error_state;
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
		}
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <HLED_Errorstate_Led_Toggle>:

	ErrorState HLED_Errorstate_Led_Toggle(LED_T* copy_LED_object)
	{
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <HLED_Errorstate_Led_Toggle+0x6>
    30ce:	0f 92       	push	r0
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	9b 83       	std	Y+3, r25	; 0x03
    30d6:	8a 83       	std	Y+2, r24	; 0x02
		static uint8 flag=0; // imp
		ErrorState Loc_ErrorState_Error_state=OK;
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	89 83       	std	Y+1, r24	; 0x01
		if(flag==0)
    30dc:	80 91 96 00 	lds	r24, 0x0096
    30e0:	88 23       	and	r24, r24
    30e2:	71 f4       	brne	.+28     	; 0x3100 <HLED_Errorstate_Led_Toggle+0x38>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    30e4:	ea 81       	ldd	r30, Y+2	; 0x02
    30e6:	fb 81       	ldd	r31, Y+3	; 0x03
    30e8:	80 81       	ld	r24, Z
    30ea:	ea 81       	ldd	r30, Y+2	; 0x02
    30ec:	fb 81       	ldd	r31, Y+3	; 0x03
    30ee:	91 81       	ldd	r25, Z+1	; 0x01
    30f0:	69 2f       	mov	r22, r25
    30f2:	41 e0       	ldi	r20, 0x01	; 1
    30f4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
			flag=1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	80 93 96 00 	sts	0x0096, r24
    30fe:	10 c0       	rjmp	.+32     	; 0x3120 <HLED_Errorstate_Led_Toggle+0x58>
		}
		else if(flag==1)
    3100:	80 91 96 00 	lds	r24, 0x0096
    3104:	81 30       	cpi	r24, 0x01	; 1
    3106:	61 f4       	brne	.+24     	; 0x3120 <HLED_Errorstate_Led_Toggle+0x58>
		{

			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    3108:	ea 81       	ldd	r30, Y+2	; 0x02
    310a:	fb 81       	ldd	r31, Y+3	; 0x03
    310c:	80 81       	ld	r24, Z
    310e:	ea 81       	ldd	r30, Y+2	; 0x02
    3110:	fb 81       	ldd	r31, Y+3	; 0x03
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	69 2f       	mov	r22, r25
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
			flag=0;
    311c:	10 92 96 00 	sts	0x0096, r1
		}
		else
		{
			/*do nothing*/
		}
		return Loc_ErrorState_Error_state;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	08 95       	ret

0000312e <HKPD_VidInit>:
				'D'
		}
};
/* keypad init */
void HKPD_VidInit(void)
{
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
	/*Set Row PINS AS AN inPUT*/
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_INPUT);
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	40 e0       	ldi	r20, 0x00	; 0
    313c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_INPUT);
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	61 e0       	ldi	r22, 0x01	; 1
    3144:	40 e0       	ldi	r20, 0x00	; 0
    3146:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_INPUT);
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	62 e0       	ldi	r22, 0x02	; 2
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_INPUT);
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	63 e0       	ldi	r22, 0x03	; 3
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>

	/*Active internal  PULL UP RESISTOR for Row PINS*/
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_HIGH);
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	41 e0       	ldi	r20, 0x01	; 1
    3164:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_HIGH);
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	41 e0       	ldi	r20, 0x01	; 1
    316e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_HIGH);
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	62 e0       	ldi	r22, 0x02	; 2
    3176:	41 e0       	ldi	r20, 0x01	; 1
    3178:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_HIGH);
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	63 e0       	ldi	r22, 0x03	; 3
    3180:	41 e0       	ldi	r20, 0x01	; 1
    3182:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>

	/*Set COLOUM PINS AS AN OUTPUTS*/
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN0,PIN_OUTPUT);
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	64 e0       	ldi	r22, 0x04	; 4
    318a:	41 e0       	ldi	r20, 0x01	; 1
    318c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN1,PIN_OUTPUT);
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	65 e0       	ldi	r22, 0x05	; 5
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN2,PIN_OUTPUT);
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	66 e0       	ldi	r22, 0x06	; 6
    319e:	41 e0       	ldi	r20, 0x01	; 1
    31a0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN3,PIN_OUTPUT);
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	67 e0       	ldi	r22, 0x07	; 7
    31a8:	41 e0       	ldi	r20, 0x01	; 1
    31aa:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>

	/* Set COLOUM PINS initial value --> one*/
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN0,PIN_HIGH);
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	64 e0       	ldi	r22, 0x04	; 4
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN1,PIN_HIGH);
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	65 e0       	ldi	r22, 0x05	; 5
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN2,PIN_HIGH);
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	66 e0       	ldi	r22, 0x06	; 6
    31c6:	41 e0       	ldi	r20, 0x01	; 1
    31c8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN3,PIN_HIGH);
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	67 e0       	ldi	r22, 0x07	; 7
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
}
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <HKPD_uint8GetPressed>:

  /* keypad pressed */

uint8 HKPD_uint8GetPressed(void)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	62 97       	sbiw	r28, 0x12	; 18
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
	uint8 Loc_uint8ColCount=0;
    31f0:	19 8a       	std	Y+17, r1	; 0x11
	uint8 Loc_uint8RowCount=0;
    31f2:	18 8a       	std	Y+16, r1	; 0x10
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;
    31f4:	8f ef       	ldi	r24, 0xFF	; 255
    31f6:	8f 87       	std	Y+15, r24	; 0x0f

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    31f8:	84 e0       	ldi	r24, 0x04	; 4
    31fa:	89 8b       	std	Y+17, r24	; 0x11
    31fc:	b4 c0       	rjmp	.+360    	; 0x3366 <HKPD_uint8GetPressed+0x18a>
	{
		/*Select COLOUM*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	69 89       	ldd	r22, Y+17	; 0x11
    3202:	40 e0       	ldi	r20, 0x00	; 0
    3204:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    3208:	18 8a       	std	Y+16, r1	; 0x10
    320a:	a1 c0       	rjmp	.+322    	; 0x334e <HKPD_uint8GetPressed+0x172>
		{
			MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    320c:	9e 01       	movw	r18, r28
    320e:	2e 5e       	subi	r18, 0xEE	; 238
    3210:	3f 4f       	sbci	r19, 0xFF	; 255
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	68 89       	ldd	r22, Y+16	; 0x10
    3216:	a9 01       	movw	r20, r18
    3218:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <MDIO_Errorstate_GetPinValue>

			if(Loc_uint8KeyState==0)
    321c:	8a 89       	ldd	r24, Y+18	; 0x12
    321e:	88 23       	and	r24, r24
    3220:	a9 f4       	brne	.+42     	; 0x324c <HKPD_uint8GetPressed+0x70>
			{
				Loc_uint8KeyValue=KPD_uint8Values[Loc_uint8ColCount-HKPD_COLINIT][Loc_uint8RowCount-HKPD_ROWINIT];
    3222:	89 89       	ldd	r24, Y+17	; 0x11
    3224:	88 2f       	mov	r24, r24
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	ac 01       	movw	r20, r24
    322a:	44 50       	subi	r20, 0x04	; 4
    322c:	50 40       	sbci	r21, 0x00	; 0
    322e:	88 89       	ldd	r24, Y+16	; 0x10
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	ca 01       	movw	r24, r20
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	82 0f       	add	r24, r18
    3240:	93 1f       	adc	r25, r19
    3242:	fc 01       	movw	r30, r24
    3244:	ee 57       	subi	r30, 0x7E	; 126
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	8f 87       	std	Y+15, r24	; 0x0f
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	a0 ea       	ldi	r26, 0xA0	; 160
    3252:	b1 e4       	ldi	r27, 0x41	; 65
    3254:	8b 87       	std	Y+11, r24	; 0x0b
    3256:	9c 87       	std	Y+12, r25	; 0x0c
    3258:	ad 87       	std	Y+13, r26	; 0x0d
    325a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325c:	6b 85       	ldd	r22, Y+11	; 0x0b
    325e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3260:	8d 85       	ldd	r24, Y+13	; 0x0d
    3262:	9e 85       	ldd	r25, Y+14	; 0x0e
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4a e7       	ldi	r20, 0x7A	; 122
    326a:	55 e4       	ldi	r21, 0x45	; 69
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	8f 83       	std	Y+7, r24	; 0x07
    3276:	98 87       	std	Y+8, r25	; 0x08
    3278:	a9 87       	std	Y+9, r26	; 0x09
    327a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    327c:	6f 81       	ldd	r22, Y+7	; 0x07
    327e:	78 85       	ldd	r23, Y+8	; 0x08
    3280:	89 85       	ldd	r24, Y+9	; 0x09
    3282:	9a 85       	ldd	r25, Y+10	; 0x0a
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e8       	ldi	r20, 0x80	; 128
    328a:	5f e3       	ldi	r21, 0x3F	; 63
    328c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3290:	88 23       	and	r24, r24
    3292:	2c f4       	brge	.+10     	; 0x329e <HKPD_uint8GetPressed+0xc2>
		__ticks = 1;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
    329c:	3f c0       	rjmp	.+126    	; 0x331c <HKPD_uint8GetPressed+0x140>
	else if (__tmp > 65535)
    329e:	6f 81       	ldd	r22, Y+7	; 0x07
    32a0:	78 85       	ldd	r23, Y+8	; 0x08
    32a2:	89 85       	ldd	r24, Y+9	; 0x09
    32a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	3f ef       	ldi	r19, 0xFF	; 255
    32aa:	4f e7       	ldi	r20, 0x7F	; 127
    32ac:	57 e4       	ldi	r21, 0x47	; 71
    32ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b2:	18 16       	cp	r1, r24
    32b4:	4c f5       	brge	.+82     	; 0x3308 <HKPD_uint8GetPressed+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    32bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e2       	ldi	r20, 0x20	; 32
    32c4:	51 e4       	ldi	r21, 0x41	; 65
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	bc 01       	movw	r22, r24
    32d0:	cd 01       	movw	r24, r26
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9e 83       	std	Y+6, r25	; 0x06
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	0f c0       	rjmp	.+30     	; 0x32fe <HKPD_uint8GetPressed+0x122>
    32e0:	80 e9       	ldi	r24, 0x90	; 144
    32e2:	91 e0       	ldi	r25, 0x01	; 1
    32e4:	9c 83       	std	Y+4, r25	; 0x04
    32e6:	8b 83       	std	Y+3, r24	; 0x03
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9c 81       	ldd	r25, Y+4	; 0x04
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <HKPD_uint8GetPressed+0x110>
    32f0:	9c 83       	std	Y+4, r25	; 0x04
    32f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f4:	8d 81       	ldd	r24, Y+5	; 0x05
    32f6:	9e 81       	ldd	r25, Y+6	; 0x06
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	9e 83       	std	Y+6, r25	; 0x06
    32fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	69 f7       	brne	.-38     	; 0x32e0 <HKPD_uint8GetPressed+0x104>
    3306:	1d c0       	rjmp	.+58     	; 0x3342 <HKPD_uint8GetPressed+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3308:	6f 81       	ldd	r22, Y+7	; 0x07
    330a:	78 85       	ldd	r23, Y+8	; 0x08
    330c:	89 85       	ldd	r24, Y+9	; 0x09
    330e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	9a 81       	ldd	r25, Y+2	; 0x02
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <HKPD_uint8GetPressed+0x14c>
    332c:	9a 83       	std	Y+2, r25	; 0x02
    332e:	89 83       	std	Y+1, r24	; 0x01
    3330:	08 c0       	rjmp	.+16     	; 0x3342 <HKPD_uint8GetPressed+0x166>
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
			{
				MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    3332:	9e 01       	movw	r18, r28
    3334:	2e 5e       	subi	r18, 0xEE	; 238
    3336:	3f 4f       	sbci	r19, 0xFF	; 255
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	68 89       	ldd	r22, Y+16	; 0x10
    333c:	a9 01       	movw	r20, r18
    333e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <MDIO_Errorstate_GetPinValue>

			/* DE_POuncing*/
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
    3342:	8a 89       	ldd	r24, Y+18	; 0x12
    3344:	88 23       	and	r24, r24
    3346:	a9 f3       	breq	.-22     	; 0x3332 <HKPD_uint8GetPressed+0x156>

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    3348:	88 89       	ldd	r24, Y+16	; 0x10
    334a:	8f 5f       	subi	r24, 0xFF	; 255
    334c:	88 8b       	std	Y+16, r24	; 0x10
    334e:	88 89       	ldd	r24, Y+16	; 0x10
    3350:	84 30       	cpi	r24, 0x04	; 4
    3352:	08 f4       	brcc	.+2      	; 0x3356 <HKPD_uint8GetPressed+0x17a>
    3354:	5b cf       	rjmp	.-330    	; 0x320c <HKPD_uint8GetPressed+0x30>
			}
		}

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	69 89       	ldd	r22, Y+17	; 0x11
    335a:	41 e0       	ldi	r20, 0x01	; 1
    335c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	uint8 Loc_uint8ColCount=0;
	uint8 Loc_uint8RowCount=0;
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    3360:	89 89       	ldd	r24, Y+17	; 0x11
    3362:	8f 5f       	subi	r24, 0xFF	; 255
    3364:	89 8b       	std	Y+17, r24	; 0x11
    3366:	89 89       	ldd	r24, Y+17	; 0x11
    3368:	88 30       	cpi	r24, 0x08	; 8
    336a:	08 f4       	brcc	.+2      	; 0x336e <HKPD_uint8GetPressed+0x192>
    336c:	48 cf       	rjmp	.-368    	; 0x31fe <HKPD_uint8GetPressed+0x22>

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
	}
	return Loc_uint8KeyValue;
    336e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3370:	62 96       	adiw	r28, 0x12	; 18
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <HAL_VidHCLCD_4BitModeWriteCommand>:
#include"HCLCD_Config.h"
#define F_CPU   16000000UL
#include"util/delay.h"

void HAL_VidHCLCD_4BitModeWriteCommand(uint8 Copy_uint8Command)
{
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	2f 97       	sbiw	r28, 0x0f	; 15
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	8f 87       	std	Y+15, r24	; 0x0f
	/*Select Command Register-->LOW*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_LOW);
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	61 e0       	ldi	r22, 0x01	; 1
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	62 e0       	ldi	r22, 0x02	; 2
    33a6:	40 e0       	ldi	r20, 0x00	; 0
    33a8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	/*Send Command*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,Copy_uint8Command);
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    33b0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	63 e0       	ldi	r22, 0x03	; 3
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	a0 e0       	ldi	r26, 0x00	; 0
    33c4:	b0 e4       	ldi	r27, 0x40	; 64
    33c6:	8b 87       	std	Y+11, r24	; 0x0b
    33c8:	9c 87       	std	Y+12, r25	; 0x0c
    33ca:	ad 87       	std	Y+13, r26	; 0x0d
    33cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	4a e7       	ldi	r20, 0x7A	; 122
    33dc:	55 e4       	ldi	r21, 0x45	; 69
    33de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	8f 83       	std	Y+7, r24	; 0x07
    33e8:	98 87       	std	Y+8, r25	; 0x08
    33ea:	a9 87       	std	Y+9, r26	; 0x09
    33ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33ee:	6f 81       	ldd	r22, Y+7	; 0x07
    33f0:	78 85       	ldd	r23, Y+8	; 0x08
    33f2:	89 85       	ldd	r24, Y+9	; 0x09
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e8       	ldi	r20, 0x80	; 128
    33fc:	5f e3       	ldi	r21, 0x3F	; 63
    33fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3402:	88 23       	and	r24, r24
    3404:	2c f4       	brge	.+10     	; 0x3410 <HAL_VidHCLCD_4BitModeWriteCommand+0x8e>
		__ticks = 1;
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9e 83       	std	Y+6, r25	; 0x06
    340c:	8d 83       	std	Y+5, r24	; 0x05
    340e:	3f c0       	rjmp	.+126    	; 0x348e <HAL_VidHCLCD_4BitModeWriteCommand+0x10c>
	else if (__tmp > 65535)
    3410:	6f 81       	ldd	r22, Y+7	; 0x07
    3412:	78 85       	ldd	r23, Y+8	; 0x08
    3414:	89 85       	ldd	r24, Y+9	; 0x09
    3416:	9a 85       	ldd	r25, Y+10	; 0x0a
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	3f ef       	ldi	r19, 0xFF	; 255
    341c:	4f e7       	ldi	r20, 0x7F	; 127
    341e:	57 e4       	ldi	r21, 0x47	; 71
    3420:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3424:	18 16       	cp	r1, r24
    3426:	4c f5       	brge	.+82     	; 0x347a <HAL_VidHCLCD_4BitModeWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3428:	6b 85       	ldd	r22, Y+11	; 0x0b
    342a:	7c 85       	ldd	r23, Y+12	; 0x0c
    342c:	8d 85       	ldd	r24, Y+13	; 0x0d
    342e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e2       	ldi	r20, 0x20	; 32
    3436:	51 e4       	ldi	r21, 0x41	; 65
    3438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	bc 01       	movw	r22, r24
    3442:	cd 01       	movw	r24, r26
    3444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	0f c0       	rjmp	.+30     	; 0x3470 <HAL_VidHCLCD_4BitModeWriteCommand+0xee>
    3452:	80 e9       	ldi	r24, 0x90	; 144
    3454:	91 e0       	ldi	r25, 0x01	; 1
    3456:	9c 83       	std	Y+4, r25	; 0x04
    3458:	8b 83       	std	Y+3, r24	; 0x03
    345a:	8b 81       	ldd	r24, Y+3	; 0x03
    345c:	9c 81       	ldd	r25, Y+4	; 0x04
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <HAL_VidHCLCD_4BitModeWriteCommand+0xdc>
    3462:	9c 83       	std	Y+4, r25	; 0x04
    3464:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3466:	8d 81       	ldd	r24, Y+5	; 0x05
    3468:	9e 81       	ldd	r25, Y+6	; 0x06
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	9e 83       	std	Y+6, r25	; 0x06
    346e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3470:	8d 81       	ldd	r24, Y+5	; 0x05
    3472:	9e 81       	ldd	r25, Y+6	; 0x06
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	69 f7       	brne	.-38     	; 0x3452 <HAL_VidHCLCD_4BitModeWriteCommand+0xd0>
    3478:	14 c0       	rjmp	.+40     	; 0x34a2 <HAL_VidHCLCD_4BitModeWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347a:	6f 81       	ldd	r22, Y+7	; 0x07
    347c:	78 85       	ldd	r23, Y+8	; 0x08
    347e:	89 85       	ldd	r24, Y+9	; 0x09
    3480:	9a 85       	ldd	r25, Y+10	; 0x0a
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9e 83       	std	Y+6, r25	; 0x06
    348c:	8d 83       	std	Y+5, r24	; 0x05
    348e:	8d 81       	ldd	r24, Y+5	; 0x05
    3490:	9e 81       	ldd	r25, Y+6	; 0x06
    3492:	9a 83       	std	Y+2, r25	; 0x02
    3494:	89 83       	std	Y+1, r24	; 0x01
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	9a 81       	ldd	r25, Y+2	; 0x02
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <HAL_VidHCLCD_4BitModeWriteCommand+0x118>
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	63 e0       	ldi	r22, 0x03	; 3
    34a6:	40 e0       	ldi	r20, 0x00	; 0
    34a8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
}
    34ac:	2f 96       	adiw	r28, 0x0f	; 15
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <HAL_VidHCLCD_4BitModeWriteChar>:
void HAL_VidHCLCD_4BitModeWriteChar(uint8 Copy_uint8Char)
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	6d 97       	sbiw	r28, 0x1d	; 29
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data Register-->HIGH*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_HIGH);
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	61 e0       	ldi	r22, 0x01	; 1
    34d8:	41 e0       	ldi	r20, 0x01	; 1
    34da:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	62 e0       	ldi	r22, 0x02	; 2
    34e2:	40 e0       	ldi	r20, 0x00	; 0
    34e4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	/*Send 4 Most Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char&0xF0));
    34e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34ea:	98 2f       	mov	r25, r24
    34ec:	90 7f       	andi	r25, 0xF0	; 240
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	69 2f       	mov	r22, r25
    34f2:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	63 e0       	ldi	r22, 0x03	; 3
    34fa:	41 e0       	ldi	r20, 0x01	; 1
    34fc:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	a0 e0       	ldi	r26, 0x00	; 0
    3506:	b0 e4       	ldi	r27, 0x40	; 64
    3508:	89 8f       	std	Y+25, r24	; 0x19
    350a:	9a 8f       	std	Y+26, r25	; 0x1a
    350c:	ab 8f       	std	Y+27, r26	; 0x1b
    350e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3510:	69 8d       	ldd	r22, Y+25	; 0x19
    3512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	4a e7       	ldi	r20, 0x7A	; 122
    351e:	55 e4       	ldi	r21, 0x45	; 69
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	8d 8b       	std	Y+21, r24	; 0x15
    352a:	9e 8b       	std	Y+22, r25	; 0x16
    352c:	af 8b       	std	Y+23, r26	; 0x17
    352e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3530:	6d 89       	ldd	r22, Y+21	; 0x15
    3532:	7e 89       	ldd	r23, Y+22	; 0x16
    3534:	8f 89       	ldd	r24, Y+23	; 0x17
    3536:	98 8d       	ldd	r25, Y+24	; 0x18
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e8       	ldi	r20, 0x80	; 128
    353e:	5f e3       	ldi	r21, 0x3F	; 63
    3540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3544:	88 23       	and	r24, r24
    3546:	2c f4       	brge	.+10     	; 0x3552 <HAL_VidHCLCD_4BitModeWriteChar+0x94>
		__ticks = 1;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	9c 8b       	std	Y+20, r25	; 0x14
    354e:	8b 8b       	std	Y+19, r24	; 0x13
    3550:	3f c0       	rjmp	.+126    	; 0x35d0 <HAL_VidHCLCD_4BitModeWriteChar+0x112>
	else if (__tmp > 65535)
    3552:	6d 89       	ldd	r22, Y+21	; 0x15
    3554:	7e 89       	ldd	r23, Y+22	; 0x16
    3556:	8f 89       	ldd	r24, Y+23	; 0x17
    3558:	98 8d       	ldd	r25, Y+24	; 0x18
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	3f ef       	ldi	r19, 0xFF	; 255
    355e:	4f e7       	ldi	r20, 0x7F	; 127
    3560:	57 e4       	ldi	r21, 0x47	; 71
    3562:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3566:	18 16       	cp	r1, r24
    3568:	4c f5       	brge	.+82     	; 0x35bc <HAL_VidHCLCD_4BitModeWriteChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356a:	69 8d       	ldd	r22, Y+25	; 0x19
    356c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    356e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3570:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e2       	ldi	r20, 0x20	; 32
    3578:	51 e4       	ldi	r21, 0x41	; 65
    357a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	bc 01       	movw	r22, r24
    3584:	cd 01       	movw	r24, r26
    3586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	9c 8b       	std	Y+20, r25	; 0x14
    3590:	8b 8b       	std	Y+19, r24	; 0x13
    3592:	0f c0       	rjmp	.+30     	; 0x35b2 <HAL_VidHCLCD_4BitModeWriteChar+0xf4>
    3594:	80 e9       	ldi	r24, 0x90	; 144
    3596:	91 e0       	ldi	r25, 0x01	; 1
    3598:	9a 8b       	std	Y+18, r25	; 0x12
    359a:	89 8b       	std	Y+17, r24	; 0x11
    359c:	89 89       	ldd	r24, Y+17	; 0x11
    359e:	9a 89       	ldd	r25, Y+18	; 0x12
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <HAL_VidHCLCD_4BitModeWriteChar+0xe2>
    35a4:	9a 8b       	std	Y+18, r25	; 0x12
    35a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a8:	8b 89       	ldd	r24, Y+19	; 0x13
    35aa:	9c 89       	ldd	r25, Y+20	; 0x14
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	9c 8b       	std	Y+20, r25	; 0x14
    35b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b2:	8b 89       	ldd	r24, Y+19	; 0x13
    35b4:	9c 89       	ldd	r25, Y+20	; 0x14
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	69 f7       	brne	.-38     	; 0x3594 <HAL_VidHCLCD_4BitModeWriteChar+0xd6>
    35ba:	14 c0       	rjmp	.+40     	; 0x35e4 <HAL_VidHCLCD_4BitModeWriteChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35bc:	6d 89       	ldd	r22, Y+21	; 0x15
    35be:	7e 89       	ldd	r23, Y+22	; 0x16
    35c0:	8f 89       	ldd	r24, Y+23	; 0x17
    35c2:	98 8d       	ldd	r25, Y+24	; 0x18
    35c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	9c 8b       	std	Y+20, r25	; 0x14
    35ce:	8b 8b       	std	Y+19, r24	; 0x13
    35d0:	8b 89       	ldd	r24, Y+19	; 0x13
    35d2:	9c 89       	ldd	r25, Y+20	; 0x14
    35d4:	98 8b       	std	Y+16, r25	; 0x10
    35d6:	8f 87       	std	Y+15, r24	; 0x0f
    35d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35da:	98 89       	ldd	r25, Y+16	; 0x10
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	f1 f7       	brne	.-4      	; 0x35dc <HAL_VidHCLCD_4BitModeWriteChar+0x11e>
    35e0:	98 8b       	std	Y+16, r25	; 0x10
    35e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	63 e0       	ldi	r22, 0x03	; 3
    35e8:	40 e0       	ldi	r20, 0x00	; 0
    35ea:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
	/*Send 4 Least Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char<<4));
    35ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35f0:	98 2f       	mov	r25, r24
    35f2:	92 95       	swap	r25
    35f4:	90 7f       	andi	r25, 0xF0	; 240
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	69 2f       	mov	r22, r25
    35fa:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	63 e0       	ldi	r22, 0x03	; 3
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a0 e0       	ldi	r26, 0x00	; 0
    360e:	b0 e4       	ldi	r27, 0x40	; 64
    3610:	8b 87       	std	Y+11, r24	; 0x0b
    3612:	9c 87       	std	Y+12, r25	; 0x0c
    3614:	ad 87       	std	Y+13, r26	; 0x0d
    3616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3618:	6b 85       	ldd	r22, Y+11	; 0x0b
    361a:	7c 85       	ldd	r23, Y+12	; 0x0c
    361c:	8d 85       	ldd	r24, Y+13	; 0x0d
    361e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	4a e7       	ldi	r20, 0x7A	; 122
    3626:	55 e4       	ldi	r21, 0x45	; 69
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	8f 83       	std	Y+7, r24	; 0x07
    3632:	98 87       	std	Y+8, r25	; 0x08
    3634:	a9 87       	std	Y+9, r26	; 0x09
    3636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3638:	6f 81       	ldd	r22, Y+7	; 0x07
    363a:	78 85       	ldd	r23, Y+8	; 0x08
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364c:	88 23       	and	r24, r24
    364e:	2c f4       	brge	.+10     	; 0x365a <HAL_VidHCLCD_4BitModeWriteChar+0x19c>
		__ticks = 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	3f c0       	rjmp	.+126    	; 0x36d8 <HAL_VidHCLCD_4BitModeWriteChar+0x21a>
	else if (__tmp > 65535)
    365a:	6f 81       	ldd	r22, Y+7	; 0x07
    365c:	78 85       	ldd	r23, Y+8	; 0x08
    365e:	89 85       	ldd	r24, Y+9	; 0x09
    3660:	9a 85       	ldd	r25, Y+10	; 0x0a
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	4c f5       	brge	.+82     	; 0x36c4 <HAL_VidHCLCD_4BitModeWriteChar+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3672:	6b 85       	ldd	r22, Y+11	; 0x0b
    3674:	7c 85       	ldd	r23, Y+12	; 0x0c
    3676:	8d 85       	ldd	r24, Y+13	; 0x0d
    3678:	9e 85       	ldd	r25, Y+14	; 0x0e
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e2       	ldi	r20, 0x20	; 32
    3680:	51 e4       	ldi	r21, 0x41	; 65
    3682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9e 83       	std	Y+6, r25	; 0x06
    3698:	8d 83       	std	Y+5, r24	; 0x05
    369a:	0f c0       	rjmp	.+30     	; 0x36ba <HAL_VidHCLCD_4BitModeWriteChar+0x1fc>
    369c:	80 e9       	ldi	r24, 0x90	; 144
    369e:	91 e0       	ldi	r25, 0x01	; 1
    36a0:	9c 83       	std	Y+4, r25	; 0x04
    36a2:	8b 83       	std	Y+3, r24	; 0x03
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	9c 81       	ldd	r25, Y+4	; 0x04
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	f1 f7       	brne	.-4      	; 0x36a8 <HAL_VidHCLCD_4BitModeWriteChar+0x1ea>
    36ac:	9c 83       	std	Y+4, r25	; 0x04
    36ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	9e 83       	std	Y+6, r25	; 0x06
    36b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	69 f7       	brne	.-38     	; 0x369c <HAL_VidHCLCD_4BitModeWriteChar+0x1de>
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <HAL_VidHCLCD_4BitModeWriteChar+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c4:	6f 81       	ldd	r22, Y+7	; 0x07
    36c6:	78 85       	ldd	r23, Y+8	; 0x08
    36c8:	89 85       	ldd	r24, Y+9	; 0x09
    36ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	9e 83       	std	Y+6, r25	; 0x06
    36d6:	8d 83       	std	Y+5, r24	; 0x05
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	9a 83       	std	Y+2, r25	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <HAL_VidHCLCD_4BitModeWriteChar+0x226>
    36e8:	9a 83       	std	Y+2, r25	; 0x02
    36ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	63 e0       	ldi	r22, 0x03	; 3
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <MDIO_Errorstate_SetPinValue>
}
    36f6:	6d 96       	adiw	r28, 0x1d	; 29
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <HAL_VidHCLCD_4BitModeInit>:
void HAL_VidHCLCD_4BitModeInit(void)
{
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	e8 97       	sbiw	r28, 0x38	; 56
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	de bf       	out	0x3e, r29	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	cd bf       	out	0x3d, r28	; 61
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 ef       	ldi	r26, 0xF0	; 240
    3722:	b1 e4       	ldi	r27, 0x41	; 65
    3724:	8d ab       	std	Y+53, r24	; 0x35
    3726:	9e ab       	std	Y+54, r25	; 0x36
    3728:	af ab       	std	Y+55, r26	; 0x37
    372a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372c:	6d a9       	ldd	r22, Y+53	; 0x35
    372e:	7e a9       	ldd	r23, Y+54	; 0x36
    3730:	8f a9       	ldd	r24, Y+55	; 0x37
    3732:	98 ad       	ldd	r25, Y+56	; 0x38
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a e7       	ldi	r20, 0x7A	; 122
    373a:	55 e4       	ldi	r21, 0x45	; 69
    373c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	89 ab       	std	Y+49, r24	; 0x31
    3746:	9a ab       	std	Y+50, r25	; 0x32
    3748:	ab ab       	std	Y+51, r26	; 0x33
    374a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    374c:	69 a9       	ldd	r22, Y+49	; 0x31
    374e:	7a a9       	ldd	r23, Y+50	; 0x32
    3750:	8b a9       	ldd	r24, Y+51	; 0x33
    3752:	9c a9       	ldd	r25, Y+52	; 0x34
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	2c f4       	brge	.+10     	; 0x376e <HAL_VidHCLCD_4BitModeInit+0x66>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	98 ab       	std	Y+48, r25	; 0x30
    376a:	8f a7       	std	Y+47, r24	; 0x2f
    376c:	3f c0       	rjmp	.+126    	; 0x37ec <HAL_VidHCLCD_4BitModeInit+0xe4>
	else if (__tmp > 65535)
    376e:	69 a9       	ldd	r22, Y+49	; 0x31
    3770:	7a a9       	ldd	r23, Y+50	; 0x32
    3772:	8b a9       	ldd	r24, Y+51	; 0x33
    3774:	9c a9       	ldd	r25, Y+52	; 0x34
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	4f e7       	ldi	r20, 0x7F	; 127
    377c:	57 e4       	ldi	r21, 0x47	; 71
    377e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3782:	18 16       	cp	r1, r24
    3784:	4c f5       	brge	.+82     	; 0x37d8 <HAL_VidHCLCD_4BitModeInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3786:	6d a9       	ldd	r22, Y+53	; 0x35
    3788:	7e a9       	ldd	r23, Y+54	; 0x36
    378a:	8f a9       	ldd	r24, Y+55	; 0x37
    378c:	98 ad       	ldd	r25, Y+56	; 0x38
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e2       	ldi	r20, 0x20	; 32
    3794:	51 e4       	ldi	r21, 0x41	; 65
    3796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	98 ab       	std	Y+48, r25	; 0x30
    37ac:	8f a7       	std	Y+47, r24	; 0x2f
    37ae:	0f c0       	rjmp	.+30     	; 0x37ce <HAL_VidHCLCD_4BitModeInit+0xc6>
    37b0:	80 e9       	ldi	r24, 0x90	; 144
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	9e a7       	std	Y+46, r25	; 0x2e
    37b6:	8d a7       	std	Y+45, r24	; 0x2d
    37b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    37ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <HAL_VidHCLCD_4BitModeInit+0xb4>
    37c0:	9e a7       	std	Y+46, r25	; 0x2e
    37c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    37c6:	98 a9       	ldd	r25, Y+48	; 0x30
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	98 ab       	std	Y+48, r25	; 0x30
    37cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    37d0:	98 a9       	ldd	r25, Y+48	; 0x30
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	69 f7       	brne	.-38     	; 0x37b0 <HAL_VidHCLCD_4BitModeInit+0xa8>
    37d6:	14 c0       	rjmp	.+40     	; 0x3800 <HAL_VidHCLCD_4BitModeInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	69 a9       	ldd	r22, Y+49	; 0x31
    37da:	7a a9       	ldd	r23, Y+50	; 0x32
    37dc:	8b a9       	ldd	r24, Y+51	; 0x33
    37de:	9c a9       	ldd	r25, Y+52	; 0x34
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	98 ab       	std	Y+48, r25	; 0x30
    37ea:	8f a7       	std	Y+47, r24	; 0x2f
    37ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ee:	98 a9       	ldd	r25, Y+48	; 0x30
    37f0:	9c a7       	std	Y+44, r25	; 0x2c
    37f2:	8b a7       	std	Y+43, r24	; 0x2b
    37f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    37f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <HAL_VidHCLCD_4BitModeInit+0xf0>
    37fc:	9c a7       	std	Y+44, r25	; 0x2c
    37fe:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait 30ms*/
	_delay_ms(30);
	/*send Function set command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    3800:	80 e2       	ldi	r24, 0x20	; 32
    3802:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    3806:	80 e2       	ldi	r24, 0x20	; 32
    3808:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET<<4));
    380c:	80 e8       	ldi	r24, 0x80	; 128
    380e:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	a0 e8       	ldi	r26, 0x80	; 128
    3818:	bf e3       	ldi	r27, 0x3F	; 63
    381a:	8f a3       	std	Y+39, r24	; 0x27
    381c:	98 a7       	std	Y+40, r25	; 0x28
    381e:	a9 a7       	std	Y+41, r26	; 0x29
    3820:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3822:	6f a1       	ldd	r22, Y+39	; 0x27
    3824:	78 a5       	ldd	r23, Y+40	; 0x28
    3826:	89 a5       	ldd	r24, Y+41	; 0x29
    3828:	9a a5       	ldd	r25, Y+42	; 0x2a
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	4a e7       	ldi	r20, 0x7A	; 122
    3830:	55 e4       	ldi	r21, 0x45	; 69
    3832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	8b a3       	std	Y+35, r24	; 0x23
    383c:	9c a3       	std	Y+36, r25	; 0x24
    383e:	ad a3       	std	Y+37, r26	; 0x25
    3840:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3842:	6b a1       	ldd	r22, Y+35	; 0x23
    3844:	7c a1       	ldd	r23, Y+36	; 0x24
    3846:	8d a1       	ldd	r24, Y+37	; 0x25
    3848:	9e a1       	ldd	r25, Y+38	; 0x26
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e8       	ldi	r20, 0x80	; 128
    3850:	5f e3       	ldi	r21, 0x3F	; 63
    3852:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3856:	88 23       	and	r24, r24
    3858:	2c f4       	brge	.+10     	; 0x3864 <HAL_VidHCLCD_4BitModeInit+0x15c>
		__ticks = 1;
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9a a3       	std	Y+34, r25	; 0x22
    3860:	89 a3       	std	Y+33, r24	; 0x21
    3862:	3f c0       	rjmp	.+126    	; 0x38e2 <HAL_VidHCLCD_4BitModeInit+0x1da>
	else if (__tmp > 65535)
    3864:	6b a1       	ldd	r22, Y+35	; 0x23
    3866:	7c a1       	ldd	r23, Y+36	; 0x24
    3868:	8d a1       	ldd	r24, Y+37	; 0x25
    386a:	9e a1       	ldd	r25, Y+38	; 0x26
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	3f ef       	ldi	r19, 0xFF	; 255
    3870:	4f e7       	ldi	r20, 0x7F	; 127
    3872:	57 e4       	ldi	r21, 0x47	; 71
    3874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3878:	18 16       	cp	r1, r24
    387a:	4c f5       	brge	.+82     	; 0x38ce <HAL_VidHCLCD_4BitModeInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387c:	6f a1       	ldd	r22, Y+39	; 0x27
    387e:	78 a5       	ldd	r23, Y+40	; 0x28
    3880:	89 a5       	ldd	r24, Y+41	; 0x29
    3882:	9a a5       	ldd	r25, Y+42	; 0x2a
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e2       	ldi	r20, 0x20	; 32
    388a:	51 e4       	ldi	r21, 0x41	; 65
    388c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	9a a3       	std	Y+34, r25	; 0x22
    38a2:	89 a3       	std	Y+33, r24	; 0x21
    38a4:	0f c0       	rjmp	.+30     	; 0x38c4 <HAL_VidHCLCD_4BitModeInit+0x1bc>
    38a6:	80 e9       	ldi	r24, 0x90	; 144
    38a8:	91 e0       	ldi	r25, 0x01	; 1
    38aa:	98 a3       	std	Y+32, r25	; 0x20
    38ac:	8f 8f       	std	Y+31, r24	; 0x1f
    38ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38b0:	98 a1       	ldd	r25, Y+32	; 0x20
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	f1 f7       	brne	.-4      	; 0x38b2 <HAL_VidHCLCD_4BitModeInit+0x1aa>
    38b6:	98 a3       	std	Y+32, r25	; 0x20
    38b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ba:	89 a1       	ldd	r24, Y+33	; 0x21
    38bc:	9a a1       	ldd	r25, Y+34	; 0x22
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	9a a3       	std	Y+34, r25	; 0x22
    38c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c4:	89 a1       	ldd	r24, Y+33	; 0x21
    38c6:	9a a1       	ldd	r25, Y+34	; 0x22
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	69 f7       	brne	.-38     	; 0x38a6 <HAL_VidHCLCD_4BitModeInit+0x19e>
    38cc:	14 c0       	rjmp	.+40     	; 0x38f6 <HAL_VidHCLCD_4BitModeInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ce:	6b a1       	ldd	r22, Y+35	; 0x23
    38d0:	7c a1       	ldd	r23, Y+36	; 0x24
    38d2:	8d a1       	ldd	r24, Y+37	; 0x25
    38d4:	9e a1       	ldd	r25, Y+38	; 0x26
    38d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	9a a3       	std	Y+34, r25	; 0x22
    38e0:	89 a3       	std	Y+33, r24	; 0x21
    38e2:	89 a1       	ldd	r24, Y+33	; 0x21
    38e4:	9a a1       	ldd	r25, Y+34	; 0x22
    38e6:	9e 8f       	std	Y+30, r25	; 0x1e
    38e8:	8d 8f       	std	Y+29, r24	; 0x1d
    38ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	f1 f7       	brne	.-4      	; 0x38ee <HAL_VidHCLCD_4BitModeInit+0x1e6>
    38f2:	9e 8f       	std	Y+30, r25	; 0x1e
    38f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Send Display on off command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF&0xF0));
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF<<4));
    38fc:	80 ef       	ldi	r24, 0xF0	; 240
    38fe:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	a0 e8       	ldi	r26, 0x80	; 128
    3908:	bf e3       	ldi	r27, 0x3F	; 63
    390a:	89 8f       	std	Y+25, r24	; 0x19
    390c:	9a 8f       	std	Y+26, r25	; 0x1a
    390e:	ab 8f       	std	Y+27, r26	; 0x1b
    3910:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3912:	69 8d       	ldd	r22, Y+25	; 0x19
    3914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	4a e7       	ldi	r20, 0x7A	; 122
    3920:	55 e4       	ldi	r21, 0x45	; 69
    3922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	8d 8b       	std	Y+21, r24	; 0x15
    392c:	9e 8b       	std	Y+22, r25	; 0x16
    392e:	af 8b       	std	Y+23, r26	; 0x17
    3930:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3932:	6d 89       	ldd	r22, Y+21	; 0x15
    3934:	7e 89       	ldd	r23, Y+22	; 0x16
    3936:	8f 89       	ldd	r24, Y+23	; 0x17
    3938:	98 8d       	ldd	r25, Y+24	; 0x18
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	40 e8       	ldi	r20, 0x80	; 128
    3940:	5f e3       	ldi	r21, 0x3F	; 63
    3942:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3946:	88 23       	and	r24, r24
    3948:	2c f4       	brge	.+10     	; 0x3954 <HAL_VidHCLCD_4BitModeInit+0x24c>
		__ticks = 1;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	9c 8b       	std	Y+20, r25	; 0x14
    3950:	8b 8b       	std	Y+19, r24	; 0x13
    3952:	3f c0       	rjmp	.+126    	; 0x39d2 <HAL_VidHCLCD_4BitModeInit+0x2ca>
	else if (__tmp > 65535)
    3954:	6d 89       	ldd	r22, Y+21	; 0x15
    3956:	7e 89       	ldd	r23, Y+22	; 0x16
    3958:	8f 89       	ldd	r24, Y+23	; 0x17
    395a:	98 8d       	ldd	r25, Y+24	; 0x18
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	3f ef       	ldi	r19, 0xFF	; 255
    3960:	4f e7       	ldi	r20, 0x7F	; 127
    3962:	57 e4       	ldi	r21, 0x47	; 71
    3964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3968:	18 16       	cp	r1, r24
    396a:	4c f5       	brge	.+82     	; 0x39be <HAL_VidHCLCD_4BitModeInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396c:	69 8d       	ldd	r22, Y+25	; 0x19
    396e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e2       	ldi	r20, 0x20	; 32
    397a:	51 e4       	ldi	r21, 0x41	; 65
    397c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	bc 01       	movw	r22, r24
    3986:	cd 01       	movw	r24, r26
    3988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	9c 8b       	std	Y+20, r25	; 0x14
    3992:	8b 8b       	std	Y+19, r24	; 0x13
    3994:	0f c0       	rjmp	.+30     	; 0x39b4 <HAL_VidHCLCD_4BitModeInit+0x2ac>
    3996:	80 e9       	ldi	r24, 0x90	; 144
    3998:	91 e0       	ldi	r25, 0x01	; 1
    399a:	9a 8b       	std	Y+18, r25	; 0x12
    399c:	89 8b       	std	Y+17, r24	; 0x11
    399e:	89 89       	ldd	r24, Y+17	; 0x11
    39a0:	9a 89       	ldd	r25, Y+18	; 0x12
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	f1 f7       	brne	.-4      	; 0x39a2 <HAL_VidHCLCD_4BitModeInit+0x29a>
    39a6:	9a 8b       	std	Y+18, r25	; 0x12
    39a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39aa:	8b 89       	ldd	r24, Y+19	; 0x13
    39ac:	9c 89       	ldd	r25, Y+20	; 0x14
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	9c 8b       	std	Y+20, r25	; 0x14
    39b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b4:	8b 89       	ldd	r24, Y+19	; 0x13
    39b6:	9c 89       	ldd	r25, Y+20	; 0x14
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	69 f7       	brne	.-38     	; 0x3996 <HAL_VidHCLCD_4BitModeInit+0x28e>
    39bc:	14 c0       	rjmp	.+40     	; 0x39e6 <HAL_VidHCLCD_4BitModeInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39be:	6d 89       	ldd	r22, Y+21	; 0x15
    39c0:	7e 89       	ldd	r23, Y+22	; 0x16
    39c2:	8f 89       	ldd	r24, Y+23	; 0x17
    39c4:	98 8d       	ldd	r25, Y+24	; 0x18
    39c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	9c 8b       	std	Y+20, r25	; 0x14
    39d0:	8b 8b       	std	Y+19, r24	; 0x13
    39d2:	8b 89       	ldd	r24, Y+19	; 0x13
    39d4:	9c 89       	ldd	r25, Y+20	; 0x14
    39d6:	98 8b       	std	Y+16, r25	; 0x10
    39d8:	8f 87       	std	Y+15, r24	; 0x0f
    39da:	8f 85       	ldd	r24, Y+15	; 0x0f
    39dc:	98 89       	ldd	r25, Y+16	; 0x10
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	f1 f7       	brne	.-4      	; 0x39de <HAL_VidHCLCD_4BitModeInit+0x2d6>
    39e2:	98 8b       	std	Y+16, r25	; 0x10
    39e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR&0xF0));
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR<<4));
    39ec:	80 e1       	ldi	r24, 0x10	; 16
    39ee:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	a0 e0       	ldi	r26, 0x00	; 0
    39f8:	b0 e4       	ldi	r27, 0x40	; 64
    39fa:	8b 87       	std	Y+11, r24	; 0x0b
    39fc:	9c 87       	std	Y+12, r25	; 0x0c
    39fe:	ad 87       	std	Y+13, r26	; 0x0d
    3a00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	4a e7       	ldi	r20, 0x7A	; 122
    3a10:	55 e4       	ldi	r21, 0x45	; 69
    3a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	8f 83       	std	Y+7, r24	; 0x07
    3a1c:	98 87       	std	Y+8, r25	; 0x08
    3a1e:	a9 87       	std	Y+9, r26	; 0x09
    3a20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a22:	6f 81       	ldd	r22, Y+7	; 0x07
    3a24:	78 85       	ldd	r23, Y+8	; 0x08
    3a26:	89 85       	ldd	r24, Y+9	; 0x09
    3a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e8       	ldi	r20, 0x80	; 128
    3a30:	5f e3       	ldi	r21, 0x3F	; 63
    3a32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a36:	88 23       	and	r24, r24
    3a38:	2c f4       	brge	.+10     	; 0x3a44 <HAL_VidHCLCD_4BitModeInit+0x33c>
		__ticks = 1;
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	9e 83       	std	Y+6, r25	; 0x06
    3a40:	8d 83       	std	Y+5, r24	; 0x05
    3a42:	3f c0       	rjmp	.+126    	; 0x3ac2 <HAL_VidHCLCD_4BitModeInit+0x3ba>
	else if (__tmp > 65535)
    3a44:	6f 81       	ldd	r22, Y+7	; 0x07
    3a46:	78 85       	ldd	r23, Y+8	; 0x08
    3a48:	89 85       	ldd	r24, Y+9	; 0x09
    3a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	3f ef       	ldi	r19, 0xFF	; 255
    3a50:	4f e7       	ldi	r20, 0x7F	; 127
    3a52:	57 e4       	ldi	r21, 0x47	; 71
    3a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a58:	18 16       	cp	r1, r24
    3a5a:	4c f5       	brge	.+82     	; 0x3aae <HAL_VidHCLCD_4BitModeInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	40 e2       	ldi	r20, 0x20	; 32
    3a6a:	51 e4       	ldi	r21, 0x41	; 65
    3a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	bc 01       	movw	r22, r24
    3a76:	cd 01       	movw	r24, r26
    3a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	9e 83       	std	Y+6, r25	; 0x06
    3a82:	8d 83       	std	Y+5, r24	; 0x05
    3a84:	0f c0       	rjmp	.+30     	; 0x3aa4 <HAL_VidHCLCD_4BitModeInit+0x39c>
    3a86:	80 e9       	ldi	r24, 0x90	; 144
    3a88:	91 e0       	ldi	r25, 0x01	; 1
    3a8a:	9c 83       	std	Y+4, r25	; 0x04
    3a8c:	8b 83       	std	Y+3, r24	; 0x03
    3a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a90:	9c 81       	ldd	r25, Y+4	; 0x04
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <HAL_VidHCLCD_4BitModeInit+0x38a>
    3a96:	9c 83       	std	Y+4, r25	; 0x04
    3a98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	9e 83       	std	Y+6, r25	; 0x06
    3aa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	69 f7       	brne	.-38     	; 0x3a86 <HAL_VidHCLCD_4BitModeInit+0x37e>
    3aac:	14 c0       	rjmp	.+40     	; 0x3ad6 <HAL_VidHCLCD_4BitModeInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aae:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab0:	78 85       	ldd	r23, Y+8	; 0x08
    3ab2:	89 85       	ldd	r24, Y+9	; 0x09
    3ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	9e 83       	std	Y+6, r25	; 0x06
    3ac0:	8d 83       	std	Y+5, r24	; 0x05
    3ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac6:	9a 83       	std	Y+2, r25	; 0x02
    3ac8:	89 83       	std	Y+1, r24	; 0x01
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	f1 f7       	brne	.-4      	; 0x3ace <HAL_VidHCLCD_4BitModeInit+0x3c6>
    3ad2:	9a 83       	std	Y+2, r25	; 0x02
    3ad4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE&0xF0));
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE<<4));
    3adc:	80 e6       	ldi	r24, 0x60	; 96
    3ade:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    3ae2:	e8 96       	adiw	r28, 0x38	; 56
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	08 95       	ret

00003af4 <HAL_VidHCLCD_4BitModeSendCommand>:
void HAL_VidHCLCD_4BitModeSendCommand(uint8 Copy_uint8Command)
{
    3af4:	df 93       	push	r29
    3af6:	cf 93       	push	r28
    3af8:	0f 92       	push	r0
    3afa:	cd b7       	in	r28, 0x3d	; 61
    3afc:	de b7       	in	r29, 0x3e	; 62
    3afe:	89 83       	std	Y+1, r24	; 0x01
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command&0xF0));
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	80 7f       	andi	r24, 0xF0	; 240
    3b04:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command<<4));
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	82 95       	swap	r24
    3b0c:	80 7f       	andi	r24, 0xF0	; 240
    3b0e:	0e 94 c1 19 	call	0x3382	; 0x3382 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    3b12:	0f 90       	pop	r0
    3b14:	cf 91       	pop	r28
    3b16:	df 91       	pop	r29
    3b18:	08 95       	ret

00003b1a <HAL_VidHCLCD_4BitModeWriteString>:
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	00 d0       	rcall	.+0      	; 0x3b20 <HAL_VidHCLCD_4BitModeWriteString+0x6>
    3b20:	0f 92       	push	r0
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	9b 83       	std	Y+3, r25	; 0x03
    3b28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loc_uint8Count=0;
    3b2a:	19 82       	std	Y+1, r1	; 0x01
    3b2c:	0e c0       	rjmp	.+28     	; 0x3b4a <HAL_VidHCLCD_4BitModeWriteString+0x30>
	while(Copy_uint8String[Loc_uint8Count]!='\0')
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	8a 81       	ldd	r24, Y+2	; 0x02
    3b36:	9b 81       	ldd	r25, Y+3	; 0x03
    3b38:	fc 01       	movw	r30, r24
    3b3a:	e2 0f       	add	r30, r18
    3b3c:	f3 1f       	adc	r31, r19
    3b3e:	80 81       	ld	r24, Z
    3b40:	0e 94 5f 1a 	call	0x34be	; 0x34be <HAL_VidHCLCD_4BitModeWriteChar>
		Loc_uint8Count++;
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	8f 5f       	subi	r24, 0xFF	; 255
    3b48:	89 83       	std	Y+1, r24	; 0x01
}
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
	uint8 Loc_uint8Count=0;
	while(Copy_uint8String[Loc_uint8Count]!='\0')
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	28 2f       	mov	r18, r24
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	8a 81       	ldd	r24, Y+2	; 0x02
    3b52:	9b 81       	ldd	r25, Y+3	; 0x03
    3b54:	fc 01       	movw	r30, r24
    3b56:	e2 0f       	add	r30, r18
    3b58:	f3 1f       	adc	r31, r19
    3b5a:	80 81       	ld	r24, Z
    3b5c:	88 23       	and	r24, r24
    3b5e:	39 f7       	brne	.-50     	; 0x3b2e <HAL_VidHCLCD_4BitModeWriteString+0x14>
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
		Loc_uint8Count++;
	}
}
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <HAL_VidHCLCD_4BitModeWriteNumber>:
/*1234*/
void HAL_VidHCLCD_4BitModeWriteNumber(uint32 Copy_uint32Number)
{
    3b6c:	0f 93       	push	r16
    3b6e:	1f 93       	push	r17
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
    3b78:	65 97       	sbiw	r28, 0x15	; 21
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	de bf       	out	0x3e, r29	; 62
    3b80:	0f be       	out	0x3f, r0	; 63
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	6a 8b       	std	Y+18, r22	; 0x12
    3b86:	7b 8b       	std	Y+19, r23	; 0x13
    3b88:	8c 8b       	std	Y+20, r24	; 0x14
    3b8a:	9d 8b       	std	Y+21, r25	; 0x15
	uint8 Loc_uint8Digits[16];
	sint8 Loc_sint8Count=0;
    3b8c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint32Number==0)
    3b8e:	8a 89       	ldd	r24, Y+18	; 0x12
    3b90:	9b 89       	ldd	r25, Y+19	; 0x13
    3b92:	ac 89       	ldd	r26, Y+20	; 0x14
    3b94:	bd 89       	ldd	r27, Y+21	; 0x15
    3b96:	00 97       	sbiw	r24, 0x00	; 0
    3b98:	a1 05       	cpc	r26, r1
    3b9a:	b1 05       	cpc	r27, r1
    3b9c:	99 f5       	brne	.+102    	; 0x3c04 <HAL_VidHCLCD_4BitModeWriteNumber+0x98>
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
    3b9e:	80 e3       	ldi	r24, 0x30	; 48
    3ba0:	0e 94 5f 1a 	call	0x34be	; 0x34be <HAL_VidHCLCD_4BitModeWriteChar>
    3ba4:	4f c0       	rjmp	.+158    	; 0x3c44 <HAL_VidHCLCD_4BitModeWriteNumber+0xd8>
	}
	else
	{
		while(Copy_uint32Number!=0)
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	08 2f       	mov	r16, r24
    3baa:	11 27       	eor	r17, r17
    3bac:	07 fd       	sbrc	r16, 7
    3bae:	10 95       	com	r17
    3bb0:	8a 89       	ldd	r24, Y+18	; 0x12
    3bb2:	9b 89       	ldd	r25, Y+19	; 0x13
    3bb4:	ac 89       	ldd	r26, Y+20	; 0x14
    3bb6:	bd 89       	ldd	r27, Y+21	; 0x15
    3bb8:	2a e0       	ldi	r18, 0x0A	; 10
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	40 e0       	ldi	r20, 0x00	; 0
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	bc 01       	movw	r22, r24
    3bc2:	cd 01       	movw	r24, r26
    3bc4:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__udivmodsi4>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	28 2f       	mov	r18, r24
    3bce:	ce 01       	movw	r24, r28
    3bd0:	02 96       	adiw	r24, 0x02	; 2
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	e0 0f       	add	r30, r16
    3bd6:	f1 1f       	adc	r31, r17
    3bd8:	20 83       	st	Z, r18
			Copy_uint32Number/=10;
    3bda:	8a 89       	ldd	r24, Y+18	; 0x12
    3bdc:	9b 89       	ldd	r25, Y+19	; 0x13
    3bde:	ac 89       	ldd	r26, Y+20	; 0x14
    3be0:	bd 89       	ldd	r27, Y+21	; 0x15
    3be2:	2a e0       	ldi	r18, 0x0A	; 10
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	bc 01       	movw	r22, r24
    3bec:	cd 01       	movw	r24, r26
    3bee:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__udivmodsi4>
    3bf2:	da 01       	movw	r26, r20
    3bf4:	c9 01       	movw	r24, r18
    3bf6:	8a 8b       	std	Y+18, r24	; 0x12
    3bf8:	9b 8b       	std	Y+19, r25	; 0x13
    3bfa:	ac 8b       	std	Y+20, r26	; 0x14
    3bfc:	bd 8b       	std	Y+21, r27	; 0x15
			Loc_sint8Count++;
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	8f 5f       	subi	r24, 0xFF	; 255
    3c02:	89 83       	std	Y+1, r24	; 0x01
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
	}
	else
	{
		while(Copy_uint32Number!=0)
    3c04:	8a 89       	ldd	r24, Y+18	; 0x12
    3c06:	9b 89       	ldd	r25, Y+19	; 0x13
    3c08:	ac 89       	ldd	r26, Y+20	; 0x14
    3c0a:	bd 89       	ldd	r27, Y+21	; 0x15
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	a1 05       	cpc	r26, r1
    3c10:	b1 05       	cpc	r27, r1
    3c12:	49 f6       	brne	.-110    	; 0x3ba6 <HAL_VidHCLCD_4BitModeWriteNumber+0x3a>
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	81 50       	subi	r24, 0x01	; 1
    3c18:	89 83       	std	Y+1, r24	; 0x01
    3c1a:	11 c0       	rjmp	.+34     	; 0x3c3e <HAL_VidHCLCD_4BitModeWriteNumber+0xd2>
		while(Loc_sint8Count>=0)
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	28 2f       	mov	r18, r24
    3c20:	33 27       	eor	r19, r19
    3c22:	27 fd       	sbrc	r18, 7
    3c24:	30 95       	com	r19
    3c26:	ce 01       	movw	r24, r28
    3c28:	02 96       	adiw	r24, 0x02	; 2
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	e2 0f       	add	r30, r18
    3c2e:	f3 1f       	adc	r31, r19
    3c30:	80 81       	ld	r24, Z
    3c32:	80 5d       	subi	r24, 0xD0	; 208
    3c34:	0e 94 5f 1a 	call	0x34be	; 0x34be <HAL_VidHCLCD_4BitModeWriteChar>
			Loc_sint8Count--;
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	81 50       	subi	r24, 0x01	; 1
    3c3c:	89 83       	std	Y+1, r24	; 0x01
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
		while(Loc_sint8Count>=0)
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	88 23       	and	r24, r24
    3c42:	64 f7       	brge	.-40     	; 0x3c1c <HAL_VidHCLCD_4BitModeWriteNumber+0xb0>
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
			Loc_sint8Count--;
		}
	}
}
    3c44:	65 96       	adiw	r28, 0x15	; 21
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	cf 91       	pop	r28
    3c52:	df 91       	pop	r29
    3c54:	1f 91       	pop	r17
    3c56:	0f 91       	pop	r16
    3c58:	08 95       	ret

00003c5a <HAL_VidHCLCD_4BitModeSetPosition>:
void HAL_VidHCLCD_4BitModeSetPosition(uint8 Copy_uint8LineNum,uint8 Copy_uint8Position)
{
    3c5a:	df 93       	push	r29
    3c5c:	cf 93       	push	r28
    3c5e:	00 d0       	rcall	.+0      	; 0x3c60 <HAL_VidHCLCD_4BitModeSetPosition+0x6>
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	89 83       	std	Y+1, r24	; 0x01
    3c66:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_uint8LineNum==1)
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	81 30       	cpi	r24, 0x01	; 1
    3c6c:	29 f4       	brne	.+10     	; 0x3c78 <HAL_VidHCLCD_4BitModeSetPosition+0x1e>
	{
		HAL_VidHCLCD_4BitModeSendCommand(128+Copy_uint8Position);
    3c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c70:	80 58       	subi	r24, 0x80	; 128
    3c72:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <HAL_VidHCLCD_4BitModeSendCommand>
    3c76:	07 c0       	rjmp	.+14     	; 0x3c86 <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	}
	else if(Copy_uint8LineNum==2)
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	82 30       	cpi	r24, 0x02	; 2
    3c7c:	21 f4       	brne	.+8      	; 0x3c86 <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	{
		HAL_VidHCLCD_4BitModeSendCommand(192+Copy_uint8Position);
    3c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c80:	80 54       	subi	r24, 0x40	; 64
    3c82:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <HAL_VidHCLCD_4BitModeSendCommand>
	}
	else
	{
		/*Do Nothing*/
	}
}
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
    3c8a:	cf 91       	pop	r28
    3c8c:	df 91       	pop	r29
    3c8e:	08 95       	ret

00003c90 <HBUTTON_Errorstate_Button_Init>:
#include"../../LIB/LBIT_MATH.h"
#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HBUTTON_Interface.h"

ErrorState  HBUTTON_Errorstate_Button_Init(Button_t* copy_Button_object)
{
    3c90:	df 93       	push	r29
    3c92:	cf 93       	push	r28
    3c94:	00 d0       	rcall	.+0      	; 0x3c96 <HBUTTON_Errorstate_Button_Init+0x6>
    3c96:	0f 92       	push	r0
    3c98:	cd b7       	in	r28, 0x3d	; 61
    3c9a:	de b7       	in	r29, 0x3e	; 62
    3c9c:	9b 83       	std	Y+3, r25	; 0x03
    3c9e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	89 83       	std	Y+1, r24	; 0x01
		Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,PIN_INPUT);
    3ca4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ca6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ca8:	80 81       	ld	r24, Z
    3caa:	ea 81       	ldd	r30, Y+2	; 0x02
    3cac:	fb 81       	ldd	r31, Y+3	; 0x03
    3cae:	91 81       	ldd	r25, Z+1	; 0x01
    3cb0:	69 2f       	mov	r22, r25
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
    3cb8:	89 83       	std	Y+1, r24	; 0x01
			return Loc_ErrorState_Error_state;
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	cf 91       	pop	r28
    3cc4:	df 91       	pop	r29
    3cc6:	08 95       	ret

00003cc8 <HBUTTON_Errorstate_Button_Pressed>:
ErrorState  HBUTTON_Errorstate_Button_Pressed(Button_t* copy_Button_object)
{
    3cc8:	df 93       	push	r29
    3cca:	cf 93       	push	r28
    3ccc:	00 d0       	rcall	.+0      	; 0x3cce <HBUTTON_Errorstate_Button_Pressed+0x6>
    3cce:	00 d0       	rcall	.+0      	; 0x3cd0 <HBUTTON_Errorstate_Button_Pressed+0x8>
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	9c 83       	std	Y+4, r25	; 0x04
    3cd6:	8b 83       	std	Y+3, r24	; 0x03

	uint8 Loc_Button_State;
	ErrorState Loc_ErrorState_Error_state=OK;
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	89 83       	std	Y+1, r24	; 0x01
	if((copy_Button_object->ButtonActiveState)==PULL_DOWN)/*check 3la button activate state*/
    3cdc:	eb 81       	ldd	r30, Y+3	; 0x03
    3cde:	fc 81       	ldd	r31, Y+4	; 0x04
    3ce0:	82 81       	ldd	r24, Z+2	; 0x02
    3ce2:	88 23       	and	r24, r24
    3ce4:	71 f4       	brne	.+28     	; 0x3d02 <HBUTTON_Errorstate_Button_Pressed+0x3a>
	{
		/*pull down */
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    3ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    3cea:	80 81       	ld	r24, Z
    3cec:	eb 81       	ldd	r30, Y+3	; 0x03
    3cee:	fc 81       	ldd	r31, Y+4	; 0x04
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	9e 01       	movw	r18, r28
    3cf4:	2e 5f       	subi	r18, 0xFE	; 254
    3cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf8:	69 2f       	mov	r22, r25
    3cfa:	a9 01       	movw	r20, r18
    3cfc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <MDIO_Errorstate_GetPinValue>
    3d00:	14 c0       	rjmp	.+40     	; 0x3d2a <HBUTTON_Errorstate_Button_Pressed+0x62>
	}
	else if((copy_Button_object->ButtonActiveState)==PULL_UP)
    3d02:	eb 81       	ldd	r30, Y+3	; 0x03
    3d04:	fc 81       	ldd	r31, Y+4	; 0x04
    3d06:	82 81       	ldd	r24, Z+2	; 0x02
    3d08:	81 30       	cpi	r24, 0x01	; 1
    3d0a:	71 f4       	brne	.+28     	; 0x3d28 <HBUTTON_Errorstate_Button_Pressed+0x60>
	{
		/*internal pull up activate*/
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    3d0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3d0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3d10:	80 81       	ld	r24, Z
    3d12:	eb 81       	ldd	r30, Y+3	; 0x03
    3d14:	fc 81       	ldd	r31, Y+4	; 0x04
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	9e 01       	movw	r18, r28
    3d1a:	2e 5f       	subi	r18, 0xFE	; 254
    3d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1e:	69 2f       	mov	r22, r25
    3d20:	a9 01       	movw	r20, r18
    3d22:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <MDIO_Errorstate_GetPinValue>
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <HBUTTON_Errorstate_Button_Pressed+0x62>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    3d28:	19 82       	std	Y+1, r1	; 0x01
	}

return Loc_ErrorState_Error_state;
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d2c:	0f 90       	pop	r0
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	0f 90       	pop	r0
    3d34:	cf 91       	pop	r28
    3d36:	df 91       	pop	r29
    3d38:	08 95       	ret

00003d3a <main>:
#define F_CPU 16000000UL
#include<util/delay.h>
LED_T led1={MDIO_PORTC,PIN7,ACTIVE_HIGH};

int main(void)
{
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	00 d0       	rcall	.+0      	; 0x3d40 <main+0x6>
    3d40:	00 d0       	rcall	.+0      	; 0x3d42 <main+0x8>
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <main+0xa>
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
	/*LCD initialize*/
	/*LCD Pins Initialization*/
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RS_PIN,PIN_OUTPUT);
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	61 e0       	ldi	r22, 0x01	; 1
    3d4c:	41 e0       	ldi	r20, 0x01	; 1
    3d4e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RW_PIN,PIN_OUTPUT);
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	62 e0       	ldi	r22, 0x02	; 2
    3d56:	41 e0       	ldi	r20, 0x01	; 1
    3d58:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,E_PIN,PIN_OUTPUT);
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	63 e0       	ldi	r22, 0x03	; 3
    3d60:	41 e0       	ldi	r20, 0x01	; 1
    3d62:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN4,PIN_OUTPUT);
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	64 e0       	ldi	r22, 0x04	; 4
    3d6a:	41 e0       	ldi	r20, 0x01	; 1
    3d6c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN5,PIN_OUTPUT);
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	65 e0       	ldi	r22, 0x05	; 5
    3d74:	41 e0       	ldi	r20, 0x01	; 1
    3d76:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN6,PIN_OUTPUT);
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	66 e0       	ldi	r22, 0x06	; 6
    3d7e:	41 e0       	ldi	r20, 0x01	; 1
    3d80:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN7,PIN_OUTPUT);
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	67 e0       	ldi	r22, 0x07	; 7
    3d88:	41 e0       	ldi	r20, 0x01	; 1
    3d8a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>

	/*LCD Initialization*/
	HAL_VidHCLCD_4BitModeInit();
    3d8e:	0e 94 84 1b 	call	0x3708	; 0x3708 <HAL_VidHCLCD_4BitModeInit>
	HAL_VidHCLCD_4BitModeSetPosition(1,0);
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	60 e0       	ldi	r22, 0x00	; 0
    3d96:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <HAL_VidHCLCD_4BitModeSetPosition>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"salve receive");
    3d9a:	80 e6       	ldi	r24, 0x60	; 96
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HAL_VidHCLCD_4BitModeWriteString>
	HAL_VidHCLCD_4BitModeSetPosition(2,0);
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	60 e0       	ldi	r22, 0x00	; 0
    3da6:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <HAL_VidHCLCD_4BitModeSetPosition>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"receive=");
    3daa:	8e e6       	ldi	r24, 0x6E	; 110
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HAL_VidHCLCD_4BitModeWriteString>


	/*ss and MOSI and scl*/
	MDIO_Errorstate_SetPinDirection(MDIO_PORTB,PIN4,PIN_INPUT);
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	64 e0       	ldi	r22, 0x04	; 4
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTB,PIN5,PIN_INPUT);
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	65 e0       	ldi	r22, 0x05	; 5
    3dc0:	40 e0       	ldi	r20, 0x00	; 0
    3dc2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTB,PIN7,PIN_INPUT);
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	67 e0       	ldi	r22, 0x07	; 7
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>

    /*MISO*/
	MDIO_Errorstate_SetPinDirection(MDIO_PORTB,PIN6,PIN_OUTPUT);
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	66 e0       	ldi	r22, 0x06	; 6
    3dd4:	41 e0       	ldi	r20, 0x01	; 1
    3dd6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_Errorstate_SetPinDirection>
	HLED_Errorstate_Led_Init(&led1);
    3dda:	82 e9       	ldi	r24, 0x92	; 146
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <HLED_Errorstate_Led_Init>

	/*salve Initialize*/
	MSPI_VidSalveInit();
    3de2:	0e 94 97 0a 	call	0x152e	; 0x152e <MSPI_VidSalveInit>
	uint8 data;
	uint8 buffer[5];
	while(1)
	{
		data=MSPI_uint8ReceiveData();
    3de6:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <MSPI_uint8ReceiveData>
    3dea:	89 83       	std	Y+1, r24	; 0x01
		sprintf(buffer,"%d",data);
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
    3dee:	28 2f       	mov	r18, r24
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	00 d0       	rcall	.+0      	; 0x3df4 <main+0xba>
    3df4:	00 d0       	rcall	.+0      	; 0x3df6 <main+0xbc>
    3df6:	00 d0       	rcall	.+0      	; 0x3df8 <main+0xbe>
    3df8:	ed b7       	in	r30, 0x3d	; 61
    3dfa:	fe b7       	in	r31, 0x3e	; 62
    3dfc:	31 96       	adiw	r30, 0x01	; 1
    3dfe:	ce 01       	movw	r24, r28
    3e00:	02 96       	adiw	r24, 0x02	; 2
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
    3e06:	87 e7       	ldi	r24, 0x77	; 119
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	93 83       	std	Z+3, r25	; 0x03
    3e0c:	82 83       	std	Z+2, r24	; 0x02
    3e0e:	35 83       	std	Z+5, r19	; 0x05
    3e10:	24 83       	std	Z+4, r18	; 0x04
    3e12:	0e 94 75 1f 	call	0x3eea	; 0x3eea <sprintf>
    3e16:	8d b7       	in	r24, 0x3d	; 61
    3e18:	9e b7       	in	r25, 0x3e	; 62
    3e1a:	06 96       	adiw	r24, 0x06	; 6
    3e1c:	0f b6       	in	r0, 0x3f	; 63
    3e1e:	f8 94       	cli
    3e20:	9e bf       	out	0x3e, r25	; 62
    3e22:	0f be       	out	0x3f, r0	; 63
    3e24:	8d bf       	out	0x3d, r24	; 61
		HAL_VidHCLCD_4BitModeSetPosition(2,9);
    3e26:	82 e0       	ldi	r24, 0x02	; 2
    3e28:	69 e0       	ldi	r22, 0x09	; 9
    3e2a:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <HAL_VidHCLCD_4BitModeSetPosition>
		HAL_VidHCLCD_4BitModeWriteString(buffer);
    3e2e:	ce 01       	movw	r24, r28
    3e30:	02 96       	adiw	r24, 0x02	; 2
    3e32:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HAL_VidHCLCD_4BitModeWriteString>
    3e36:	d7 cf       	rjmp	.-82     	; 0x3de6 <main+0xac>

00003e38 <__udivmodsi4>:
    3e38:	a1 e2       	ldi	r26, 0x21	; 33
    3e3a:	1a 2e       	mov	r1, r26
    3e3c:	aa 1b       	sub	r26, r26
    3e3e:	bb 1b       	sub	r27, r27
    3e40:	fd 01       	movw	r30, r26
    3e42:	0d c0       	rjmp	.+26     	; 0x3e5e <__udivmodsi4_ep>

00003e44 <__udivmodsi4_loop>:
    3e44:	aa 1f       	adc	r26, r26
    3e46:	bb 1f       	adc	r27, r27
    3e48:	ee 1f       	adc	r30, r30
    3e4a:	ff 1f       	adc	r31, r31
    3e4c:	a2 17       	cp	r26, r18
    3e4e:	b3 07       	cpc	r27, r19
    3e50:	e4 07       	cpc	r30, r20
    3e52:	f5 07       	cpc	r31, r21
    3e54:	20 f0       	brcs	.+8      	; 0x3e5e <__udivmodsi4_ep>
    3e56:	a2 1b       	sub	r26, r18
    3e58:	b3 0b       	sbc	r27, r19
    3e5a:	e4 0b       	sbc	r30, r20
    3e5c:	f5 0b       	sbc	r31, r21

00003e5e <__udivmodsi4_ep>:
    3e5e:	66 1f       	adc	r22, r22
    3e60:	77 1f       	adc	r23, r23
    3e62:	88 1f       	adc	r24, r24
    3e64:	99 1f       	adc	r25, r25
    3e66:	1a 94       	dec	r1
    3e68:	69 f7       	brne	.-38     	; 0x3e44 <__udivmodsi4_loop>
    3e6a:	60 95       	com	r22
    3e6c:	70 95       	com	r23
    3e6e:	80 95       	com	r24
    3e70:	90 95       	com	r25
    3e72:	9b 01       	movw	r18, r22
    3e74:	ac 01       	movw	r20, r24
    3e76:	bd 01       	movw	r22, r26
    3e78:	cf 01       	movw	r24, r30
    3e7a:	08 95       	ret

00003e7c <__prologue_saves__>:
    3e7c:	2f 92       	push	r2
    3e7e:	3f 92       	push	r3
    3e80:	4f 92       	push	r4
    3e82:	5f 92       	push	r5
    3e84:	6f 92       	push	r6
    3e86:	7f 92       	push	r7
    3e88:	8f 92       	push	r8
    3e8a:	9f 92       	push	r9
    3e8c:	af 92       	push	r10
    3e8e:	bf 92       	push	r11
    3e90:	cf 92       	push	r12
    3e92:	df 92       	push	r13
    3e94:	ef 92       	push	r14
    3e96:	ff 92       	push	r15
    3e98:	0f 93       	push	r16
    3e9a:	1f 93       	push	r17
    3e9c:	cf 93       	push	r28
    3e9e:	df 93       	push	r29
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
    3ea4:	ca 1b       	sub	r28, r26
    3ea6:	db 0b       	sbc	r29, r27
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
    3eb2:	09 94       	ijmp

00003eb4 <__epilogue_restores__>:
    3eb4:	2a 88       	ldd	r2, Y+18	; 0x12
    3eb6:	39 88       	ldd	r3, Y+17	; 0x11
    3eb8:	48 88       	ldd	r4, Y+16	; 0x10
    3eba:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ebc:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ebe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ec0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ec2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ec4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ec6:	b9 84       	ldd	r11, Y+9	; 0x09
    3ec8:	c8 84       	ldd	r12, Y+8	; 0x08
    3eca:	df 80       	ldd	r13, Y+7	; 0x07
    3ecc:	ee 80       	ldd	r14, Y+6	; 0x06
    3ece:	fd 80       	ldd	r15, Y+5	; 0x05
    3ed0:	0c 81       	ldd	r16, Y+4	; 0x04
    3ed2:	1b 81       	ldd	r17, Y+3	; 0x03
    3ed4:	aa 81       	ldd	r26, Y+2	; 0x02
    3ed6:	b9 81       	ldd	r27, Y+1	; 0x01
    3ed8:	ce 0f       	add	r28, r30
    3eda:	d1 1d       	adc	r29, r1
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	f8 94       	cli
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	cd bf       	out	0x3d, r28	; 61
    3ee6:	ed 01       	movw	r28, r26
    3ee8:	08 95       	ret

00003eea <sprintf>:
    3eea:	ae e0       	ldi	r26, 0x0E	; 14
    3eec:	b0 e0       	ldi	r27, 0x00	; 0
    3eee:	eb e7       	ldi	r30, 0x7B	; 123
    3ef0:	ff e1       	ldi	r31, 0x1F	; 31
    3ef2:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__prologue_saves__+0x1c>
    3ef6:	0d 89       	ldd	r16, Y+21	; 0x15
    3ef8:	1e 89       	ldd	r17, Y+22	; 0x16
    3efa:	86 e0       	ldi	r24, 0x06	; 6
    3efc:	8c 83       	std	Y+4, r24	; 0x04
    3efe:	1a 83       	std	Y+2, r17	; 0x02
    3f00:	09 83       	std	Y+1, r16	; 0x01
    3f02:	8f ef       	ldi	r24, 0xFF	; 255
    3f04:	9f e7       	ldi	r25, 0x7F	; 127
    3f06:	9e 83       	std	Y+6, r25	; 0x06
    3f08:	8d 83       	std	Y+5, r24	; 0x05
    3f0a:	9e 01       	movw	r18, r28
    3f0c:	27 5e       	subi	r18, 0xE7	; 231
    3f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f10:	ce 01       	movw	r24, r28
    3f12:	01 96       	adiw	r24, 0x01	; 1
    3f14:	6f 89       	ldd	r22, Y+23	; 0x17
    3f16:	78 8d       	ldd	r23, Y+24	; 0x18
    3f18:	a9 01       	movw	r20, r18
    3f1a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <vfprintf>
    3f1e:	2f 81       	ldd	r18, Y+7	; 0x07
    3f20:	38 85       	ldd	r19, Y+8	; 0x08
    3f22:	02 0f       	add	r16, r18
    3f24:	13 1f       	adc	r17, r19
    3f26:	f8 01       	movw	r30, r16
    3f28:	10 82       	st	Z, r1
    3f2a:	2e 96       	adiw	r28, 0x0e	; 14
    3f2c:	e4 e0       	ldi	r30, 0x04	; 4
    3f2e:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__epilogue_restores__+0x1c>

00003f32 <vfprintf>:
    3f32:	ab e0       	ldi	r26, 0x0B	; 11
    3f34:	b0 e0       	ldi	r27, 0x00	; 0
    3f36:	ef e9       	ldi	r30, 0x9F	; 159
    3f38:	ff e1       	ldi	r31, 0x1F	; 31
    3f3a:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <__prologue_saves__>
    3f3e:	3c 01       	movw	r6, r24
    3f40:	2b 01       	movw	r4, r22
    3f42:	5a 01       	movw	r10, r20
    3f44:	fc 01       	movw	r30, r24
    3f46:	17 82       	std	Z+7, r1	; 0x07
    3f48:	16 82       	std	Z+6, r1	; 0x06
    3f4a:	83 81       	ldd	r24, Z+3	; 0x03
    3f4c:	81 fd       	sbrc	r24, 1
    3f4e:	03 c0       	rjmp	.+6      	; 0x3f56 <vfprintf+0x24>
    3f50:	6f ef       	ldi	r22, 0xFF	; 255
    3f52:	7f ef       	ldi	r23, 0xFF	; 255
    3f54:	c6 c1       	rjmp	.+908    	; 0x42e2 <vfprintf+0x3b0>
    3f56:	9a e0       	ldi	r25, 0x0A	; 10
    3f58:	89 2e       	mov	r8, r25
    3f5a:	1e 01       	movw	r2, r28
    3f5c:	08 94       	sec
    3f5e:	21 1c       	adc	r2, r1
    3f60:	31 1c       	adc	r3, r1
    3f62:	f3 01       	movw	r30, r6
    3f64:	23 81       	ldd	r18, Z+3	; 0x03
    3f66:	f2 01       	movw	r30, r4
    3f68:	23 fd       	sbrc	r18, 3
    3f6a:	85 91       	lpm	r24, Z+
    3f6c:	23 ff       	sbrs	r18, 3
    3f6e:	81 91       	ld	r24, Z+
    3f70:	2f 01       	movw	r4, r30
    3f72:	88 23       	and	r24, r24
    3f74:	09 f4       	brne	.+2      	; 0x3f78 <vfprintf+0x46>
    3f76:	b2 c1       	rjmp	.+868    	; 0x42dc <vfprintf+0x3aa>
    3f78:	85 32       	cpi	r24, 0x25	; 37
    3f7a:	39 f4       	brne	.+14     	; 0x3f8a <vfprintf+0x58>
    3f7c:	23 fd       	sbrc	r18, 3
    3f7e:	85 91       	lpm	r24, Z+
    3f80:	23 ff       	sbrs	r18, 3
    3f82:	81 91       	ld	r24, Z+
    3f84:	2f 01       	movw	r4, r30
    3f86:	85 32       	cpi	r24, 0x25	; 37
    3f88:	29 f4       	brne	.+10     	; 0x3f94 <vfprintf+0x62>
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	b3 01       	movw	r22, r6
    3f8e:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    3f92:	e7 cf       	rjmp	.-50     	; 0x3f62 <vfprintf+0x30>
    3f94:	98 2f       	mov	r25, r24
    3f96:	ff 24       	eor	r15, r15
    3f98:	ee 24       	eor	r14, r14
    3f9a:	99 24       	eor	r9, r9
    3f9c:	ff e1       	ldi	r31, 0x1F	; 31
    3f9e:	ff 15       	cp	r31, r15
    3fa0:	d0 f0       	brcs	.+52     	; 0x3fd6 <vfprintf+0xa4>
    3fa2:	9b 32       	cpi	r25, 0x2B	; 43
    3fa4:	69 f0       	breq	.+26     	; 0x3fc0 <vfprintf+0x8e>
    3fa6:	9c 32       	cpi	r25, 0x2C	; 44
    3fa8:	28 f4       	brcc	.+10     	; 0x3fb4 <vfprintf+0x82>
    3faa:	90 32       	cpi	r25, 0x20	; 32
    3fac:	59 f0       	breq	.+22     	; 0x3fc4 <vfprintf+0x92>
    3fae:	93 32       	cpi	r25, 0x23	; 35
    3fb0:	91 f4       	brne	.+36     	; 0x3fd6 <vfprintf+0xa4>
    3fb2:	0e c0       	rjmp	.+28     	; 0x3fd0 <vfprintf+0x9e>
    3fb4:	9d 32       	cpi	r25, 0x2D	; 45
    3fb6:	49 f0       	breq	.+18     	; 0x3fca <vfprintf+0x98>
    3fb8:	90 33       	cpi	r25, 0x30	; 48
    3fba:	69 f4       	brne	.+26     	; 0x3fd6 <vfprintf+0xa4>
    3fbc:	41 e0       	ldi	r20, 0x01	; 1
    3fbe:	24 c0       	rjmp	.+72     	; 0x4008 <vfprintf+0xd6>
    3fc0:	52 e0       	ldi	r21, 0x02	; 2
    3fc2:	f5 2a       	or	r15, r21
    3fc4:	84 e0       	ldi	r24, 0x04	; 4
    3fc6:	f8 2a       	or	r15, r24
    3fc8:	28 c0       	rjmp	.+80     	; 0x401a <vfprintf+0xe8>
    3fca:	98 e0       	ldi	r25, 0x08	; 8
    3fcc:	f9 2a       	or	r15, r25
    3fce:	25 c0       	rjmp	.+74     	; 0x401a <vfprintf+0xe8>
    3fd0:	e0 e1       	ldi	r30, 0x10	; 16
    3fd2:	fe 2a       	or	r15, r30
    3fd4:	22 c0       	rjmp	.+68     	; 0x401a <vfprintf+0xe8>
    3fd6:	f7 fc       	sbrc	r15, 7
    3fd8:	29 c0       	rjmp	.+82     	; 0x402c <vfprintf+0xfa>
    3fda:	89 2f       	mov	r24, r25
    3fdc:	80 53       	subi	r24, 0x30	; 48
    3fde:	8a 30       	cpi	r24, 0x0A	; 10
    3fe0:	70 f4       	brcc	.+28     	; 0x3ffe <vfprintf+0xcc>
    3fe2:	f6 fe       	sbrs	r15, 6
    3fe4:	05 c0       	rjmp	.+10     	; 0x3ff0 <vfprintf+0xbe>
    3fe6:	98 9c       	mul	r9, r8
    3fe8:	90 2c       	mov	r9, r0
    3fea:	11 24       	eor	r1, r1
    3fec:	98 0e       	add	r9, r24
    3fee:	15 c0       	rjmp	.+42     	; 0x401a <vfprintf+0xe8>
    3ff0:	e8 9c       	mul	r14, r8
    3ff2:	e0 2c       	mov	r14, r0
    3ff4:	11 24       	eor	r1, r1
    3ff6:	e8 0e       	add	r14, r24
    3ff8:	f0 e2       	ldi	r31, 0x20	; 32
    3ffa:	ff 2a       	or	r15, r31
    3ffc:	0e c0       	rjmp	.+28     	; 0x401a <vfprintf+0xe8>
    3ffe:	9e 32       	cpi	r25, 0x2E	; 46
    4000:	29 f4       	brne	.+10     	; 0x400c <vfprintf+0xda>
    4002:	f6 fc       	sbrc	r15, 6
    4004:	6b c1       	rjmp	.+726    	; 0x42dc <vfprintf+0x3aa>
    4006:	40 e4       	ldi	r20, 0x40	; 64
    4008:	f4 2a       	or	r15, r20
    400a:	07 c0       	rjmp	.+14     	; 0x401a <vfprintf+0xe8>
    400c:	9c 36       	cpi	r25, 0x6C	; 108
    400e:	19 f4       	brne	.+6      	; 0x4016 <vfprintf+0xe4>
    4010:	50 e8       	ldi	r21, 0x80	; 128
    4012:	f5 2a       	or	r15, r21
    4014:	02 c0       	rjmp	.+4      	; 0x401a <vfprintf+0xe8>
    4016:	98 36       	cpi	r25, 0x68	; 104
    4018:	49 f4       	brne	.+18     	; 0x402c <vfprintf+0xfa>
    401a:	f2 01       	movw	r30, r4
    401c:	23 fd       	sbrc	r18, 3
    401e:	95 91       	lpm	r25, Z+
    4020:	23 ff       	sbrs	r18, 3
    4022:	91 91       	ld	r25, Z+
    4024:	2f 01       	movw	r4, r30
    4026:	99 23       	and	r25, r25
    4028:	09 f0       	breq	.+2      	; 0x402c <vfprintf+0xfa>
    402a:	b8 cf       	rjmp	.-144    	; 0x3f9c <vfprintf+0x6a>
    402c:	89 2f       	mov	r24, r25
    402e:	85 54       	subi	r24, 0x45	; 69
    4030:	83 30       	cpi	r24, 0x03	; 3
    4032:	18 f0       	brcs	.+6      	; 0x403a <vfprintf+0x108>
    4034:	80 52       	subi	r24, 0x20	; 32
    4036:	83 30       	cpi	r24, 0x03	; 3
    4038:	38 f4       	brcc	.+14     	; 0x4048 <vfprintf+0x116>
    403a:	44 e0       	ldi	r20, 0x04	; 4
    403c:	50 e0       	ldi	r21, 0x00	; 0
    403e:	a4 0e       	add	r10, r20
    4040:	b5 1e       	adc	r11, r21
    4042:	5f e3       	ldi	r21, 0x3F	; 63
    4044:	59 83       	std	Y+1, r21	; 0x01
    4046:	0f c0       	rjmp	.+30     	; 0x4066 <vfprintf+0x134>
    4048:	93 36       	cpi	r25, 0x63	; 99
    404a:	31 f0       	breq	.+12     	; 0x4058 <vfprintf+0x126>
    404c:	93 37       	cpi	r25, 0x73	; 115
    404e:	79 f0       	breq	.+30     	; 0x406e <vfprintf+0x13c>
    4050:	93 35       	cpi	r25, 0x53	; 83
    4052:	09 f0       	breq	.+2      	; 0x4056 <vfprintf+0x124>
    4054:	56 c0       	rjmp	.+172    	; 0x4102 <vfprintf+0x1d0>
    4056:	20 c0       	rjmp	.+64     	; 0x4098 <vfprintf+0x166>
    4058:	f5 01       	movw	r30, r10
    405a:	80 81       	ld	r24, Z
    405c:	89 83       	std	Y+1, r24	; 0x01
    405e:	42 e0       	ldi	r20, 0x02	; 2
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	a4 0e       	add	r10, r20
    4064:	b5 1e       	adc	r11, r21
    4066:	61 01       	movw	r12, r2
    4068:	01 e0       	ldi	r16, 0x01	; 1
    406a:	10 e0       	ldi	r17, 0x00	; 0
    406c:	12 c0       	rjmp	.+36     	; 0x4092 <vfprintf+0x160>
    406e:	f5 01       	movw	r30, r10
    4070:	c0 80       	ld	r12, Z
    4072:	d1 80       	ldd	r13, Z+1	; 0x01
    4074:	f6 fc       	sbrc	r15, 6
    4076:	03 c0       	rjmp	.+6      	; 0x407e <vfprintf+0x14c>
    4078:	6f ef       	ldi	r22, 0xFF	; 255
    407a:	7f ef       	ldi	r23, 0xFF	; 255
    407c:	02 c0       	rjmp	.+4      	; 0x4082 <vfprintf+0x150>
    407e:	69 2d       	mov	r22, r9
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	42 e0       	ldi	r20, 0x02	; 2
    4084:	50 e0       	ldi	r21, 0x00	; 0
    4086:	a4 0e       	add	r10, r20
    4088:	b5 1e       	adc	r11, r21
    408a:	c6 01       	movw	r24, r12
    408c:	0e 94 81 21 	call	0x4302	; 0x4302 <strnlen>
    4090:	8c 01       	movw	r16, r24
    4092:	5f e7       	ldi	r21, 0x7F	; 127
    4094:	f5 22       	and	r15, r21
    4096:	14 c0       	rjmp	.+40     	; 0x40c0 <vfprintf+0x18e>
    4098:	f5 01       	movw	r30, r10
    409a:	c0 80       	ld	r12, Z
    409c:	d1 80       	ldd	r13, Z+1	; 0x01
    409e:	f6 fc       	sbrc	r15, 6
    40a0:	03 c0       	rjmp	.+6      	; 0x40a8 <vfprintf+0x176>
    40a2:	6f ef       	ldi	r22, 0xFF	; 255
    40a4:	7f ef       	ldi	r23, 0xFF	; 255
    40a6:	02 c0       	rjmp	.+4      	; 0x40ac <vfprintf+0x17a>
    40a8:	69 2d       	mov	r22, r9
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	42 e0       	ldi	r20, 0x02	; 2
    40ae:	50 e0       	ldi	r21, 0x00	; 0
    40b0:	a4 0e       	add	r10, r20
    40b2:	b5 1e       	adc	r11, r21
    40b4:	c6 01       	movw	r24, r12
    40b6:	0e 94 76 21 	call	0x42ec	; 0x42ec <strnlen_P>
    40ba:	8c 01       	movw	r16, r24
    40bc:	50 e8       	ldi	r21, 0x80	; 128
    40be:	f5 2a       	or	r15, r21
    40c0:	f3 fe       	sbrs	r15, 3
    40c2:	07 c0       	rjmp	.+14     	; 0x40d2 <vfprintf+0x1a0>
    40c4:	1a c0       	rjmp	.+52     	; 0x40fa <vfprintf+0x1c8>
    40c6:	80 e2       	ldi	r24, 0x20	; 32
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	b3 01       	movw	r22, r6
    40cc:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    40d0:	ea 94       	dec	r14
    40d2:	8e 2d       	mov	r24, r14
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	08 17       	cp	r16, r24
    40d8:	19 07       	cpc	r17, r25
    40da:	a8 f3       	brcs	.-22     	; 0x40c6 <vfprintf+0x194>
    40dc:	0e c0       	rjmp	.+28     	; 0x40fa <vfprintf+0x1c8>
    40de:	f6 01       	movw	r30, r12
    40e0:	f7 fc       	sbrc	r15, 7
    40e2:	85 91       	lpm	r24, Z+
    40e4:	f7 fe       	sbrs	r15, 7
    40e6:	81 91       	ld	r24, Z+
    40e8:	6f 01       	movw	r12, r30
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	b3 01       	movw	r22, r6
    40ee:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    40f2:	e1 10       	cpse	r14, r1
    40f4:	ea 94       	dec	r14
    40f6:	01 50       	subi	r16, 0x01	; 1
    40f8:	10 40       	sbci	r17, 0x00	; 0
    40fa:	01 15       	cp	r16, r1
    40fc:	11 05       	cpc	r17, r1
    40fe:	79 f7       	brne	.-34     	; 0x40de <vfprintf+0x1ac>
    4100:	ea c0       	rjmp	.+468    	; 0x42d6 <vfprintf+0x3a4>
    4102:	94 36       	cpi	r25, 0x64	; 100
    4104:	11 f0       	breq	.+4      	; 0x410a <vfprintf+0x1d8>
    4106:	99 36       	cpi	r25, 0x69	; 105
    4108:	69 f5       	brne	.+90     	; 0x4164 <vfprintf+0x232>
    410a:	f7 fe       	sbrs	r15, 7
    410c:	08 c0       	rjmp	.+16     	; 0x411e <vfprintf+0x1ec>
    410e:	f5 01       	movw	r30, r10
    4110:	20 81       	ld	r18, Z
    4112:	31 81       	ldd	r19, Z+1	; 0x01
    4114:	42 81       	ldd	r20, Z+2	; 0x02
    4116:	53 81       	ldd	r21, Z+3	; 0x03
    4118:	84 e0       	ldi	r24, 0x04	; 4
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	0a c0       	rjmp	.+20     	; 0x4132 <vfprintf+0x200>
    411e:	f5 01       	movw	r30, r10
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	9c 01       	movw	r18, r24
    4126:	44 27       	eor	r20, r20
    4128:	37 fd       	sbrc	r19, 7
    412a:	40 95       	com	r20
    412c:	54 2f       	mov	r21, r20
    412e:	82 e0       	ldi	r24, 0x02	; 2
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	a8 0e       	add	r10, r24
    4134:	b9 1e       	adc	r11, r25
    4136:	9f e6       	ldi	r25, 0x6F	; 111
    4138:	f9 22       	and	r15, r25
    413a:	57 ff       	sbrs	r21, 7
    413c:	09 c0       	rjmp	.+18     	; 0x4150 <vfprintf+0x21e>
    413e:	50 95       	com	r21
    4140:	40 95       	com	r20
    4142:	30 95       	com	r19
    4144:	21 95       	neg	r18
    4146:	3f 4f       	sbci	r19, 0xFF	; 255
    4148:	4f 4f       	sbci	r20, 0xFF	; 255
    414a:	5f 4f       	sbci	r21, 0xFF	; 255
    414c:	e0 e8       	ldi	r30, 0x80	; 128
    414e:	fe 2a       	or	r15, r30
    4150:	ca 01       	movw	r24, r20
    4152:	b9 01       	movw	r22, r18
    4154:	a1 01       	movw	r20, r2
    4156:	2a e0       	ldi	r18, 0x0A	; 10
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	0e 94 b8 21 	call	0x4370	; 0x4370 <__ultoa_invert>
    415e:	d8 2e       	mov	r13, r24
    4160:	d2 18       	sub	r13, r2
    4162:	40 c0       	rjmp	.+128    	; 0x41e4 <vfprintf+0x2b2>
    4164:	95 37       	cpi	r25, 0x75	; 117
    4166:	29 f4       	brne	.+10     	; 0x4172 <vfprintf+0x240>
    4168:	1f 2d       	mov	r17, r15
    416a:	1f 7e       	andi	r17, 0xEF	; 239
    416c:	2a e0       	ldi	r18, 0x0A	; 10
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	1d c0       	rjmp	.+58     	; 0x41ac <vfprintf+0x27a>
    4172:	1f 2d       	mov	r17, r15
    4174:	19 7f       	andi	r17, 0xF9	; 249
    4176:	9f 36       	cpi	r25, 0x6F	; 111
    4178:	61 f0       	breq	.+24     	; 0x4192 <vfprintf+0x260>
    417a:	90 37       	cpi	r25, 0x70	; 112
    417c:	20 f4       	brcc	.+8      	; 0x4186 <vfprintf+0x254>
    417e:	98 35       	cpi	r25, 0x58	; 88
    4180:	09 f0       	breq	.+2      	; 0x4184 <vfprintf+0x252>
    4182:	ac c0       	rjmp	.+344    	; 0x42dc <vfprintf+0x3aa>
    4184:	0f c0       	rjmp	.+30     	; 0x41a4 <vfprintf+0x272>
    4186:	90 37       	cpi	r25, 0x70	; 112
    4188:	39 f0       	breq	.+14     	; 0x4198 <vfprintf+0x266>
    418a:	98 37       	cpi	r25, 0x78	; 120
    418c:	09 f0       	breq	.+2      	; 0x4190 <vfprintf+0x25e>
    418e:	a6 c0       	rjmp	.+332    	; 0x42dc <vfprintf+0x3aa>
    4190:	04 c0       	rjmp	.+8      	; 0x419a <vfprintf+0x268>
    4192:	28 e0       	ldi	r18, 0x08	; 8
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	0a c0       	rjmp	.+20     	; 0x41ac <vfprintf+0x27a>
    4198:	10 61       	ori	r17, 0x10	; 16
    419a:	14 fd       	sbrc	r17, 4
    419c:	14 60       	ori	r17, 0x04	; 4
    419e:	20 e1       	ldi	r18, 0x10	; 16
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	04 c0       	rjmp	.+8      	; 0x41ac <vfprintf+0x27a>
    41a4:	14 fd       	sbrc	r17, 4
    41a6:	16 60       	ori	r17, 0x06	; 6
    41a8:	20 e1       	ldi	r18, 0x10	; 16
    41aa:	32 e0       	ldi	r19, 0x02	; 2
    41ac:	17 ff       	sbrs	r17, 7
    41ae:	08 c0       	rjmp	.+16     	; 0x41c0 <vfprintf+0x28e>
    41b0:	f5 01       	movw	r30, r10
    41b2:	60 81       	ld	r22, Z
    41b4:	71 81       	ldd	r23, Z+1	; 0x01
    41b6:	82 81       	ldd	r24, Z+2	; 0x02
    41b8:	93 81       	ldd	r25, Z+3	; 0x03
    41ba:	44 e0       	ldi	r20, 0x04	; 4
    41bc:	50 e0       	ldi	r21, 0x00	; 0
    41be:	08 c0       	rjmp	.+16     	; 0x41d0 <vfprintf+0x29e>
    41c0:	f5 01       	movw	r30, r10
    41c2:	80 81       	ld	r24, Z
    41c4:	91 81       	ldd	r25, Z+1	; 0x01
    41c6:	bc 01       	movw	r22, r24
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	42 e0       	ldi	r20, 0x02	; 2
    41ce:	50 e0       	ldi	r21, 0x00	; 0
    41d0:	a4 0e       	add	r10, r20
    41d2:	b5 1e       	adc	r11, r21
    41d4:	a1 01       	movw	r20, r2
    41d6:	0e 94 b8 21 	call	0x4370	; 0x4370 <__ultoa_invert>
    41da:	d8 2e       	mov	r13, r24
    41dc:	d2 18       	sub	r13, r2
    41de:	8f e7       	ldi	r24, 0x7F	; 127
    41e0:	f8 2e       	mov	r15, r24
    41e2:	f1 22       	and	r15, r17
    41e4:	f6 fe       	sbrs	r15, 6
    41e6:	0b c0       	rjmp	.+22     	; 0x41fe <vfprintf+0x2cc>
    41e8:	5e ef       	ldi	r21, 0xFE	; 254
    41ea:	f5 22       	and	r15, r21
    41ec:	d9 14       	cp	r13, r9
    41ee:	38 f4       	brcc	.+14     	; 0x41fe <vfprintf+0x2cc>
    41f0:	f4 fe       	sbrs	r15, 4
    41f2:	07 c0       	rjmp	.+14     	; 0x4202 <vfprintf+0x2d0>
    41f4:	f2 fc       	sbrc	r15, 2
    41f6:	05 c0       	rjmp	.+10     	; 0x4202 <vfprintf+0x2d0>
    41f8:	8f ee       	ldi	r24, 0xEF	; 239
    41fa:	f8 22       	and	r15, r24
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <vfprintf+0x2d0>
    41fe:	1d 2d       	mov	r17, r13
    4200:	01 c0       	rjmp	.+2      	; 0x4204 <vfprintf+0x2d2>
    4202:	19 2d       	mov	r17, r9
    4204:	f4 fe       	sbrs	r15, 4
    4206:	0d c0       	rjmp	.+26     	; 0x4222 <vfprintf+0x2f0>
    4208:	fe 01       	movw	r30, r28
    420a:	ed 0d       	add	r30, r13
    420c:	f1 1d       	adc	r31, r1
    420e:	80 81       	ld	r24, Z
    4210:	80 33       	cpi	r24, 0x30	; 48
    4212:	19 f4       	brne	.+6      	; 0x421a <vfprintf+0x2e8>
    4214:	99 ee       	ldi	r25, 0xE9	; 233
    4216:	f9 22       	and	r15, r25
    4218:	08 c0       	rjmp	.+16     	; 0x422a <vfprintf+0x2f8>
    421a:	1f 5f       	subi	r17, 0xFF	; 255
    421c:	f2 fe       	sbrs	r15, 2
    421e:	05 c0       	rjmp	.+10     	; 0x422a <vfprintf+0x2f8>
    4220:	03 c0       	rjmp	.+6      	; 0x4228 <vfprintf+0x2f6>
    4222:	8f 2d       	mov	r24, r15
    4224:	86 78       	andi	r24, 0x86	; 134
    4226:	09 f0       	breq	.+2      	; 0x422a <vfprintf+0x2f8>
    4228:	1f 5f       	subi	r17, 0xFF	; 255
    422a:	0f 2d       	mov	r16, r15
    422c:	f3 fc       	sbrc	r15, 3
    422e:	14 c0       	rjmp	.+40     	; 0x4258 <vfprintf+0x326>
    4230:	f0 fe       	sbrs	r15, 0
    4232:	0f c0       	rjmp	.+30     	; 0x4252 <vfprintf+0x320>
    4234:	1e 15       	cp	r17, r14
    4236:	10 f0       	brcs	.+4      	; 0x423c <vfprintf+0x30a>
    4238:	9d 2c       	mov	r9, r13
    423a:	0b c0       	rjmp	.+22     	; 0x4252 <vfprintf+0x320>
    423c:	9d 2c       	mov	r9, r13
    423e:	9e 0c       	add	r9, r14
    4240:	91 1a       	sub	r9, r17
    4242:	1e 2d       	mov	r17, r14
    4244:	06 c0       	rjmp	.+12     	; 0x4252 <vfprintf+0x320>
    4246:	80 e2       	ldi	r24, 0x20	; 32
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	b3 01       	movw	r22, r6
    424c:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    4250:	1f 5f       	subi	r17, 0xFF	; 255
    4252:	1e 15       	cp	r17, r14
    4254:	c0 f3       	brcs	.-16     	; 0x4246 <vfprintf+0x314>
    4256:	04 c0       	rjmp	.+8      	; 0x4260 <vfprintf+0x32e>
    4258:	1e 15       	cp	r17, r14
    425a:	10 f4       	brcc	.+4      	; 0x4260 <vfprintf+0x32e>
    425c:	e1 1a       	sub	r14, r17
    425e:	01 c0       	rjmp	.+2      	; 0x4262 <vfprintf+0x330>
    4260:	ee 24       	eor	r14, r14
    4262:	04 ff       	sbrs	r16, 4
    4264:	0f c0       	rjmp	.+30     	; 0x4284 <vfprintf+0x352>
    4266:	80 e3       	ldi	r24, 0x30	; 48
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	b3 01       	movw	r22, r6
    426c:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    4270:	02 ff       	sbrs	r16, 2
    4272:	1d c0       	rjmp	.+58     	; 0x42ae <vfprintf+0x37c>
    4274:	01 fd       	sbrc	r16, 1
    4276:	03 c0       	rjmp	.+6      	; 0x427e <vfprintf+0x34c>
    4278:	88 e7       	ldi	r24, 0x78	; 120
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0e c0       	rjmp	.+28     	; 0x429a <vfprintf+0x368>
    427e:	88 e5       	ldi	r24, 0x58	; 88
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	0b c0       	rjmp	.+22     	; 0x429a <vfprintf+0x368>
    4284:	80 2f       	mov	r24, r16
    4286:	86 78       	andi	r24, 0x86	; 134
    4288:	91 f0       	breq	.+36     	; 0x42ae <vfprintf+0x37c>
    428a:	01 ff       	sbrs	r16, 1
    428c:	02 c0       	rjmp	.+4      	; 0x4292 <vfprintf+0x360>
    428e:	8b e2       	ldi	r24, 0x2B	; 43
    4290:	01 c0       	rjmp	.+2      	; 0x4294 <vfprintf+0x362>
    4292:	80 e2       	ldi	r24, 0x20	; 32
    4294:	f7 fc       	sbrc	r15, 7
    4296:	8d e2       	ldi	r24, 0x2D	; 45
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	b3 01       	movw	r22, r6
    429c:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    42a0:	06 c0       	rjmp	.+12     	; 0x42ae <vfprintf+0x37c>
    42a2:	80 e3       	ldi	r24, 0x30	; 48
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	b3 01       	movw	r22, r6
    42a8:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    42ac:	9a 94       	dec	r9
    42ae:	d9 14       	cp	r13, r9
    42b0:	c0 f3       	brcs	.-16     	; 0x42a2 <vfprintf+0x370>
    42b2:	da 94       	dec	r13
    42b4:	f1 01       	movw	r30, r2
    42b6:	ed 0d       	add	r30, r13
    42b8:	f1 1d       	adc	r31, r1
    42ba:	80 81       	ld	r24, Z
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	b3 01       	movw	r22, r6
    42c0:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    42c4:	dd 20       	and	r13, r13
    42c6:	a9 f7       	brne	.-22     	; 0x42b2 <vfprintf+0x380>
    42c8:	06 c0       	rjmp	.+12     	; 0x42d6 <vfprintf+0x3a4>
    42ca:	80 e2       	ldi	r24, 0x20	; 32
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	b3 01       	movw	r22, r6
    42d0:	0e 94 8c 21 	call	0x4318	; 0x4318 <fputc>
    42d4:	ea 94       	dec	r14
    42d6:	ee 20       	and	r14, r14
    42d8:	c1 f7       	brne	.-16     	; 0x42ca <vfprintf+0x398>
    42da:	43 ce       	rjmp	.-890    	; 0x3f62 <vfprintf+0x30>
    42dc:	f3 01       	movw	r30, r6
    42de:	66 81       	ldd	r22, Z+6	; 0x06
    42e0:	77 81       	ldd	r23, Z+7	; 0x07
    42e2:	cb 01       	movw	r24, r22
    42e4:	2b 96       	adiw	r28, 0x0b	; 11
    42e6:	e2 e1       	ldi	r30, 0x12	; 18
    42e8:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <__epilogue_restores__>

000042ec <strnlen_P>:
    42ec:	fc 01       	movw	r30, r24
    42ee:	05 90       	lpm	r0, Z+
    42f0:	61 50       	subi	r22, 0x01	; 1
    42f2:	70 40       	sbci	r23, 0x00	; 0
    42f4:	01 10       	cpse	r0, r1
    42f6:	d8 f7       	brcc	.-10     	; 0x42ee <strnlen_P+0x2>
    42f8:	80 95       	com	r24
    42fa:	90 95       	com	r25
    42fc:	8e 0f       	add	r24, r30
    42fe:	9f 1f       	adc	r25, r31
    4300:	08 95       	ret

00004302 <strnlen>:
    4302:	fc 01       	movw	r30, r24
    4304:	61 50       	subi	r22, 0x01	; 1
    4306:	70 40       	sbci	r23, 0x00	; 0
    4308:	01 90       	ld	r0, Z+
    430a:	01 10       	cpse	r0, r1
    430c:	d8 f7       	brcc	.-10     	; 0x4304 <strnlen+0x2>
    430e:	80 95       	com	r24
    4310:	90 95       	com	r25
    4312:	8e 0f       	add	r24, r30
    4314:	9f 1f       	adc	r25, r31
    4316:	08 95       	ret

00004318 <fputc>:
    4318:	0f 93       	push	r16
    431a:	1f 93       	push	r17
    431c:	cf 93       	push	r28
    431e:	df 93       	push	r29
    4320:	8c 01       	movw	r16, r24
    4322:	eb 01       	movw	r28, r22
    4324:	8b 81       	ldd	r24, Y+3	; 0x03
    4326:	81 ff       	sbrs	r24, 1
    4328:	1b c0       	rjmp	.+54     	; 0x4360 <fputc+0x48>
    432a:	82 ff       	sbrs	r24, 2
    432c:	0d c0       	rjmp	.+26     	; 0x4348 <fputc+0x30>
    432e:	2e 81       	ldd	r18, Y+6	; 0x06
    4330:	3f 81       	ldd	r19, Y+7	; 0x07
    4332:	8c 81       	ldd	r24, Y+4	; 0x04
    4334:	9d 81       	ldd	r25, Y+5	; 0x05
    4336:	28 17       	cp	r18, r24
    4338:	39 07       	cpc	r19, r25
    433a:	64 f4       	brge	.+24     	; 0x4354 <fputc+0x3c>
    433c:	e8 81       	ld	r30, Y
    433e:	f9 81       	ldd	r31, Y+1	; 0x01
    4340:	01 93       	st	Z+, r16
    4342:	f9 83       	std	Y+1, r31	; 0x01
    4344:	e8 83       	st	Y, r30
    4346:	06 c0       	rjmp	.+12     	; 0x4354 <fputc+0x3c>
    4348:	e8 85       	ldd	r30, Y+8	; 0x08
    434a:	f9 85       	ldd	r31, Y+9	; 0x09
    434c:	80 2f       	mov	r24, r16
    434e:	09 95       	icall
    4350:	89 2b       	or	r24, r25
    4352:	31 f4       	brne	.+12     	; 0x4360 <fputc+0x48>
    4354:	8e 81       	ldd	r24, Y+6	; 0x06
    4356:	9f 81       	ldd	r25, Y+7	; 0x07
    4358:	01 96       	adiw	r24, 0x01	; 1
    435a:	9f 83       	std	Y+7, r25	; 0x07
    435c:	8e 83       	std	Y+6, r24	; 0x06
    435e:	02 c0       	rjmp	.+4      	; 0x4364 <fputc+0x4c>
    4360:	0f ef       	ldi	r16, 0xFF	; 255
    4362:	1f ef       	ldi	r17, 0xFF	; 255
    4364:	c8 01       	movw	r24, r16
    4366:	df 91       	pop	r29
    4368:	cf 91       	pop	r28
    436a:	1f 91       	pop	r17
    436c:	0f 91       	pop	r16
    436e:	08 95       	ret

00004370 <__ultoa_invert>:
    4370:	fa 01       	movw	r30, r20
    4372:	aa 27       	eor	r26, r26
    4374:	28 30       	cpi	r18, 0x08	; 8
    4376:	51 f1       	breq	.+84     	; 0x43cc <__ultoa_invert+0x5c>
    4378:	20 31       	cpi	r18, 0x10	; 16
    437a:	81 f1       	breq	.+96     	; 0x43dc <__ultoa_invert+0x6c>
    437c:	e8 94       	clt
    437e:	6f 93       	push	r22
    4380:	6e 7f       	andi	r22, 0xFE	; 254
    4382:	6e 5f       	subi	r22, 0xFE	; 254
    4384:	7f 4f       	sbci	r23, 0xFF	; 255
    4386:	8f 4f       	sbci	r24, 0xFF	; 255
    4388:	9f 4f       	sbci	r25, 0xFF	; 255
    438a:	af 4f       	sbci	r26, 0xFF	; 255
    438c:	b1 e0       	ldi	r27, 0x01	; 1
    438e:	3e d0       	rcall	.+124    	; 0x440c <__ultoa_invert+0x9c>
    4390:	b4 e0       	ldi	r27, 0x04	; 4
    4392:	3c d0       	rcall	.+120    	; 0x440c <__ultoa_invert+0x9c>
    4394:	67 0f       	add	r22, r23
    4396:	78 1f       	adc	r23, r24
    4398:	89 1f       	adc	r24, r25
    439a:	9a 1f       	adc	r25, r26
    439c:	a1 1d       	adc	r26, r1
    439e:	68 0f       	add	r22, r24
    43a0:	79 1f       	adc	r23, r25
    43a2:	8a 1f       	adc	r24, r26
    43a4:	91 1d       	adc	r25, r1
    43a6:	a1 1d       	adc	r26, r1
    43a8:	6a 0f       	add	r22, r26
    43aa:	71 1d       	adc	r23, r1
    43ac:	81 1d       	adc	r24, r1
    43ae:	91 1d       	adc	r25, r1
    43b0:	a1 1d       	adc	r26, r1
    43b2:	20 d0       	rcall	.+64     	; 0x43f4 <__ultoa_invert+0x84>
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <__ultoa_invert+0x48>
    43b6:	68 94       	set
    43b8:	3f 91       	pop	r19
    43ba:	2a e0       	ldi	r18, 0x0A	; 10
    43bc:	26 9f       	mul	r18, r22
    43be:	11 24       	eor	r1, r1
    43c0:	30 19       	sub	r19, r0
    43c2:	30 5d       	subi	r19, 0xD0	; 208
    43c4:	31 93       	st	Z+, r19
    43c6:	de f6       	brtc	.-74     	; 0x437e <__ultoa_invert+0xe>
    43c8:	cf 01       	movw	r24, r30
    43ca:	08 95       	ret
    43cc:	46 2f       	mov	r20, r22
    43ce:	47 70       	andi	r20, 0x07	; 7
    43d0:	40 5d       	subi	r20, 0xD0	; 208
    43d2:	41 93       	st	Z+, r20
    43d4:	b3 e0       	ldi	r27, 0x03	; 3
    43d6:	0f d0       	rcall	.+30     	; 0x43f6 <__ultoa_invert+0x86>
    43d8:	c9 f7       	brne	.-14     	; 0x43cc <__ultoa_invert+0x5c>
    43da:	f6 cf       	rjmp	.-20     	; 0x43c8 <__ultoa_invert+0x58>
    43dc:	46 2f       	mov	r20, r22
    43de:	4f 70       	andi	r20, 0x0F	; 15
    43e0:	40 5d       	subi	r20, 0xD0	; 208
    43e2:	4a 33       	cpi	r20, 0x3A	; 58
    43e4:	18 f0       	brcs	.+6      	; 0x43ec <__ultoa_invert+0x7c>
    43e6:	49 5d       	subi	r20, 0xD9	; 217
    43e8:	31 fd       	sbrc	r19, 1
    43ea:	40 52       	subi	r20, 0x20	; 32
    43ec:	41 93       	st	Z+, r20
    43ee:	02 d0       	rcall	.+4      	; 0x43f4 <__ultoa_invert+0x84>
    43f0:	a9 f7       	brne	.-22     	; 0x43dc <__ultoa_invert+0x6c>
    43f2:	ea cf       	rjmp	.-44     	; 0x43c8 <__ultoa_invert+0x58>
    43f4:	b4 e0       	ldi	r27, 0x04	; 4
    43f6:	a6 95       	lsr	r26
    43f8:	97 95       	ror	r25
    43fa:	87 95       	ror	r24
    43fc:	77 95       	ror	r23
    43fe:	67 95       	ror	r22
    4400:	ba 95       	dec	r27
    4402:	c9 f7       	brne	.-14     	; 0x43f6 <__ultoa_invert+0x86>
    4404:	00 97       	sbiw	r24, 0x00	; 0
    4406:	61 05       	cpc	r22, r1
    4408:	71 05       	cpc	r23, r1
    440a:	08 95       	ret
    440c:	9b 01       	movw	r18, r22
    440e:	ac 01       	movw	r20, r24
    4410:	0a 2e       	mov	r0, r26
    4412:	06 94       	lsr	r0
    4414:	57 95       	ror	r21
    4416:	47 95       	ror	r20
    4418:	37 95       	ror	r19
    441a:	27 95       	ror	r18
    441c:	ba 95       	dec	r27
    441e:	c9 f7       	brne	.-14     	; 0x4412 <__ultoa_invert+0xa2>
    4420:	62 0f       	add	r22, r18
    4422:	73 1f       	adc	r23, r19
    4424:	84 1f       	adc	r24, r20
    4426:	95 1f       	adc	r25, r21
    4428:	a0 1d       	adc	r26, r0
    442a:	08 95       	ret

0000442c <_exit>:
    442c:	f8 94       	cli

0000442e <__stop_program>:
    442e:	ff cf       	rjmp	.-2      	; 0x442e <__stop_program>
